<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo 主题美化</title>
      <link href="/2022/08/29/Hexo%20%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
      <url>/2022/08/29/Hexo%20%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>使用（<code>css</code>+<code>js</code>） 实现将<code>静态</code>图片绘制成动态 <code>gif</code> ，我将其应用到每个有 <code>nav</code>盒子的页面，成品效果如下：</p><h1 id="实现库洛米挂坠"><a href="#实现库洛米挂坠" class="headerlink" title="实现库洛米挂坠"></a>实现库洛米挂坠</h1><p>本文使用（css+js） 实现将静态图片绘制成动态 gif ，我将其应用到每个有 nav盒子的页面,</p><p><video src="https://live.csdn.net/v/embed/230732"  style="width: 400px; height: 300px;"></video></p><p>CSDN地址：<a href="https://editor.csdn.net/md/?articleId=126249663" target="_blank" rel="noopener">piaohuier</a></p><p>我的博客：<a href="https://blog.puhuier.xyz/" target="_blank" rel="noopener">piaohuier</a><br>详细步骤如下：</p><h2 id="找到想要的图片（注意：不是-gif-动图）"><a href="#找到想要的图片（注意：不是-gif-动图）" class="headerlink" title="找到想要的图片（注意：不是 gif 动图）"></a>找到想要的图片（注意：不是 gif 动图）</h2><p>如下，原图<code>120*130 px</code>：<br><img src="https://img-blog.csdnimg.cn/1cd104d358cf4f1185d224fb5e351a7e.png" alt="在这里插入图片描述"></p><h2 id="PS-绘制-css-图片素材"><a href="#PS-绘制-css-图片素材" class="headerlink" title="PS 绘制 css 图片素材"></a>PS 绘制 css 图片素材</h2><p><img src="https://img-blog.csdnimg.cn/fcc896daf4f94d43a506bc6b20285be9.png" alt="在这里插入图片描述"><br>复制图片，改造图片动作，绘制成几份图片。其中，4 个小图高宽相同，因此整个图是高<code>130px</code>,宽120*4=<code>480px</code></p><h2 id="引入代码设置"><a href="#引入代码设置" class="headerlink" title="引入代码设置"></a>引入代码设置</h2><p><code>img</code>:将放在主题目录下：\blog\themes\Butterfly\source\img\XXX.png<br><code>css</code>:主题目录下：\blog\themes\Butterfly\source\css\background.css<br><code>javascript</code>:主题配置文件：butterfly.yml，找到<code>inject</code>部分，如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">  <span class="string">//</span> <span class="string">主题目录下的相对路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src="/js/my-js/diy.js"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-代码部分"><a href="#JavaScript-代码部分" class="headerlink" title="JavaScript 代码部分"></a>JavaScript 代码部分</h2><p>通过原生 JavaScript ，主要思想是使用 <code>createElement</code>方法、<code>appendChild</code> 方法和<code>className</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试 是否引入</span></span><br><span class="line"><span class="comment">//  alert('')</span></span><br><span class="line"><span class="comment">// 头部大背景元素</span></span><br><span class="line"><span class="comment">// 获取每个页面共同元素 body_wrap</span></span><br><span class="line"><span class="keyword">var</span> body_wrap = <span class="built_in">document</span>.querySelector(<span class="string">'#body-wrap'</span>)</span><br><span class="line"><span class="comment">// 记录是否创建元素</span></span><br><span class="line"><span class="comment">// 是否首页</span></span><br><span class="line"><span class="comment">// 原生 jS 没有链式编程，因此分别存储</span></span><br><span class="line"><span class="keyword">var</span> navNode = body_wrap.firstElementChild</span><br><span class="line"><span class="keyword">var</span> navClassName = navNode.className</span><br><span class="line"><span class="comment">// console.log(navClassName)</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 内容块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(layoutPage.offsetTop)</span></span><br><span class="line"><span class="comment">// var topsize = bgUp.scrollTop</span></span><br><span class="line"><span class="keyword">var</span> ceilingLamp</span><br><span class="line"><span class="comment">// console.log(window.clientHeight)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// flag = true</span></span><br><span class="line">  <span class="comment">// var node = document.createElement("div");</span></span><br><span class="line">  <span class="comment">// var contentnode = document.createElement("img")</span></span><br><span class="line">  <span class="comment">// node.className = "ceilingLamp"</span></span><br><span class="line">  <span class="comment">// bgUp.appendChild(node)</span></span><br><span class="line">  <span class="comment">// node.appendChild(contentnode)</span></span><br><span class="line">  ceilingLampF()</span><br><span class="line">  clacHeight(ceilingLamp, flyNode)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.pageYOffset)</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt;= <span class="number">0</span> &amp;&amp; flag == <span class="literal">false</span>) &#123;</span><br><span class="line">    ceilingLampF()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    clacHeight(ceilingLamp, flyNode)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'隐藏吊灯'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  吊灯、库洛米的动态高度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clacHeight</span>(<span class="params">postNode, flyNode</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// window.pageYOffset : 是窗口被卷曲的长度</span></span><br><span class="line">  <span class="keyword">var</span> extent = <span class="built_in">window</span>.pageYOffset</span><br><span class="line">  <span class="keyword">if</span> (navClassName == <span class="string">"full_page"</span>) &#123;</span><br><span class="line">    postNode.style.height = extent - <span class="number">500</span> + <span class="string">"px"</span></span><br><span class="line">    flyNode.style.top = postNode.style.height</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    postNode.style.height = extent + <span class="string">"px"</span></span><br><span class="line">    flyNode.style.top = postNode.style.height</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ceilingLampF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">var</span> NewNode = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">  <span class="keyword">var</span> contentnode = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>)</span><br><span class="line"></span><br><span class="line">  NewNode.className = <span class="string">"ceilingLamp"</span></span><br><span class="line">  navNode.appendChild(NewNode)</span><br><span class="line"></span><br><span class="line">  contentnode.className = <span class="string">"fly"</span></span><br><span class="line">  NewNode.appendChild(contentnode)</span><br><span class="line"></span><br><span class="line">  ceilingLamp = <span class="built_in">document</span>.querySelector(<span class="string">".ceilingLamp"</span>)</span><br><span class="line">  flyNode = <span class="built_in">document</span>.querySelector(<span class="string">".fly"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css-部分"><a href="#css-部分" class="headerlink" title="css 部分"></a>css 部分</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ceilingLamp</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15vh</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">6px</span> dashed <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">106</span>, <span class="number">160</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">72</span>, <span class="number">61</span>, <span class="number">78</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fly</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(/img/fly.png) no-repeat;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">35%</span>);</span><br><span class="line">  <span class="comment">/* 我们元素可以添加多个动画， 用逗号分隔 */</span></span><br><span class="line">  <span class="attribute">animation</span>: flyKuluomi <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">4</span>) infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> flyKuluomi &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">480px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题美化 </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机端不显示库洛米挂坠</title>
      <link href="/2022/08/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%A1%88%E4%BE%8B/"/>
      <url>/2022/08/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="html-标签"><a href="#html-标签" class="headerlink" title="html 标签"></a>html 标签</h1><p>开发移动端，实现理想视口效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-媒体查询"><a href="#CSS-媒体查询" class="headerlink" title="CSS 媒体查询"></a>CSS 媒体查询</h1><p>根据屏幕宽度调整样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 媒体查询窗口设置 一般宽度小于600px 代表手机端*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">600px</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.fly</span>,</span><br><span class="line">  <span class="selector-class">.ceilingLamp</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码，为了解决手机端库洛米挂坠影响阅读体验，而设置手机端不显示库洛米挂坠。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配方案</title>
      <link href="/2022/08/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2022/08/22/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>适配</p><h1 id="为什么做适配-？"><a href="#为什么做适配-？" class="headerlink" title="为什么做适配 ？"></a>为什么做适配 ？</h1><ul><li><a href="https://www.cnblogs.com/gg-qq/p/14535413.html" target="_blank" rel="noopener">1px 问题</a></li><li>高清屏图片显示模糊</li></ul><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>屏幕尺寸</li><li>屏幕密度</li><li>物理像素</li><li>分辨率</li><li>设备独立像素</li><li>物理分辨率、逻辑分辨率、设备像素比（dpr）</li><li>CSS 像素</li></ul><h2 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h2><p>屏幕对角线长度，单位英寸。</p><h2 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h2><p>设备屏幕上真实存在的像素点，是屏幕呈像最小单位。</p><h2 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h2><p>屏幕密度（PPI）：设备表面上存在的像素数量，通常以每英寸有多少像素计算。</p><h2 id="物理分辨率、逻辑分辨率"><a href="#物理分辨率、逻辑分辨率" class="headerlink" title="物理分辨率、逻辑分辨率"></a>物理分辨率、逻辑分辨率</h2><p><strong>物理分辨率</strong>：指横、纵向上的物理像素点数量</p><ul><li>iPhone6 屏幕分辨率：750 * 1334 （代表：横向有 750 个像素，纵向 1334 个像素）</li></ul><p>但是，屏幕尺寸不变，分辨率翻倍，图像会被缩小一倍，因此需要办法解决。</p><p><strong>CSS 像素</strong></p><ul><li>虚拟像素</li><li>CSS 像素是相对单位，主要在浏览器上精确度量 Web 页面上的内容；</li><li>一般情况下，CSS 像素可以等同于<strong>设备独立像素</strong>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码，确保 CSS 像素可以等同于<strong>设备独立像素</strong>。</p><p><strong>设备独立像素</strong></p><h1 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h1><p>1、媒体查询 <code>Media Queries</code>——CSS3</p><p>2、<code>flex</code> 弹性布局</p><p>3、<code>rem</code> + <code>viewport</code> 缩放</p><p>4、<code>rem</code> 方式</p><p>5、<code>vw</code> / <code>vh</code> 布局</p><p>6、<code>meta</code> 理想视口</p><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p><code>media queries</code> :主要通过查询不同的可视宽度来执行不同的 <code>css</code> 代码，最终以达到界面的配置。</p><p><strong>语法</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span>|<span class="keyword">only</span> mediatype <span class="keyword">and</span> (expressions) &#123;</span><br><span class="line">    <span class="comment">/* CSS 代码 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键字：and、not、only<br> （1）and：表示可以将多个媒体特性连接到一起，相当于“且”的意思<br> （2）<strong>not</strong>：表示排除某个媒体类型，相当于“非”的意思，<strong>可以省略</strong><br> （3）<strong>only</strong>：表示指定某个特定的媒体类型，<strong>可以省略</strong></p><p><code>mediatype</code>：媒体类型</p><div style="width: auto; margin:0 auto;"><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">all</td><td align="center">用于所有多媒体类型设备</td></tr><tr><td align="center">print</td><td align="center">用于打印机</td></tr><tr><td align="center"><strong>screen</strong></td><td align="center"><strong>用于电脑屏幕，平板，智能手机等。</strong></td></tr><tr><td align="center">speech</td><td align="center">用于屏幕阅读器</td></tr></tbody></table></div><p><code>expressions</code>：条件表达式</p><ul><li>max-width： 输出设备中页面最大可视区域宽度，小于这个width时，其中的css生效</li><li>min-width： 输出设备中页面最小可视区域宽度，大于这个width时，其中的css生效</li><li>max-height： 输出设备中页面最大可视区域高度</li><li>min-height： 输出设备中页面最小可视区域高度</li><li>……</li></ul><p>【案例】：<strong>背景色</strong>随着<strong>可视窗口</strong>大小改变而改变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 表示 匹配媒体类型为电脑屏幕等在宽度大于480px 并且小于560px时 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">480px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">560px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>引入方式：</li></ol><ul><li><code>head</code>头部引入 <code>link</code>标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"screen and (max-width:600px)"</span> <span class="attr">href</span>=<span class="string">"./css/blue.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"screen and (min-width:900px)"</span> <span class="attr">href</span>=<span class="string">"./css/red.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"screen and (min-width:600px) and (max-width:900px)"</span> <span class="attr">href</span>=<span class="string">"./css/green.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>CSS</code>代码中</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">600px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">body</span> &#123;</span><br><span class="line">                <span class="attribute">background-color</span>: blue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span><span class="number">900px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">body</span> &#123;</span><br><span class="line">                <span class="attribute">background-color</span>: red;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*使用关键词"and"将多个媒体特性结合在一起*/</span></span><br><span class="line">       <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span><span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">900px</span>)&#123;</span><br><span class="line">            <span class="selector-tag">body</span> &#123;</span><br><span class="line">                <span class="attribute">background-color</span>:green;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>style 标签内 <code>@import</code> 中引入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen and (min-width:600px) and (max-width:900px)"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="keyword">@import</span> url(<span class="string">"css/style.css"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-弹性布局"><a href="#flex-弹性布局" class="headerlink" title="flex 弹性布局"></a>flex 弹性布局</h2><p>可以控制子盒子的位置</p><p><strong>flex 弹性布局：</strong> </p><ul><li>操作方便，布局简单，移动端应用很广泛</li><li><code>PC</code>端浏览器支持情况差</li><li><code>IE11</code>或更低版本，不支持或部分支持</li></ul><p><strong>建议：</strong> </p><ol><li>若是<code>PC</code>端布局，建议传统布局。</li><li>若是移动端布局或者不考虑兼容性的<code>PC</code>端布局，还是使用<code>flex</code>弹性布局。</li></ol><p><strong>布局原理</strong>：</p><p>给父盒子添加<code>flex</code>属性，来控制子盒子的位置排列方式从而实现<code>flex</code>布局，子盒子也可以控制自己的位置。</p><ol><li>有两个坐标轴：主轴、交叉轴</li><li>三个默认属性：flex-direction、justify-content、align-items</li></ol><p><strong>父项常见属性解释</strong></p><ul><li><code>flex-direction</code>：设置主轴的方向（默认值：<code>row</code>，从左到右）</li><li><code>justify-content</code>：设置<strong>子元素</strong>在主轴上的排列方式（默认值：<code>flex-start</code>，从起点开始排列）</li><li><code>align-items</code>：设置子元素在交叉轴上的位置（默认值：<code>stretch</code> ，占满拉伸）（单行）</li></ul><p><strong>子项常见属性</strong></p><ul><li>flex：子项目占的份数</li><li>align-self：控制子项自己在侧轴的排列方式</li><li>order：属性定义子项的排列顺序（前后顺序）</li></ul><h2 id="rem-viewport-缩放"><a href="#rem-viewport-缩放" class="headerlink" title="rem + viewport 缩放"></a>rem + viewport 缩放</h2><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p><code>rem</code>是<strong>CSS3</strong>新增的一个相对单位，其值是相对于<strong>html</strong>根元素的，<code>html</code>的<code>font-size</code>设置多大，<code>1rem</code>就是多大；</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"><span class="attribute">font-size </span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，1em = 30px；则非根元素设置 <code>width:2rem;</code>时，其表示就是<code>24px</code>。</p><p><strong>rem 的优势</strong>：整个页面中只有一个<html>，可以很好的来控制整个页面的元素大小比例。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 移动适配 </span></span><br><span class="line"><span class="comment"> 1. HTML 标签加字号 1/10;</span></span><br><span class="line"><span class="comment"> 2. 写 rem 单位的尺寸 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width:</span> <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width:</span><span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">37.5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width:</span> <span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">41.4px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="comment">/* 68 * 29 */</span></span><br><span class="line">    <span class="comment">/* width: 68px; */</span></span><br><span class="line">    <span class="comment">/* 设计稿375, HTML 37.5   68/37.5 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1.813rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.773rem</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码，通过媒体查询可视窗口大小来直接调整<code>html</code>字号大小，间接调整<code>rem</code> 表示的字号大小，达到缩放视口，字体响应式缩放的目的。</p><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>学习 <code>viewport</code>就要先认识三种<a href="https://blog.csdn.net/puhuihui/article/details/123966446" target="_blank" rel="noopener">视口</a>，和 <code>dpr</code>。</p><p>dpr </p><p>将布局视口适配为视觉视口，即<strong>理想视口</strong>，一个标准的移动<code>web</code>页面 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1，user-scalable=0"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了兼容不同设备的不同 <code>dpr</code>值，使用<code>js</code>动态设置 <code>initial-scale</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var oMeta &#x3D; document.createElement(&#39;meta&#39;);</span><br><span class="line">oMeta.setAttribute(&#39;name&#39;,&#39;viewport&#39;);</span><br><span class="line">if (window.devicePixelRatio &#x3D;&#x3D; 3) &#123;</span><br><span class="line">    oMeta.setAttribute(&#39;content&#39;, &#39;width&#x3D;device-width, initial-scale&#x3D;0.333,minimun-scale&#x3D;0.333,maximun-scale&#x3D;0.333,user-scalable&#x3D;no&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (window.devicePixelRatio &#x3D;&#x3D; 2) &#123;</span><br><span class="line">    oMeta.setAttribute(&#39;content&#39;, &#39;width&#x3D;device-width, initial-scale&#x3D;0.5,minimun-scale&#x3D;0.5,maximun-scale&#x3D;0.5,user-scalable&#x3D;no&#39;);</span><br><span class="line">&#125;</span><br><span class="line">document.getElementsByTagName(&#39;head&#39;)[0].appendChild(oMeta);</span><br></pre></td></tr></table></figure><p>根据屏幕宽度设定<code>rem</code>值，需要适配的元素都使用<code>rem</code>单位，不需要适配的元素还是使用<code>px</code>单位。<code>1em=16px</code> ;</p><blockquote><p>根据rem将页面放大dpr倍, 然后viewport设置为1/dpr.</p></blockquote><h2 id="vw-vh-布局"><a href="#vw-vh-布局" class="headerlink" title="vw / vh 布局"></a>vw / vh 布局</h2><p><code>vW</code>和<code>vh</code>分别指的是屏幕可视窗口的宽、高</p><p><strong>使用方法</strong></p><p><code>1vw</code> 或<code>1vh</code>，前面的数值代表占屏幕宽、高的百分比 <code>%</code>；</p><p>如<code>20vw</code>代表占屏幕宽度的20%；</p><p>不用设置 html 具体数值，用起来更方便。</p><h2 id="meta-理想视口"><a href="#meta-理想视口" class="headerlink" title="meta 理想视口"></a>meta 理想视口</h2><p>高度定死，宽度自适应，元素都采用<code>px</code>做单位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>width :</strong> 控制<code>viewport</code>的大小，可以指定一个具体的值，如600， 或者特殊的值，如<code>device-width</code>为设备的宽度</p></li><li><p><strong>initial-scale :</strong> 初始缩放比例，页面第一次加载时的缩放比例</p></li><li><p><strong>maximum-scale :</strong> 允许用户缩放到的最大比例，范围从0到10.0</p></li><li><p><strong>minimum-scale :</strong> 允许用户缩放到的最小比例，范围从0到10.0</p></li><li><p><strong>user-scalable :</strong> 用户是否可以手动缩放，值可以是：</p><p>① yes、 true：允许用户缩放；② no、false不允许用户缩放</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络（第二章内容）</title>
      <link href="/2022/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%89/"/>
      <url>/2022/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a><center>网络协议</h2><p>计算机网络的所有通信过程必须遵守某种、些规则——<strong>协议</strong></p><p>网络协议：简称<strong>协议</strong>，是为进行网络中的数据交换而建立的规则、标准和约定。</p><p>协议规定了交换消息的<code>格式、意义、顺序、</code>以及<code>动作</code></p><ol><li><p>协议的三要素</p><p>语法（Syntax）：数据与控制信息的结构和格式</p><p>语义（Semantics）：需要发出何种控制信息、需要完成的动作以及做何种响应、差错控制；</p><p>时序（Timing）：时间顺序、速度匹配</p></li></ol><p>协议规范了网络种所有信息发送和接收过程。</p><p>[ 资源共享 ]：是计算机网络的功能，资源包括计算机硬件资源和软件资源。</p><p>[ 计算机网络的主要功能 ]：资源共享（基础）、 信息交换 、分布式处理 、集中管理。</p><p>[ 计算机网络的分类 ]：</p><p>1、根据<code>规模大小</code>、<code>距离远近</code>分类：局域网（LAN）、城域网（MAN）、广域网（WAN）。</p><p>2、根据网络<code>操作系统</code>分类： NIX 网络、NOVELL 网络、Windows NT 网络。</p><p>3、 根据<code>信息传输技术</code>分类：广播式网络、点到点网络。</p><p>4、根据<code>连接方式</code>分类：总线型、星型、环型、树型和混合型等。</p><p>[ 计算机网络的基本组成 ]：网络操作系统、网络适配器（网卡）、网络电缆（网络线）、服务器和工作站等。</p><h1 id="网络应用的基础"><a href="#网络应用的基础" class="headerlink" title="网络应用的基础"></a><center>网络应用的基础</h1><h2 id="几种体系结构-？"><a href="#几种体系结构-？" class="headerlink" title="几种体系结构 ？"></a><center>几种体系结构 ？</h2><h3 id="客户机-服务器结构（Client-Server，C-S）"><a href="#客户机-服务器结构（Client-Server，C-S）" class="headerlink" title="客户机/服务器结构（Client-Server，C/S）"></a>客户机/服务器结构（Client-Server，C/S）</h3><p>服务器和客户端通讯，比如 <code>web</code></p><h3 id="点对点结构（Peer-to-peer，P2P）"><a href="#点对点结构（Peer-to-peer，P2P）" class="headerlink" title="点对点结构（Peer-to-peer，P2P）"></a>点对点结构（Peer-to-peer，P2P）</h3><p>客户端之间通讯</p><p>相对于<code>C/S</code>存在的优缺点</p><blockquote><p>优点：高度可伸缩</p><p>缺点：难于管理</p></blockquote><h3 id="混合结构（Hybrid）"><a href="#混合结构（Hybrid）" class="headerlink" title="混合结构（Hybrid）"></a>混合结构（Hybrid）</h3><p>将<code>C/S</code>和<code>P2P</code>混合使用</p><p>文件传输使用：<code>P2P</code></p><p>文件搜索使用：<code>C/S</code>——集中式</p><h2 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a><center>进程间的通信</h2><p>进程是什么  ？</p><ul><li>主机上运行的程序</li></ul><p>同一主机上运行的进程间如何通信 ？</p><ul><li>进程间的通信机制</li><li>操作系统提供</li></ul><p>不同主机上运行的进程间如何通信 ？</p><ul><li>消息交换</li></ul><p>客户端进程：发起通讯的进程</p><p>服务器进程：等待通信请求的进程</p><blockquote><p>Q：采用<code>P2P</code>架构的应用是否存在客户机进程、服务器进程之分？</p><p>A：存在！</p></blockquote><h3 id="套接字：Socket"><a href="#套接字：Socket" class="headerlink" title="套接字：Socket"></a>套接字：Socket</h3><p>进程之间通信利用<code>socket</code>发送/接收消息实现 </p><p>传输基础设施向进程提供 <code>API</code></p><ul><li>传输协议的选择</li><li>参数的设置</li></ul><p>网络应用的开发通常叫：<code>socket</code>编程</p><h4 id="如何寻址进程-？"><a href="#如何寻址进程-？" class="headerlink" title="如何寻址进程 ？"></a>如何寻址进程 ？</h4><p>不同主机上进程间的通信，那么每个进程必须拥有<code>标识符</code></p><p>如何寻址主机？——主机</p><blockquote><p>Q：有了<code>IP</code>地址后，是否足以定位进程？</p><p>A：no，同一主机可能同时多个进程需要通信</p></blockquote><p>端口号/Port number</p><p>为每个主机上需要通信的进程分配一个端口号</p><p>进程的标识符</p><p><code>IP</code>地址+端口号</p><h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a><center>应用层协议</h3><p>网络应用组遵循应用层协议</p><p>公开协议</p><ul><li><p>由<code>RFC</code> 定义</p></li><li><p>允许互操作</p></li><li><p>HTTP、SMTP、……</p></li></ul><p>私有协议</p><p>多数<code>P2P</code>文件共享应用</p><p>应用层协议的内容</p><p>消息的类型</p><ul><li>请求消息</li><li>响应消息</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络（第一章内容）</title>
      <link href="/2022/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%89/"/>
      <url>/2022/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a><center>计算机网络</h1><p>计算机网络指利用<code>通信设备</code>和<code>线路</code>将地理位置不同的功能、多个计算机系统互联起来，以功能完善的网络软件实现网络中资源共享和信息交换的系统。</p><blockquote><p>定义：计算机网络就是<code>互连</code>的、<code>自治</code>的计算机集合。</p><p>自治：无主从关系</p><p>互连：互联互通</p><ul><li>通信链路</li></ul></blockquote><p>Q：距离远、数量大怎么保证互连？</p><p>A：通过<code>交换网络</code>互联主机（交换节点：路由器、交换机）</p><h2 id="什么是Internet？（组成细节角度）"><a href="#什么是Internet？（组成细节角度）" class="headerlink" title="什么是Internet？（组成细节角度）"></a>什么是<code>Internet</code>？（组成细节角度）</h2><p>【全球最大的<code>互联网络</code>】</p><ul><li><p>ISP（Internet Service Provide）网路互联的<strong>网络之网络</strong></p><p>计算设备：主机 = 端系统 ，运行各种网络应用</p><p>PC　服务器　笔记本　智能手机</p></li></ul><p>【连接方式】</p><ul><li><p><code>通信链路</code></p><p>光纤、铜缆、无线电、卫星 ……</p></li><li><p>分组交换</p><p>转发分组（数据包）</p><p><strong>路由器</strong>（routers）和 <strong>交换机</strong>（switches）</p></li></ul><h2 id="什么是Internet？（服务角度）"><a href="#什么是Internet？（服务角度）" class="headerlink" title="什么是Internet？（服务角度）"></a>什么是<code>Internet</code>？（服务角度）</h2><ul><li><p>为网络应用提供通信服务的通信基础设施</p><p>Web、Email、网络游戏、电子商务……</p></li><li><p>为网络应用提供应用编程接口（<code>API</code>）</p><p>支持应用程序’’连接’’<code>Internet</code>发送 / 接收数据</p></li></ul><h1 id="计算机网络结构"><a href="#计算机网络结构" class="headerlink" title="计算机网络结构"></a><center>计算机网络结构</h1><p>【网络边缘】：</p><p>1、主机    2、网络应用</p><p>接入网络，物理介质：</p><p>有线或无线通信链路</p><p>【网络核心（核心网络）】：</p><p>1、互联的路由器（或分组转发设备）2、网络之网络</p><h2 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h2><p>【主机（端系统）】：位于”<strong>网络边缘</strong>“，运行网络应用程序：web、Email</p><p>【客户/服务器（client/server）应用模型】：客户发送请求，接收服务器响应</p><p>【Peer-peer（P2P）对等的应用模型】：通信<strong>对等</strong>的应用中进行：QQ</p><p>Q：如何将网络边缘接入核心网（边缘路由器）？</p><p>A：接入网络：住宅；学校、企业；移动接入网络</p><blockquote><p> 用户最关心的是？</p><ul><li><p>带宽（bandwidth）（bps）?</p></li><li><p>共享还是独占？</p></li></ul></blockquote><h2 id="接入网络"><a href="#接入网络" class="headerlink" title="接入网络"></a>接入网络</h2><ol><li>数字用户线路（DSL）</li></ol><p>利用<strong>已有的</strong>电话线连接到中心局的<code>DSLAM</code></p><p>【<code>FDM</code>】根据 不同<code>HZ</code>分为：上行、下行、传统通话</p><ol start="2"><li>机构（企业）接入网络（Ethernet）</li></ol><p>– 主要用于：学校、公司等组织机构</p><p>– 传输速率：10Mbps、100Mbps、1Gbps、10Gbps</p><p>– 目前，端系统通常直接连接以太网交换机（<code>switch</code>）</p><ol start="3"><li>电缆网络</li></ol><p><code>cable modem</code></p><p>频分多路复用：在不同频带（载波）上传输不同频道</p><p>【<code>HFC</code>】混合光纤同轴电缆</p><p>– 非对称：下行高达<code>30Mbps</code>，上行<code>2Mbps</code>传输速率</p><p>– 各家庭设备通过：电缆网络 -&gt;光纤接入<code>ISP</code>路由器</p><p>– 即使<strong>带宽大</strong>、是<strong>共享</strong>的网络也会很慢</p><ol start="4"><li>无线接入网络</li></ol><p>通过<strong>共享</strong>的无线接入网络连接端系统与路由器</p><p>通过<code>基站</code>（base station）或称为”<code>接入点</code>“</p><ul><li><p>无线局域网（LANs）</p><p>同一建筑物内（30m）</p></li><li><p>广域无线接入</p><p>通过电信运营商（蜂窝网），接入范围在几十公里</p><p>带宽：1Mbps、10Mbps、100Mbps</p><p>3G、4G、5G 网</p></li></ul><h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><p>互联的路由器网络</p><p>【关键功能】：<strong>路由</strong> + <strong>转发</strong></p><p>【路由】：确定分组从源到目的的传输路径</p><p><code>路由算法</code></p><p>【转发】：将分组从路由器的输入端口交换至正确的输出端口</p><p><code>本地转发表</code></p><p>路由表是路由器遵循路由协议，路由协议通过路由算法计算获得。</p><blockquote><p>网络核心解决的基本问题：</p><p>Q：如何实现数据从源主机通过网络核心送达目的主机？</p><p>A：数据交换</p></blockquote><h3 id="Internet结构：网络之网络"><a href="#Internet结构：网络之网络" class="headerlink" title="Internet结构：网络之网络"></a>Internet结构：网络之网络</h3><p>端系统通过<code>接入ISP</code>连接到<code>Internet</code></p><blockquote><p>Q：当前的<code>Internet</code>结构 ？</p><p>A：无人能给出精确的描述</p></blockquote><h1 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a><center>数据交换</h1><p>– 动态转接、动态分配传输资源</p><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><p>【三个阶段】电路建立连接-通信-释放连接</p><p>【特点】独占资源</p><blockquote><p>Q：电路交换网络如何共享中继线 ？</p><p>A：多路复用技术</p></blockquote><p>【多路复用技术】</p><p>– 链路、网络资源（如带宽）划分为<strong>资源片</strong>，将资源片分配给各路呼叫（calls），每路呼叫<code>独占</code>分配到的资源篇进行通信，资源片可能<code>闲置</code>（无共享状态）</p><p>– 典型方法：频分多路复用（FDM）、时分多路复用（TDM）、波分多路复用（BDM）、码分多路复用（CDM）</p><h2 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h2><p>【交换方式】：存储-转发</p><p>【报文】：源（应用）发送信息整体。比如：一个文件</p><p>【传输延迟】：</p><p>– 分组传输延迟（时延）公式：<code>M/R</code>（报文长度<code>M</code>，在传输速率为<code>R</code>的链路上传输分组）</p><p>– 每次传输需要<code>M/R</code>秒</p><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>广泛使用</p><p>【交换方式】：存储-转发</p><p>【分组】：报文分拆出来的一系列相对较小的数据包</p><p>– 分组 = 头 + 数据</p><p>– 分组交换需要报文的<code>拆分</code>与<code>重组</code></p><p>– 会产生<code>额外开销</code></p><p>【多路复用】：分组交换——统计多路复用</p><p>【传输延迟】：</p><p>– 分组传输延迟（时延）<strong>公式</strong>：<code>L/R</code>（拆分为较小长度<code>L</code>，在传输速率为<code>R</code>的链路上传输分组）</p><p>– 每个分组传输需要<code>L/R</code>秒</p><p>链路数 ≈ 跳步数(h) = 传输链路上的路由器数(n) + 1</p><p>【交付时间】：<strong>公式</strong>：T = M / R+(h-1) L/R =  M / R+n*L/R （传输时间 + 转发时间）</p><blockquote><p>【与<strong>报文</strong>交换的区别】：</p><p><strong>报文</strong>交换使用完整的报文进行”存储-转发“；</p><p><strong>分组</strong>交换使用较小的分组进行”存储-转发“。</p><p>Q：哪种交换更好呢 ？</p><p>A：从时间效率角度、缓存角度</p><p>【传输时延】：报文交换串行，分组交换可以并行交换，后者传输效率更高。</p><p>【缓存】：分组后的数据长度小，对硬件的缓存容量要求低</p></blockquote><blockquote><p>【与<strong>电路</strong>交换的区别】：</p><p><strong>电路</strong>交换用户独占</p><p><strong>分组</strong>交换允许更过用户使用网络——网络资源充分共享</p><p>Q：分组交换绝对优于电路交换 ？</p><p>A：分组更适用于<strong>突发</strong>数据传输网络（Internet），不需要预约、占用，可能会产生拥塞，需要协议处理可靠数据传输和拥塞控制</p></blockquote><h1 id="计算机网络性能"><a href="#计算机网络性能" class="headerlink" title="计算机网络性能"></a><center>计算机网络性能</h1><h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a><strong>速率</strong></h2><p>即 <strong>数据率</strong> 或称为 <strong>数据传输速率</strong> 或 <strong>比特率</strong></p><p>– 单位时间（秒）传输信息（比特）量</p><p>– 单位 ：b/s(或<code>bps</code>)、kb/s、Gb/s</p><p>– <code>k=10^3</code>、<code>M=10^6</code>、<code>G=10^9</code></p><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a><strong>带宽</strong></h2><p>有两种含义，可以通过 <strong>单位</strong>、<strong>上下文</strong> </p><p>– 通信：原指信号具有的频率宽度，即最高频率与最低频率之差，单位：<code>HZ</code></p><p>– 网络中：数字信道所能传输的 <strong>最高数据率</strong>，单位：<code>b/s（bps）</code></p><h2 id="延迟-时延"><a href="#延迟-时延" class="headerlink" title="延迟/时延"></a><strong>延迟/时延</strong></h2><p>Q：分组交换为什么会发生丢包和时延 ？</p><p>A：分组在路由器缓存中排队，如果缓存满了，刚到达的分组被 <strong>丢弃</strong></p><p>【<strong>四种 分组延迟</strong>】</p><p>– 结点处理延迟：差错检验……</p><p>– 排队延迟：等待输出链路可用，取决于路由器拥塞状态，不确定</p><p>– 传输延迟：分组长度<code>L</code>（bits），链路带宽<code>R</code>（bps），<code>L/R</code></p><p>– 传播延迟：链路长度<code>d</code>、信号传播速度<code>s</code>（光速、无线电波），即公式： d/s</p><p><img src="https://img-blog.csdn.net/20180102141124840" alt=""></p><h2 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h2><p>【公式】：时延带宽积 = 传播时延 * 带宽</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201901%2F20190113010550758902.png&refer=http%3A%2F%2Fimage.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1663659488&t=9ce8d8f2b74293e3b087dfc5f878a383" alt=""></p><p>链路的时延带宽积又称为：<code>以比特为单位的链路长度</code></p><h2 id="分组丢失（丢包）"><a href="#分组丢失（丢包）" class="headerlink" title="分组丢失（丢包）"></a>分组丢失（丢包）</h2><p>丢包是因为队列缓存容量有限</p><p>网络处理方式不一样，<code>Internet</code>丢失直接不要</p><p>丢包率 = 丢包数 / 已发分组总数</p><h2 id="吞吐量-率"><a href="#吞吐量-率" class="headerlink" title="吞吐量/率"></a>吞吐量/率</h2><p>表示在<strong>发送</strong>端与<strong>接收</strong>端之间传送数据速率（b/s）</p><p><strong>即时吞吐量</strong>：给定时刻的速率</p><p><strong>平均吞吐量</strong>：一段时间的平均速率</p><p>吞吐量取决于<code>瓶颈链路</code>，即端到端路劲上，限制端到端吞吐量的链路</p><h1 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h1><p>组成部分：主机、路由器、各种链路、应用、协议、硬件，软件……</p><p>【网络体系结构】：从<strong>功能上</strong>描述计算机网络结构</p><p>【计算机网络体系结构】：计算机网络的各层及其协议的集合</p><p>【模块化分层】：有利于系统更新、维护。有利于标准化</p><h2 id="分层网络体系结构"><a href="#分层网络体系结构" class="headerlink" title="分层网络体系结构"></a>分层网络体系结构</h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.likecs.com%2Fdefault%2Findex%2Fimg%3Fu%3DaHR0cHM6Ly9waWFuc2hlbi5jb20vaW1hZ2VzLzQ4OC84NmI1ODZmNzcyMjUzZmM3YTA3NzVkZmEzZDliZjZmMC5wbmc%3D&refer=http%3A%2F%2Fwww.likecs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1663662434&t=68d9c87096c06843aaf69e3134bcd8f7" alt=""></p><p>【实体】：表示任何可发送或接收信息的硬件或软件进程</p><p>任一层实体需要使用<code>下层</code>服务，遵循<code>本层</code>协议，实现本层功能，向<code>上层</code>提供服务，服务是”<code>垂直的</code>“</p><p>【协议】：控制<code>两个对等实体</code>进行通信的规则集合，协议是”<code>水平的</code>“</p><h1 id="OSI-参考模型"><a href="#OSI-参考模型" class="headerlink" title="OSI 参考模型"></a><center>OSI 参考模型</h1><h2 id="OSI-参考模型解释与通信过程"><a href="#OSI-参考模型解释与通信过程" class="headerlink" title="OSI 参考模型解释与通信过程"></a>OSI 参考模型解释与通信过程</h2><p>【目的】支持<code>异构网络系统</code>的互联互通</p><p>– 异构网络系统互连的<code>国际标准</code></p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F658%2Fc4aada8382de26e90247702902faf8c2.png&refer=http%3A%2F%2Fwww.pianshen.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1663663065&t=b56eb6d3566e65c1b57ba28794eb7644" alt=""></p><p>注意：虚线、实线</p><p>相邻层之间通过<code>接口</code>传输数据，下面三层是<code>非端到端层</code></p><h2 id="OSI-参考模型数据封装与通信过程"><a href="#OSI-参考模型数据封装与通信过程" class="headerlink" title="OSI 参考模型数据封装与通信过程"></a>OSI 参考模型<strong>数据封装</strong>与通信过程</h2><p>一层层封装、一层层解封</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.zyiz.net%2Fupload%2F202006%2F14%2F202006141726062159.png&refer=http%3A%2F%2Fwww.zyiz.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1663663616&t=c8e5518aa7609b6378d668760fd9265a" alt=""></p><p>Q：为什么需要数据封装 ？</p><p>A：增加<code>控制信息</code></p><p>【<strong>控制信息</strong>】：地址、差错检测编码、协议控制</p><p>物理层</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>array 原生方法</title>
      <link href="/2022/08/13/Array%20%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/13/Array%20%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 取整、取余的方法</title>
      <link href="/2022/08/13/js%20%E5%8F%96%E6%95%B4%E3%80%81%E5%8F%96%E4%BD%99/"/>
      <url>/2022/08/13/js%20%E5%8F%96%E6%95%B4%E3%80%81%E5%8F%96%E4%BD%99/</url>
      
        <content type="html"><![CDATA[<h1 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h1><ol><li>取整</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 丢弃小数部分，保留整数部分</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">5</span>/<span class="number">2</span>)  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ol start="2"><li>向上取整</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有小数，+1</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">5</span>/<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">-5</span>/<span class="number">2</span>) <span class="comment">// -2</span></span><br></pre></td></tr></table></figure><ol start="3"><li>向下取整</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有小数，-1</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">5</span>/<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">-5</span>/<span class="number">2</span>) <span class="comment">// -3</span></span><br></pre></td></tr></table></figure><ol start="4"><li>四舍五入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="number">5</span>/<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h1 id="取余"><a href="#取余" class="headerlink" title="取余"></a>取余</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span> % <span class="number">4</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端、后端请求响应案例</title>
      <link href="/2022/08/11/Express/"/>
      <url>/2022/08/11/Express/</url>
      
        <content type="html"><![CDATA[<p>本文分为：前端、后端两部分讲诉。以下是前端发送请求到服务器，服务器响应前端，的整个过程的图解：</p><p><img src="https://img-blog.csdnimg.cn/14a0f3943229414b9a39cab4c3feac70.png#pic_center" alt="server"></p><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>前端主要是发起请求，本文使用自定义的<code>axios</code>请求方法，分为<strong>注册页面模块</strong>、<strong>axios 请求方法模块</strong>两部分。</p><p>前端运行地址： <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><h2 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h2><p>该页面主要是通过点击提交按钮，触发点击事件，发起注册请求。</p><p>目标端口是：<a href="http://localhost:3000/api/login，协议、域名、端口号之中，存在端口号与前端运行地址不一样，满足跨域请求的条件。后端部分会讲到：如何解决跨域问题。" target="_blank" rel="noopener">http://localhost:3000/api/login，协议、域名、端口号之中，存在端口号与前端运行地址不一样，满足跨域请求的条件。后端部分会讲到：如何解决跨域问题。</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"submitForm('loginForm')"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击提交，触发并传递给<code>submitForm</code>方法参数<code>loginForm</code>。其中，<code>loginForm</code>数据形式是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loginForm:&#123;</span><br><span class="line">    username:<span class="string">""</span>,  </span><br><span class="line">    pass:<span class="string">""</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第 7 行，<code>submitForm</code>发起请求，调用自定义的<code>axios</code>方法：<code>api.login(){}</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">"@/api"</span></span><br><span class="line"></span><br><span class="line">submitForm(formName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(valid)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.currentIndex===<span class="string">'login'</span>)&#123;</span><br><span class="line">                api.login(<span class="keyword">this</span>.loginForm).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">// 用户登陆成功</span></span><br><span class="line">                    <span class="keyword">if</span>(res.data.status === <span class="number">200</span>)&#123;</span><br><span class="line">                        <span class="comment">//用户信息存储到 vuex 和 localstorage</span></span><br><span class="line">                        <span class="keyword">this</span>.setUser(res.data)</span><br><span class="line">                        localStorage.setItem(<span class="string">'hp'</span>,<span class="built_in">JSON</span>.stringify(res.data))</span><br><span class="line">                        <span class="keyword">this</span>.$notify(&#123;</span><br><span class="line">                            title: <span class="string">'登录成功'</span>,</span><br><span class="line">                            type: <span class="string">'success'</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="comment">// 用户登陆成功跳转到home页面</span></span><br><span class="line">                        <span class="keyword">this</span>.$router.push(<span class="string">'/'</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">this</span>.$notify.error(&#123;</span><br><span class="line">                            title: <span class="string">'登录失败'</span>,</span><br><span class="line">                            message: <span class="string">'请重新登录'</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.currentIndex===<span class="string">'register'</span>)&#123;</span><br><span class="line">                api.register(<span class="keyword">this</span>.registerForm).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res)</span><br><span class="line">                    <span class="keyword">if</span>(res.data.status === <span class="number">200</span>)&#123;</span><br><span class="line">                        <span class="keyword">this</span>.$notify(&#123;</span><br><span class="line">                            title: <span class="string">'注册成功'</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            type: <span class="string">'success'</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="axios-请求方法"><a href="#axios-请求方法" class="headerlink" title="axios 请求方法"></a>axios 请求方法</h2><p>为了请求方法的应用性更强，选择自定义请求的方式编写封装请求。</p><p>考虑到模块开发、代码可读性的好处，将请求方法封装模块分为<strong>路径配置</strong>、<strong>自定义 axios</strong>、<strong>API封装</strong>三部分。</p><h3 id="URL-路径配置"><a href="#URL-路径配置" class="headerlink" title="URL 路径配置"></a>URL 路径配置</h3><p>每次请求都使用以下预定义的路径，该文件向外导出<code>base</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> base = &#123;</span><br><span class="line">  baseUrl: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">  register: <span class="string">"/api/register"</span>,<span class="comment">//用户的接口</span></span><br><span class="line">  login: <span class="string">"/api/login"</span>,</span><br><span class="line">  selectTbItemAllByPage: <span class="string">'/api/backend/item/selectTbItemAllByPage'</span>,<span class="comment">//商品列表请求路径</span></span><br><span class="line">  total: <span class="string">"/api/total"</span>,<span class="comment">//商品总条数</span></span><br><span class="line">  search: <span class="string">"/api/search"</span> <span class="comment">//商品 模糊查询</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> base</span><br></pre></td></tr></table></figure><h3 id="自定义-axios"><a href="#自定义-axios" class="headerlink" title="自定义 axios"></a>自定义 axios</h3><p>自定义<code>axios</code> 易用、简洁且高效的<code>http</code>库，对发起的<code>axios</code>请求和响应进行拦截 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /api/utils/request.js 文件</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios</span></span><br><span class="line"><span class="string">// 引入qs模块，用来序列化post类型的数据</span></span><br><span class="line"><span class="string">import qs from 'qs'</span></span><br><span class="line"><span class="string">import router from "</span>@/router<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//主要步骤：三步</span></span><br><span class="line"><span class="string">// 1.创建一个axios实例</span></span><br><span class="line"><span class="string">// 2.拦截器--请求拦截</span></span><br><span class="line"><span class="string">// 3.拦截器--响应拦截</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 1.创建一个axios实例</span></span><br><span class="line"><span class="string">const instance = axios.create(&#123;</span></span><br><span class="line"><span class="string">    timeout: 5000,  //超时处理，超过时间告诉用户超时</span></span><br><span class="line"><span class="string">    // baseURL: "</span>http:<span class="comment">//localhost:3000",</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance.all = axios.all;</span><br><span class="line">instance.spread = axios.spread</span><br><span class="line"><span class="comment">// 设置post的请求头</span></span><br><span class="line">instance.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br><span class="line"><span class="comment">// interceptors 拦截器</span></span><br><span class="line"><span class="comment">// 2.请求拦截 做一个逻辑后再把请求发送，可以用于配置公用的逻辑，就不用每个请求都配一遍。</span></span><br><span class="line"></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">    <span class="comment">// 请求拦截配置  </span></span><br><span class="line">    <span class="comment">// 拦截成功，返回非promise实例对象config</span></span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (config.method === <span class="string">'post'</span>) &#123;</span><br><span class="line">            config.data = qs.stringify(config.data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断token是否存在，存在就添加到请求头上</span></span><br><span class="line">        <span class="comment">// const token = store.state.loginModule.user.token;</span></span><br><span class="line">        <span class="comment">// if(token)&#123;</span></span><br><span class="line">        <span class="comment">//     config.headers.authorization = store.state.loginModule.user.token;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截失败时，返回promise</span></span><br><span class="line">    error =&gt; <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toLogin = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    router.push(<span class="string">"/login"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// errorHandle打印失败状态码对应的 描述和路由去向</span></span><br><span class="line"><span class="keyword">const</span> errorHandle = <span class="function">(<span class="params">status, info</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"服务器收到客户端通过PUT或者POST请求提交的表示，表示的格式正确，但服务器不懂它什么意思"</span>);</span><br><span class="line">            toLogin();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"客户端试图对一个受保护的资源进行操作，却又没有提供正确的认证证书"</span>);</span><br><span class="line">            toLogin();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"客户端请求的结构正确，但是服务器不想处理它"</span>);</span><br><span class="line">            toLogin();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"资源被围定义(网络请求地址错误)"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"执行请求处理代码时遇到了异常，它们就发送此响应代码"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"最可能的原因是资源不足：服务器突然收到太多请求，以至于无法全部处理"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(info);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.interceptors拦截器配置response响应拦截</span></span><br><span class="line">instance.interceptors.response.use(</span><br><span class="line">    <span class="comment">// 成功时</span></span><br><span class="line">    response =&gt; response.status === <span class="number">200</span> ? <span class="built_in">Promise</span>.resolve(response) : <span class="built_in">Promise</span>.reject(response),</span><br><span class="line">    <span class="comment">// 失败时</span></span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; response &#125; = error;</span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">            errorHandle(response.status, response.data);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请求被中断"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 封装get请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        instance.get(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//请求回调成功</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'封装这里，'</span>, params)</span><br><span class="line">            resolve(res.data);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            reject(err.data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装post请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        instance.post(url, params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//请求回调成功</span></span><br><span class="line">            resolve(res.data)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            reject(err.data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><h3 id="方法封装"><a href="#方法封装" class="headerlink" title="方法封装"></a>方法封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api/index.js 文件</span></span><br><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"><span class="comment">// 导入自定义ajax封装库axios: myaxios </span></span><br><span class="line"><span class="keyword">import</span> myaxios <span class="keyword">from</span> <span class="string">"@/api/utils/request"</span></span><br><span class="line"><span class="comment">// 导入自定义路径配置，模块化开发 简化url </span></span><br><span class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">"./base"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义前端的发送请求方法 </span></span><br><span class="line"><span class="keyword">const</span> api = &#123;</span><br><span class="line">  <span class="comment">// 注册请求</span></span><br><span class="line">  register(params) &#123;</span><br><span class="line">    <span class="comment">// 调用自定义asiox（myaxios）封装的post方法</span></span><br><span class="line">    <span class="keyword">return</span> myaxios.post(base.baseUrl + base.register, params)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义的请求方法全部导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api;</span><br></pre></td></tr></table></figure><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><p>本文采用：<code>node.js</code> + <code>express</code>+<code>MySQL</code>，创建<code>web</code> 服务器，构建后端。后端编写分为<strong>服务器模块</strong>、<strong>接口模块</strong>、<strong>连接数据库模块</strong>三部分，都是<code>server</code>文件夹下的 js 文件。</p><p>后端运行地址：<a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000/</a></p><h2 id="创建服务器模块"><a href="#创建服务器模块" class="headerlink" title="创建服务器模块"></a>创建服务器模块</h2><p>因此，需要完成获取数据请求必须解决跨域问题，跨域问题可以在前端或者后端解决。本文采取后端解决，使用 <code>CORS</code>。<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">同源安全策略</a> 默认阻止“跨域”获取资源。但是 <code>CORS</code> 给了 <code>web</code> 服务器这样的权限，即服务器可以选择，允许跨域请求访问到它们的资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口服务器 server/index.js文件</span></span><br><span class="line"><span class="comment">// 1.导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"><span class="comment">//跨域请求处理 后台处理</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">"cors"</span>)</span><br><span class="line"><span class="comment">//post传参问题</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>)</span><br><span class="line"><span class="comment">// 导入自定义路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册中间件</span></span><br><span class="line">app.use(cors());</span><br><span class="line"><span class="comment">// app.use(express.json());</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">//路由访问前缀</span></span><br><span class="line">app.use(<span class="string">'/api'</span>, router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.启动服务器</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'express server running at http://127.0.0.1'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中，<code>web</code>服务器服务器对象 <code>app</code>，通过导入接口方法模块，并使用<code>app.use(&#39;/api&#39;, router)</code>实现接口方法应用。</p><h2 id="接口方法模块"><a href="#接口方法模块" class="headerlink" title="接口方法模块"></a>接口方法模块</h2><p>注册的步骤：主要是实现服务器获取请求体的数据，然后将数据插入数据库，最后给客户端响应。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server/router.js文件</span></span><br><span class="line"><span class="comment">// 设置路由，定义对应post，URL的处理函数</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="comment">//导入数据库配置对象</span></span><br><span class="line"><span class="keyword">const</span> sqlClient = <span class="built_in">require</span>(<span class="string">'./dbconfig'</span>)</span><br><span class="line"><span class="comment">//导入JWT生成token</span></span><br><span class="line"><span class="keyword">const</span> JWT = <span class="built_in">require</span>(<span class="string">"jsonwebtoken"</span>)</span><br><span class="line"><span class="comment">//导入JWT解密</span></span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">"express-jwt"</span>)</span><br><span class="line"><span class="comment">// 请求post和url=localhost:3000/api/register 的注册路由</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; send &#125; = <span class="built_in">require</span>(<span class="string">"process"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/register"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">//接收请求对象携带的数据</span></span><br><span class="line">  <span class="keyword">const</span> &#123; username, pass, email &#125; = req.body;</span><br><span class="line">  <span class="comment">//sqlClient实现连接数据库，并将用户数据插入数据库 并回调函数响应数据</span></span><br><span class="line">  sqlClient(<span class="string">"insert into user values(null,?,?,?)"</span>, [username, pass, email], result =&gt; &#123;</span><br><span class="line">    <span class="comment">//插入成功 并响应对象数据给客户端</span></span><br><span class="line">    <span class="keyword">if</span> (result.affectedRows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        status: <span class="number">200</span>,</span><br><span class="line">        msg: <span class="string">"注册成功"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        statu: <span class="number">401</span>,</span><br><span class="line">        msg: <span class="string">"注册失败"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>只需要导入<code>mysql</code>库，即可以实现数据库连接，并向外导出操作数据库的方法对象，该函数返回一个操作结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server/dbconfig.js文件</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义连接对象</span></span><br><span class="line"><span class="keyword">const</span> client = mysql.createConnection(&#123;</span><br><span class="line">  host: <span class="string">"localhost"</span>,</span><br><span class="line">  user: <span class="string">"root"</span>,</span><br><span class="line">  password: <span class="string">"puhui"</span>,</span><br><span class="line">  database: <span class="string">"vue_mall"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义操作数据库的方法，参数为sql语句，数组数据，回调函数</span></span><br><span class="line"><span class="keyword">const</span> sqlClient = <span class="function">(<span class="params">sql, arr, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  client.query(sql, arr, (error, result) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="comment">//发生错误，返回错误信息</span></span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功，则调用回调函数返回操作的结果</span></span><br><span class="line">    callback(result)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = sqlClient</span><br></pre></td></tr></table></figure><p>使用 <code>mysql</code> 对象的<code>createConnection</code>方法创建连接数据库对象 <code>client</code>，然后 定义一个<code>sqlClient</code>对象，其中 <code>sqlClient</code> 需要参数<strong>sql语句</strong>，<strong>数组数据</strong>，便会调用回调函数，并返回<strong>sql语句</strong>和<strong>数据</strong>操作数据库的结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Server </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 声明变量</title>
      <link href="/2022/08/11/%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F/"/>
      <url>/2022/08/11/%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>有<code>3</code>个关键字可以声明变量，<code>var</code> 在所有<code>ECMAScript</code>版本可以使用，而<code>const</code> 、<code>let</code>只能在<code>ECMAScript6</code> 及更晚的版本使用。</p><h2 id="var-关键字"><a href="#var-关键字" class="headerlink" title="var 关键字"></a>var 关键字</h2><p>语法：</p><blockquote><p>单个变量：var message;</p><p>定义多个变量： var message=”x”,found=”y”;</p></blockquote><p>可以同时定义多个变量，用<strong>逗号</strong>割开即可。</p><p>但是值得注意的是，以下方式合法，但是不推荐这样做</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"h1"</span></span><br><span class="line">message = <span class="number">100</span></span><br></pre></td></tr></table></figure><ol><li>函数作用域</li></ol><p><strong>局部变量</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">"h1"</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message) <span class="comment">//出错</span></span><br></pre></td></tr></table></figure><p>使用<code>var</code> 在函数内部定义变量，会变成该函数的局部变量。</p><p><strong>全局变量</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">message = <span class="string">"h1"</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message) <span class="comment">//h1</span></span><br></pre></td></tr></table></figure><p>函数内部定义变量时，省略 <code>var</code> 关键字，可以创建全局变量。但严格模式下，不能为未声明变量赋值，会报错<code>ReFerenceError</code></p><ol start="2"><li>var 变量提升</li></ol><p>变量提升就是把所有变量声明都拉到函数作用域的顶部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(age);</span><br><span class="line">     <span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"> &#125;</span><br><span class="line">test() <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>以上代码，不会报错，但是不会输出赋值结果，因为等价于如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">     <span class="built_in">console</span>.log(age);</span><br><span class="line">     age = <span class="number">20</span>;</span><br><span class="line"> &#125;</span><br><span class="line">test() <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h2 id="let-关键字"><a href="#let-关键字" class="headerlink" title="let 关键字"></a>let 关键字</h2><ol><li>块级作用域</li></ol><p><code>let</code> 是块级作用域即“{}”（大括号）之间的作用域。这不同于 <code>var</code> ，<code>var</code>是函数作用域。</p><p><code>var：</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'ph'</span></span><br><span class="line">    <span class="built_in">console</span>.log(name) <span class="comment">//ph</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">//ph</span></span><br></pre></td></tr></table></figure><p><code>let :</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'ph'</span></span><br><span class="line">    <span class="built_in">console</span>.log(name) <span class="comment">//ph</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// 抛出 ReFrenceError ： age没定义</span></span><br></pre></td></tr></table></figure><ol start="2"><li>声明冗余</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age; <span class="comment">//SyntaxError 已经声明过了</span></span><br></pre></td></tr></table></figure><p>但是，有些情况可以重复声明。例如同一个块没有重复声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'zz'</span></span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// zz</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'ph'</span></span><br><span class="line">    <span class="built_in">console</span>.log(name) <span class="comment">// ph</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明冗余报错不会受混用<code>let</code>和<code>var</code>而影响。这两个关键字生命的并不是不同类型的变量，只是指出变量在相关作用域如何存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">//SyntaxError </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="keyword">let</span> age; <span class="comment">//SyntaxError</span></span><br></pre></td></tr></table></figure><ol start="3"><li>暂时性死区</li></ol><p><code>let</code>没有变量声明，在<code>let</code> 声明之前的执行瞬间被称为“暂时性死区”，会抛出 <code>ReFrenceError</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;   </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">// ReFerenceError: age 没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>全局声明</li></ol><p>和<code>var</code>不同，<code>let</code> 声明的变量不会成为<code>window</code>对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;   </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age);<span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol start="5"><li>条件声明</li></ol><p>不能检查出前面是否已经使用<code>let</code> 声明过同名变量，即使使用<code>try/catch</code>语句或者<code>typeof</code>操作符也不能解决，同时也就是可能是：在没声明的时候声明<code>let</code></p><ol start="6"><li>for 循环中的<code>let</code>声明</li></ol><p><code>let</code> 声明的变量只在当前<strong>{ }</strong>内，括号外不存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123; </span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(i)  <span class="comment">// 5 还存在 i 变量</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let i&#x3D;0;i&lt;5;i++)&#123; </span><br><span class="line">&#125;</span><br><span class="line"> console.log(i)  &#x2F;&#x2F; ReFrenceError : i 变量未定义</span><br></pre></td></tr></table></figure><p>类似，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">settimeout(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(i),<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出： 5，5，5，5，5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">settimeout(<span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.log(i),<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出： 0，1，2，3，4</p><h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p><code>const</code>行为基本和<code>let</code>相同，唯一一个区别是：它声明时必须同时初始化变量，且常识修改<code>const</code>声明的变量回导致运行的错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">20</span>;</span><br><span class="line">age = <span class="number">30</span> ;  <span class="comment">// TypeError: 给常量赋值</span></span><br></pre></td></tr></table></figure><p><code>const</code>不允许重复声明 </p><p><code>const</code>声明的变量也是块级作用域</p><p><code>const</code>声明的变量不能用来声明迭代变量，因为，自增意味着修改值，会报错<code>TypeError</code>：给常量赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">&#125; <span class="comment">// TypeError ：给常量赋值。</span></span><br></pre></td></tr></table></figure><p>对于<code>for-in</code>和 <code>for-of</code>循环，每次只是创建新变量，非常有意思</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key)</span><br><span class="line">&#125; <span class="comment">// a,b</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(const value of [1,2,3,4])&#123;</span><br><span class="line">console.log(value)</span><br><span class="line">&#125; &#x2F;&#x2F; 1,2,3,4</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><table><thead><tr><th align="center">关键字</th><th align="center">作用域</th><th align="center">同一作用域中，重复声明</th><th align="center">声明之前使用变量（是否有变量提升）</th><th align="center">是否能改变量值</th></tr></thead><tbody><tr><td align="center">var</td><td align="center">函数</td><td align="center">可以</td><td align="center">undefined（有）</td><td align="center">可以</td></tr><tr><td align="center">let</td><td align="center">块</td><td align="center">SyntaxError</td><td align="center">ReFerenceError（没有）</td><td align="center">可以</td></tr><tr><td align="center">const</td><td align="center">块</td><td align="center">SyntaxError</td><td align="center">ReFerenceError（没有）</td><td align="center">TypeError</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css animation</title>
      <link href="/2022/08/10/css%E5%8A%A8%E7%94%BB/"/>
      <url>/2022/08/10/css%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><p>属性值：</p><blockquote><p>animation-name：设置动画名称</p><p>animation-duration：设置动画完成所需时间，默认为<code>0</code></p><p>animation-timing-function：设置动画的速度曲线，默认为 <code>ease</code>；</p><p>animation-delay：设置动画<code>开始</code>之前的延迟时间，默认为 <code>0</code>；</p><p>animation-iteration-count：设置动画被播放的次数，默认为 <code>1</code>；</p><p>animation-direction：设置是否在下一周期逆向播放动画，默认为 <code>normal</code>；</p><p>animation-fill-mode：设置当动画不播放时（动画播放完或延迟播放时）的状态；</p><p>animation-play-state ：设置动画是正在运行还是暂停，默认是 running；</p><p>animation：所有动画属性的简写属性。</p></blockquote><p>是动画的简写形式，语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">animation-name</span> <span class="selector-tag">animation-duration</span> <span class="selector-tag">animation-timing-function</span> <span class="selector-tag">animation-delay</span> <span class="selector-tag">animation-iteration-count</span> <span class="selector-tag">animation-direction</span> <span class="selector-tag">animation-fill-mode</span> <span class="selector-tag">animation-play-state</span>;</span><br></pre></td></tr></table></figure><p>其中每个参数分别对应上面介绍的各个属性，如果<code>省略</code>其中的某个或多个值，则将使用该属性对应的<code>默认值</code>。</p><p>一般用法足够：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 动画名 、需要5s完成 、线性匀速、动画次数循环次 */</span></span><br><span class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">name</span> 5<span class="selector-tag">s</span> <span class="selector-tag">linear</span> <span class="selector-tag">infinite</span>;</span><br><span class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">animation-name</span> <span class="selector-tag">animation-duration</span> <span class="selector-tag">animation-timing-function</span> <span class="selector-tag">animation-iteration-count</span> ;</span><br><span class="line"><span class="comment">/* 动画定义*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> name</span><br><span class="line">&#123;</span><br><span class="line">from &#123; 状态 &#125; // 0%&#123; 状态 &#125;</span><br><span class="line">to &#123; 状态 &#125; // 100%&#123; 状态 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以同时使用多个动画，之间用<code>逗号</code>分割：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 小熊动画代码 */</span></span><br><span class="line"><span class="selector-class">.bear</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">border</span>:  solid <span class="built_in">rgb</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>) <span class="number">1px</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(media/bear.png) no-repeat;</span><br><span class="line">            <span class="comment">/* 我们元素可以添加多个动画， 用逗号分隔 */</span></span><br><span class="line">            <span class="attribute">animation</span>: bear <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">8</span>) infinite,move <span class="number">4s</span> forwards;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">@keyframes</span> bear &#123;</span><br><span class="line">            0% &#123;</span><br><span class="line">                <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            100% &#123;</span><br><span class="line">                <span class="attribute">background-position</span>: -<span class="number">1600px</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">            0% &#123;</span><br><span class="line">                <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            100% &#123;</span><br><span class="line">                <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">                <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h2><p><code>animation-name</code> 属性用来将动画绑定到指定的 <code>HTML</code> 元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            border-radius: <span class="number">50</span>%;</span><br><span class="line">            border: <span class="number">3</span>px solid black;</span><br><span class="line">            position: relative;</span><br><span class="line">            animation-name: ball;</span><br><span class="line">        &#125;</span><br><span class="line">@keyframes ball &#123;</span><br><span class="line">            <span class="number">0</span>% &#123; <span class="attr">top</span>: <span class="number">0</span>px; left: <span class="number">0</span>px;&#125;</span><br><span class="line">            <span class="number">25</span>% &#123; <span class="attr">top</span>: <span class="number">0</span>px; left: <span class="number">350</span>px;&#125;</span><br><span class="line">            <span class="number">50</span>% &#123; <span class="attr">top</span>: <span class="number">200</span>px; left: <span class="number">350</span>px;&#125;</span><br><span class="line">            <span class="number">75</span>% &#123; <span class="attr">top</span>: <span class="number">200</span>px; left: <span class="number">0</span>px;&#125;</span><br><span class="line">            <span class="number">100</span>% &#123; <span class="attr">top</span>: <span class="number">0</span>px; left: <span class="number">0</span>px;&#125; </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>通过<code>animation-name: ball</code>使用动画</p><h2 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h2><p><code>animation-duration</code> 属性用来设置动画完成一个周期所需要花费的时间，单位为秒或者毫秒。</p><h2 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h2><p><code>animation-timing-function</code> 属性用来设置动画播放的速度曲线，通过速度曲线的设置可以使动画播放的更为平滑。<code>animation-timing-function</code> 属性的可选值如下表所示：</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">linear</td><td align="center">线性匀速</td></tr><tr><td align="center">ease</td><td align="center">默认值，动画以低速开始，然后加快，在结束前变慢</td></tr><tr><td align="center">ease-in</td><td align="center">动画以低速开始</td></tr><tr><td align="center">ease-out</td><td align="center">动画以低速结束</td></tr><tr><td align="center">ease-in-out</td><td align="center">动画以低速开始，并以低速结束</td></tr><tr><td align="center">cubic-bezier(n, n, n, n)</td><td align="center">使用 cubic-bezier() 函数来定义动画的播放速度，参数的取值范围为 0 到 1 之间的数值</td></tr></tbody></table><h2 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h2><p><code>animation-fill-mode</code> 属性用来设置当动画不播放时（开始播放之前或播放结束之后）动画的状态（样式），属性的可选值如下：</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">不改变动画的默认行为</td></tr><tr><td align="center">forwards</td><td align="center">当动画播放完成后，保持动画最后一个关键帧中的样式</td></tr><tr><td align="center">backwards</td><td align="center">在 <code>animation-delay</code> 所指定的时间段内，应用动画第一个关键帧中的样式</td></tr><tr><td align="center">both</td><td align="center">同时遵循 <code>forwards</code> 和 <code>backwards</code> 的规则</td></tr></tbody></table><h2 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h2><p><code>animation-delay</code> 属性用来定义动画开始播放前的延迟时间，单位为秒或者毫秒，属性的语法格式如下：</p><p>其中参数 <code>time</code> 就是动画播放前的延迟时间，参数 <code>time</code> 既可以为正值也可以为负值。参数值为正时，表示延迟指定时间开始播放；参数为负时，表示跳过指定时间，并立即播放动画。</p><h2 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h2><p><code>animation-iteration-count</code> 属性用来定义动画播放的次数，属性的可选值如下：</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">n</td><td align="center">使用具体数值定义动画播放的次数，默认值为 1</td></tr><tr><td align="center">infinite</td><td align="center">表示动画无限次播放</td></tr></tbody></table><h2 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h2><p><code>animation-direction</code> 属性用来设置是否轮流反向播放动画，属性的可选值如下：</p><p>比如顺时针、逆时针；向左、向右。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>以正常的方式播放动画</td></tr><tr><td>reverse</td><td>以相反的方向播放动画</td></tr><tr><td>alternate</td><td>播放动画时，奇数次（1、3、5 等）正常播放，偶数次（2、4、6 等）反向播放</td></tr><tr><td>alternate-reverse</td><td>播放动画时，奇数次（1、3、5 等）反向播放，偶数次（2、4、6 等）正常播放</td></tr></tbody></table><h2 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h2><p><code>animation-play-state</code> 属性用来设置动画是播放还是暂停，属性的可选值如下：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>paused</td><td>暂停动画的播放</td></tr><tr><td>running</td><td>正常播放动画</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this 指向和相关函数介绍</title>
      <link href="/2022/08/05/this%20%E6%8C%87%E5%90%91%E5%92%8C%E8%83%BD%E6%94%B9%E5%8F%98%E6%8C%87%E5%90%91%E7%9A%84%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/08/05/this%20%E6%8C%87%E5%90%91%E5%92%8C%E8%83%BD%E6%94%B9%E5%8F%98%E6%8C%87%E5%90%91%E7%9A%84%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>摘要 ：与其他语言相比，函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别。<code>以下都是在非严格模式下</code></p><hr><h1 id="this-指向分为以下几种："><a href="#this-指向分为以下几种：" class="headerlink" title="this 指向分为以下几种："></a>this 指向分为以下几种：</h1><h2 id="A-全局环境"><a href="#A-全局环境" class="headerlink" title="A. 全局环境"></a><code>A.</code> 全局环境</h2><p>   <code>this</code> 都指向全局对象 <code>window</code>。</p><p>   <strong>变量</strong>    <img src="https://img-blog.csdnimg.cn/70308cc7977c4ac58f613061f0bef174.png" alt="在这里插入图片描述">   <strong>函数内部</strong>   <img src="https://img-blog.csdnimg.cn/dccd7229c38e4a99a45aa346bc1cfda1.png" alt=""></p><h2 id="B-构造函数"><a href="#B-构造函数" class="headerlink" title="B.  构造函数"></a><code>B.</code>  构造函数</h2><p>构造函数中的 <code>this</code>，指的是<code>实例对象</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Obj = <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.p = p;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Obj(<span class="string">'Hello World!'</span>);</span><br><span class="line">o.p  <span class="comment">//'Hello World!'</span></span><br></pre></td></tr></table></figure><h2 id="C-对象的方法"><a href="#C-对象的方法" class="headerlink" title="C. 对象的方法"></a><code>C.</code> 对象的方法</h2><p>  如果对象的方法里面包含<code>this</code>，<code>this</code>的指向就是方法运行时所在的对象。该方法赋值给另一个对象，就会改变<code>this</code>的指向。<br>  <strong>简单对象方法</strong><img src="https://img-blog.csdnimg.cn/d78ea66bcf72478295e064f22ec55088.png" alt="在这里插入图片描述"><br>   <strong>事件</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 指向 btn 这个对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>赋值</strong><br><img src="https://img-blog.csdnimg.cn/66d6976941d74e0b85683c99f8615f87.png" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  b: &#123;</span><br><span class="line">    m: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.p);</span><br><span class="line">    &#125;,</span><br><span class="line">    p: <span class="string">'Hello'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = a.b.m;</span><br><span class="line">hello() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>m</code> 是多层对象内部的一个方法。为求简便，将其赋值给<code>hello</code>变量，结果调用时，this指向了顶层对象。为了避免这个问题，可以只将m所在的对象赋值给<code>hello</code>，这样调用时，this 的指向就不会变。<br>改成这个就行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = a.b;</span><br><span class="line">hello.m() <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><p><strong>立即执行函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">(<span class="number">1</span>, obj.foo)() <span class="comment">// window</span></span><br></pre></td></tr></table></figure><h1 id="绑定-this-的方法"><a href="#绑定-this-的方法" class="headerlink" title="绑定 this 的方法"></a>绑定 this 的方法</h1><p>JavaScript 提供了<code>call</code>、<code>apply</code>、<code>bind</code>这三个方法，来切换/固定<code>this</code>的指向。</p><h2 id="Function-prototype-call"><a href="#Function-prototype-call" class="headerlink" title="Function.prototype.call()"></a>Function.prototype.call()</h2><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">call</span>(<span class="params">thisArg, arg1, arg2, ...</span>)</span></span><br></pre></td></tr></table></figure><p><code>call</code>方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">f() === <span class="built_in">window</span> <span class="comment">// true</span></span><br><span class="line">f.call(obj) === obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>call</code> 将 f 函数的 this 指向对象 <code>obj</code>，然后在对象 <code>obj</code> 的作用域中运行函数 <code>f</code>。<br><code>call</code> 方法的参数，应该是一个对象。如果参数为<code>空</code>、<code>null</code> 和<code>undefined</code>，则<strong>默认</strong>传入<strong>全局对象</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ar n = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">n</span>: <span class="number">456</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.call() <span class="comment">// 123</span></span><br><span class="line">a.call(<span class="literal">null</span>) <span class="comment">// 123</span></span><br><span class="line">a.call(<span class="literal">undefined</span>) <span class="comment">// 123</span></span><br><span class="line">a.call(<span class="built_in">window</span>) <span class="comment">// 123</span></span><br><span class="line">a.call(obj) <span class="comment">// 456</span></span><br></pre></td></tr></table></figure><p>call方法还可以接受多个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func.apply(thisArg)</span><br><span class="line">func.apply(thisArg, argsArray)</span><br><span class="line"><span class="comment">// call的第一个参数就是 this 所要指向的那个对象，后面的参数则是函数 func 调用时所需的参数。</span></span><br></pre></td></tr></table></figure><h2 id="Function-prototype-apply"><a href="#Function-prototype-apply" class="headerlink" title="Function.prototype.apply()"></a>Function.prototype.apply()</h2><p>语法：<br><code>apply</code> 方法的作用与 call 方法类似，也是改变 <code>this</code> 指向，然后再调用该函数。唯一的区别就是：它接收一个数组作为函数执行时的参数，使用格式如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.apply(thisValue, [arg1, arg2, ...])</span><br></pre></td></tr></table></figure><p><code>apply</code> 方法的第一个参数也是this所要指向的那个对象，如果设为 <code>null</code> 或<code>undefined</code>，则等同于指定<code>window</code>。第二个参数则是一个数组，该数组的所有成员依次作为参数，传入原函数。原函数的参数，在 call 方法中必须一个个添加，但是在 <code>apply</code> 方法中，必须以数组形式添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f.call(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 2</span></span><br><span class="line">f.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">1</span>]) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>（1）找出数组最大元素<br>JavaScript 不提供找出<strong>数组最大元素</strong>的函数。结合使用 <code>apply</code> 方法 Math.max方法，就可以返回数组的最大元素。<br>（2）将数组的空元素变为 undefined<br>通过 <code>apply</code> 方法，利用<code>Array</code>构造函数将数组的空元素变成<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, [<span class="string">'a'</span>, ,<span class="string">'b'</span>])</span><br><span class="line"><span class="comment">// [ 'a', undefined, 'b' ]</span></span><br></pre></td></tr></table></figure><p>空元素与<code>undefined</code>的差别在于，数组的<code>forEach</code>方法会跳过空元素，继续遍历下一个元素，但是不会跳过<code>undefined</code>。因此，遍历内部元素的时候，会得到不同的结果。<br>（3）转换类似数组的对象<br>利用数组对象的<code>slice</code>方法，可以将一个类似数组的对象（比如arguments对象）转为真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="attr">length</span>: <span class="number">1</span>&#125;) <span class="comment">// [1]</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(&#123;<span class="number">0</span>: <span class="number">1</span>&#125;) <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;) <span class="comment">// [1, undefined]</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(&#123;<span class="attr">length</span>: <span class="number">1</span>&#125;) <span class="comment">// [undefined]</span></span><br></pre></td></tr></table></figure><h2 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind()"></a>Function.prototype.bind()</h2><p>语法：<br><code>bind</code>方法用于将函数体内的 <code>this</code> 绑定到某个对象，返回一个原函数的拷贝，并拥有指定的 this 值和初始参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">bind</span>(<span class="params">thisArg[, arg1[, arg2[, ...]]]</span>)</span></span><br></pre></td></tr></table></figure><p>将实例<code>d</code>的方法赋值给另一个变量<code>print</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.getTime() <span class="comment">// 1481869925657</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> print = d.getTime;</span><br><span class="line">print() <span class="comment">// Uncaught TypeError: this is not a Date object.</span></span><br></pre></td></tr></table></figure><p>因为<code>getTime</code>方法内部的<code>this</code>，绑定<code>Date</code>对象的实例，赋给变量<code>print</code>以后，内部的<code>this</code>已经不指向<code>Date</code>对象的实例了。<br><code>bind</code>方法可以解决这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = d.getTime.bind(d);</span><br><span class="line">print() <span class="comment">// 148186992565</span></span><br></pre></td></tr></table></figure><p>this 绑定其他对象，并调用原方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  count: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func = counter.inc.bind(obj);</span><br><span class="line">func();</span><br><span class="line">obj.count <span class="comment">// 101</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>bind</code>方法将<code>inc</code>方法内部的<code>this</code>，绑定到<code>obj</code>对象。并且赋值、调用<code>func</code>函数以后，递增的就是<code>obj</code>内部的<code>count</code>属性。<br><code>bind</code>还可以接受更多的参数，将这些参数绑定原函数的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="keyword">this</span>.m + y * <span class="keyword">this</span>.n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  m: <span class="number">2</span>,</span><br><span class="line">  n: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newAdd = add.bind(obj, <span class="number">5</span>);</span><br><span class="line">newAdd(<span class="number">5</span>) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>bind</code>方法除了绑定<code>this</code>对象，还将<code>add</code>函数的第一个参数<code>x</code>绑定成<code>5</code>，然后返回一个新函数<code>newAdd</code>，这个函数只要再接受一个参数<code>y</code>就能运行了。<br>如果<code>bind</code>方法的第一个参数是<code>null</code>或<code>undefined</code>，等于将<code>this</code>绑定到全局对象，函数运行时<code>this</code>指向顶层对象（浏览器为<code>window</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plus5 = add.bind(<span class="literal">null</span>, <span class="number">5</span>);</span><br><span class="line">plus5(<span class="number">10</span>) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><p>（1）每一次返回一个新函数<br><code>bind</code>方法每运行一次，就返回一个新函数，这会产生一些问题。比如，监听事件的时候，不能写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">'click'</span>, o.m.bind(o));</span><br></pre></td></tr></table></figure><p>上面代码中，<code>click</code>事件绑定<code>bind</code>方法生成的一个匿名函数。通过同样的操作重新<code>bind</code>不再是以前的函数，这样会导致无法取消绑定，所以，下面的代码是无效的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.removeEventListener(<span class="string">'click'</span>, o.m.bind(o)); <span class="comment">// 移除监听点击事件失败</span></span><br></pre></td></tr></table></figure><p>正确写法是下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listener = o.m.bind(o);</span><br><span class="line">element.addEventListener(<span class="string">'click'</span>, listener);</span><br><span class="line"><span class="comment">//  ...</span></span><br><span class="line">element.removeEventListener(<span class="string">'click'</span>, listener);</span><br></pre></td></tr></table></figure><p>（2）结合回调函数使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  times: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  print: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.times.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.print()  <span class="comment">// 无输出 全局对象没name属性</span></span><br></pre></td></tr></table></figure><p><code>obj.print</code>内部<code>this.times</code>的this是指向obj的，这个没有问题。但是，<code>forEach</code>方法的回调函数内部的<code>this.name</code>却是指向全局对象，导致没有办法取到值。<br>如下改动可以解释以上现象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.times.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.print()</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过<code>bind</code>方法绑定<code>this</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.times.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.print()</span><br><span class="line"><span class="comment">// 张三</span></span><br><span class="line"><span class="comment">// 张三</span></span><br><span class="line"><span class="comment">// 张三</span></span><br></pre></td></tr></table></figure><p>（3）结合 call 方法使用<br>** <code>call</code>、 <code>apply</code>、 <code>bind</code> 不一样的是：若调用<code>call</code> 、<code>apply</code>的原方法没有返回值，则返回 undefined，<code>bind</code> 默认返回新的函数。<br>利用<code>bind</code>方法，可以改写一些 JavaScript 原生方法的使用形式，以数组的<code>slice</code>方法为例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].slice(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>将其改写为<code>call、bind</code>结合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice = <span class="built_in">Function</span>.prototype.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line">slice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> slice = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line">slice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"> <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>上面代码的含义就是，将<code>Array.prototype.slice</code>变成<code>Function.prototype.call</code>方法所在的对象，调用时就变成了<code>Array.prototype.slice.call</code>。类似的写法还可以用于其他数组方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> push = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.push);</span><br><span class="line"><span class="keyword">var</span> pop = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.pop);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>];</span><br><span class="line">push(a, <span class="number">4</span>)</span><br><span class="line">a <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">pop(a)</span><br><span class="line">a <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>如果再进一步，将<code>Function.prototype.call</code>方法绑定到<code>Function.prototype.bind</code>对象，就意味着<code>bind</code>的调用形式也可以被改写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">v</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</span><br><span class="line">bind(f, o)() <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>上面代码的含义就是，将<code>Function.prototype.bind</code>方法绑定在<code>Function.prototype.call</code>上面，所以bind方法就可以直接使用，不需要在函数实例上使用。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise 是如何将异步请求改为同步的 ？</title>
      <link href="/2022/08/01/Promise,%20Async,%20Await/"/>
      <url>/2022/08/01/Promise,%20Async,%20Await/</url>
      
        <content type="html"><![CDATA[<p><code>摘要</code>：同步任务需要等待上一步完成，才能执行下一步，而异步不需要被等待，这样可能会使得在同步任务执行时，异步请求未完成，导致同步未能拿到请求结果而出现错误信息的问题，<code>Promise</code>可以解决此问题，只需要将<code>异步</code>改写为<code>同步</code>，实现等待。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">one</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"1"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">two</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="string">"2"</span></span></span><br><span class="line">                &#125;,0)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">three</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"3"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(one())</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(two())</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(three())</span></span><br><span class="line">            &#125;</span><br><span class="line">            run()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打印结果：</p><blockquote><p>1<br>undefined<br>3</p></blockquote><p>出现以上结果的意思是，<code>two</code>方法有请求，但是当执行到<code>console.log(two())</code>的时候，<code>two</code>方法是内部请求是异步的，还没有结果。同步没有等待异步，就输出了<code>undefined</code>。</p><p>按照实际开发中的思路：等待请求完成后才往后执行，换句话是，将异步换成同步执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">"2"</span>) <span class="comment">//请求成功 返回结果</span></span><br><span class="line">      &#125;,<span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成以上代码后，打印结果如下：</p><blockquote><p>1<br>Promise {<pending>}[[Prototype]]: Promise[[PromiseState]]: “pending”[[PromiseResult]]: undefined<br>3</p></blockquote><p>虽然我们将返回结果改为<code>Promise</code>对象，但是同步也没有等待异步请求，状态为：<a href="https://blog.puhuier.xyz/2022/08/01/promise理解/" target="_blank" rel="noopener">pending</a>，请求结果：<code>PromiseResult</code></p><p>下面使用关键字：<code>Async</code>、<code>Await</code>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">one</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"1"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">two</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    resolve(<span class="string">"2"</span>)</span></span><br><span class="line">                  &#125;,0)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">three</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"3"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(one())</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">await</span> two())</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(three())</span></span><br><span class="line">            &#125;</span><br><span class="line">            run()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码的结果：</p><blockquote><p>1<br>2<br>3</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> promise </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于 promise 的状态</title>
      <link href="/2022/08/01/promise%E7%90%86%E8%A7%A3/"/>
      <url>/2022/08/01/promise%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1>]]></content>
      
      
      <categories>
          
          <category> Axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟 DOM 和 diff 算法</title>
      <link href="/2022/07/27/virtualDOM/"/>
      <url>/2022/07/27/virtualDOM/</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要： 介绍 snabbdom、虚拟 DOM、diff 算法</p></blockquote><p>本文重点是什么 ？</p><blockquote><p>（1）虚拟 <code>DOM</code> 是什么，作用 ？</p><p>（2）虚拟<code>DOM</code>如何产生 ？—— 以<code>h</code> 函数为例（其实，<code>vue.js</code>中有<code>vnode</code>类，可以创建不同类型的<code>vnode</code>实例）</p><p>（3）虚拟<code>DOM</code>最核心，将<code>vnode</code>渲染成真实的<code>DOM</code>— <code>patch</code> 函数</p></blockquote><h1 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><ul><li>介绍：<code>vnode</code>是一个类，可以生成不同类型的<code>vnode</code>实例，而不同类型的<code>vnode</code>表示不同类型的真实<code>DOM</code>元素。  </li><li>类型：真实 <code>DOM</code>有元素节点、文本节点和注释节点等。<code>vnode</code>实例也对应有着元素节点、文本节点和注释节点。</li></ul><blockquote><p>（1）注释节点</p><p>（2）文本节点</p><p>（3）元素节点</p><p>（4）组件节点</p><p>（5）函数式组件</p><p>（6）克隆节点</p></blockquote><ul><li>以<code>元素节点</code>为例，存在4个有效属性：</li></ul><blockquote><p>（1）tag：节点名，例如 <code>p</code>、<code>ul</code>等</p><p>（2）data：包含节点上的数据，比如<code>attrs</code>、<code>class</code>和<code>style</code>等</p><p>（3）children：当前节点的子节点列表</p><p>（4）context：当前组件的的<code>vue.js</code>实例</p></blockquote><p>真实的元素节点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的<code>vnode</code>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    children:[vnode,vnode],</span><br><span class="line">    context:&#123;...&#125;,</span><br><span class="line">    data:&#123;...&#125;,</span><br><span class="line">    tag:<span class="string">"p"</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>Vue.js</code>对组件采用了虚拟<code>DOM</code>来更新视图，当属性发生变化时，整个组件都要进行重新渲染操作，但是组件内并不是所有<code>DOM</code>节点都需要更新，因此，只对需要更新的部分进行<code>DOM</code>操作可以提升很多性能。</p><h2 id="虚拟-DOM-做了什么？"><a href="#虚拟-DOM-做了什么？" class="headerlink" title="虚拟 DOM 做了什么？"></a>虚拟 DOM 做了什么？</h2><p>其实没有那么复杂，它主要做了两件事。</p><ol><li>提供与真实<code>DOM</code>节点对应的虚拟节点 <code>vnode</code>;</li><li>将虚拟节点<code>vnode</code>和旧的虚拟节点<code>oldVnode</code>进行对比，更新视图。</li></ol><p>两个虚拟节点之间的对比是虚拟<code>dom</code> 中最核心的算法（<code>patch</code>），它可以判断出哪些节点发生了变化，从而只对变化的节点进行更新操作。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>每次渲染视图时，都是先创建 <code>vnode</code>，然后使用它创建真实的<code>DOM</code>插入到页面中，所以将上一次渲染视图时创建的 <code>vnode</code>存储起来，之后每次重新渲染时，将新旧 <code>vnode</code> 进行对比，</p><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>区别于<code>真实DOM</code></p><ul><li>无需手动操作 <code>DOM</code>，提高开发效率；</li><li>复杂场景下，防止频繁触发重绘，可以提高性能；</li><li>虚拟 <code>DOM</code> 实际是 <code>JavaScript</code> 对象，可以进行跨平台操作。</li></ul><p><code>问题</code>：数据发生改变，试图怎么更新 ?<br>当数据改变时，会触发<code>setter</code>，并且通过<code>Dep.notify</code>去通知所有订阅者<code>Watcher</code>(组件)，订阅者们就会调用<code>patch</code>方法，给真实<code>DOM</code>打补丁，更新相应的视图。</p><h1 id="h-函数"><a href="#h-函数" class="headerlink" title="h 函数"></a>h 函数</h1><p>使用<code>snabbdom</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">'snabbdom/h'</span> <span class="comment">// helper function for creating vnodes</span></span><br><span class="line"><span class="comment">// 使用 h 函数创建虚拟节点</span></span><br><span class="line"><span class="keyword">const</span> vnode = h(<span class="string">'ul'</span>, &#123;&#125;, [</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'A'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'B'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'C'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'D'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>其中，<code>vnode</code>便是<code>h</code>函数创建的虚拟<code>DOM</code></p><h1 id="patch-函数"><a href="#patch-函数" class="headerlink" title="patch 函数"></a>patch 函数</h1><p>对比两个<code>vode</code>之间的差异只是<code>patch</code>的一部分，只是手段，不是目的。<code>patch</code>的目的是修改<code>DOM</code>节点，可以理解为渲染视图。</p><p>操作：创建节点、删除节点、修改节点。</p><h2 id="创建节点、删除节点："><a href="#创建节点、删除节点：" class="headerlink" title="创建节点、删除节点："></a>创建节点、删除节点：</h2><p>两个虚拟节点完全不同，以新节点为标准渲染视图，是需要执行：将旧节点删除或者创建新增节点。</p><h2 id="修改节点："><a href="#修改节点：" class="headerlink" title="修改节点："></a>修改节点：</h2><p>新旧两个节点相同，需要进行细致化对比，然后对<code>oldVode</code>在新视图中对应的真实节点进行更新。</p><h2 id="diff-函数"><a href="#diff-函数" class="headerlink" title="diff 函数"></a>diff 函数</h2><h3 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h3><p>计算最小更新 DOM 的方式。</p><ul><li>将 DOM 抽象为虚拟 DOM ；</li><li>然后通过新旧虚拟 DOM 这两个对象的差异( Diff 算法)；</li><li>最终只把变化的部分重新渲染,提高渲染效率的过程。</li></ul><p>流程图：<br>其中包含 <code>patch</code> 函数、<code>pachVnode</code> 函数、<code>UpdateVnode</code> 函数（未详细介绍）</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>使用 snabbdom 虚拟 DOM 库 ：<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** src/index.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">'snabbdom/init'</span></span><br><span class="line"><span class="keyword">import</span> &#123; classModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/class'</span></span><br><span class="line"><span class="keyword">import</span> &#123; propsModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/props'</span></span><br><span class="line"><span class="keyword">import</span> &#123; styleModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/style'</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventListenersModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/eventlisteners'</span></span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">'snabbdom/h'</span> <span class="comment">// helper function for creating vnodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建出 patch 函数</span></span><br><span class="line"><span class="keyword">const</span> patch = init([</span><br><span class="line">  classModule,</span><br><span class="line">  propsModule,</span><br><span class="line">  styleModule,</span><br><span class="line">  eventListenersModule</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 2、使用 h 函数创建虚拟节点</span></span><br><span class="line"><span class="keyword">const</span> vnode1 = h(<span class="string">'ul'</span>, &#123;&#125;, [</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'A'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'B'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'C'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'D'</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 3.创建空的容器</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"><span class="comment">// 4.将 DOM 塞入container</span></span><br><span class="line">patch(container, vnode1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vnode2 = h(<span class="string">'ul'</span>, &#123;&#125;, [</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'A'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'B'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'C'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'D'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'E'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮时，将vnode1变为vnode2</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用最小改变 来达到 新的vnode 覆盖 旧的 vnode2</span></span><br><span class="line">  patch(vnode1, vnode2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="patch-函数-1"><a href="#patch-函数-1" class="headerlink" title="patch 函数"></a>patch 函数</h3><p>接收参数存在： element（真实 DOM ） 和 vnode（虚拟 DOM ） 两种类型<br><code>首次插入</code>：判断 key 和 sel 是相同（2种情况）</p><table><thead><tr><th></th><th>1、vnode.key 和 vnode.sel 都相同</th><th>2、vnode.key 或 vnode.sel 不同</th></tr></thead><tbody><tr><td>是否同一个Vnode</td><td>是</td><td>否</td></tr><tr><td>结果</td><td>更新(调用 <code>pachVnode</code> )</td><td>创建新的DOM，删除老的DOM</td></tr></tbody></table><h3 id="pachVnode-函数"><a href="#pachVnode-函数" class="headerlink" title="pachVnode 函数"></a>pachVnode 函数</h3><p><strong>虚拟节点 text 和 children 最多只能有一个</strong></p><ol><li>保存（旧的相关联）的 DOM 元素 eml 给新的 Vnode（eml 记录新的 Vnode 插入位置）</li><li>比较新、旧 vnode 的 children 情况（3种情况）</li></ol><table><thead><tr><th align="left"></th><th align="left">1、新 vnode === 旧 vnode（全等）</th><th align="left">2、新 Vnode 无 text</th><th align="left">3、新 Vnode 有 text</th></tr></thead><tbody><tr><td align="left">结果</td><td align="left">不需更新，return</td><td align="left">1.新、老 Vnode 都有 children，即调用（<code>updateChildren</code>）；<br>2.老 Vnode 无 children，即添加 children ；<br>3.新的无 children ，即删除 children</td><td align="left">删除 children ，更新新的 text</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>易错题集</title>
      <link href="/2022/07/16/%E7%AC%94%E8%AF%95%E9%94%99%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/07/16/%E7%AC%94%E8%AF%95%E9%94%99%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h1><h2 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h2><h3 id="js概念与类型检测"><a href="#js概念与类型检测" class="headerlink" title="js概念与类型检测"></a>js概念与类型检测</h3><ol><li><p>以下不属于 typeof 运算符返回值的是？</p><p>A. “string”<br>B. “function”<br>C. “object”<br>D. “null”</p><blockquote><p>typeof 引用类型只能识别 function</p></blockquote></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git远程仓库已有提交文件，如何提交本地仓库覆盖远程仓库</title>
      <link href="/2022/07/12/git%20%E4%BB%93%E5%BA%93%E5%86%B2%E7%AA%81/"/>
      <url>/2022/07/12/git%20%E4%BB%93%E5%BA%93%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<h1 id="首次提交到远程仓库的正常流程："><a href="#首次提交到远程仓库的正常流程：" class="headerlink" title="首次提交到远程仓库的正常流程："></a>首次提交到远程仓库的正常流程：</h1><ol><li><p><code>新建（初始化本地仓库）</code></p><blockquote><p>命令：git init</p><p>结果：根目录出现 .git 文件（即本 地仓库）</p></blockquote></li></ol><ol start="2"><li><p><code>跟踪文件</code></p><blockquote><p>命令：git add . </p><p>是跟踪根目录下所有文件</p></blockquote></li><li><p><code>提交到本地仓库</code></p><blockquote><p>命令：git commit -m  “这里可以写备注以便代码管理”</p></blockquote></li><li><p><code>连接远程仓库</code></p><blockquote><p>命令：git remote add origin httpXXXXX.git </p><p> origin 的意思是指“远程仓库”，就是远程仓库链接的别名，是在 clone 一个托管在 Github 上代码库时，git 默认创建的指向这个远程代码库的标签，origin 指向的就是本地的代码库托管在 Github 上的版本。</p></blockquote></li><li><p><code>提交到本地仓库</code></p><blockquote><p>命令：git push -u origin master</p><p>提交到远程仓库的 master 分支</p></blockquote></li></ol><h1 id="报错出现仓库提交失败信息如下："><a href="#报错出现仓库提交失败信息如下：" class="headerlink" title="报错出现仓库提交失败信息如下："></a>报错出现<font color="green">仓库提交失败信息如下：</font></h1><blockquote><p>To <a href="https://gitee.com/XXXXXX.git" target="_blank" rel="noopener">https://gitee.com/XXXXXX.git</a><br> ! [rejected]        master -&gt; master (fetch first)<br>error: failed to push some refs to ‘<a href="https://gitee.com/XXXXXX.git&#39;" target="_blank" rel="noopener">https://gitee.com/XXXXXX.git&#39;</a><br>hint: Updates were rejected because the remote contains work that you do<br>hint: not have locally. This is usually caused by another repository pushing<br>hint: to the same ref. You may want to first integrate the remote changes<br>hint: (e.g., ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决:"></a><font color="green">解决:</font></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f 远程仓库名  远程仓库分支</span><br></pre></td></tr></table></figure><blockquote><p>使用本地仓库文件覆盖远程仓库,即强制推送。</p></blockquote><p>以上代码中的<code>远程仓库名</code>和<code>分支</code>，获取方式如下：</p><ul><li><p>远程仓库名，查看：git remote show</p></li><li><p>远程仓库分支，查看：git branch（带有星号的分支，代表当前分支）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/2022/05/09/HTTP/"/>
      <url>/2022/05/09/HTTP/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="HTTP-报文结构是怎么样-？"><a href="#HTTP-报文结构是怎么样-？" class="headerlink" title="HTTP 报文结构是怎么样 ？"></a>HTTP 报文结构是怎么样 ？</h2><p>对于 <code>TCP</code> 而言，在传输的时候分为两部分：<code>TCP 头</code>+<code>数据部分</code></p><p>而 <code>HTTP</code>而言，也是 <code>header + body</code> 结构，具体：</p><blockquote><p>起始行 + 头部 +  空行 + 实体</p></blockquote><p>由于 <code>HTTP</code> 的<code>请求报文</code>、<code>响应报文</code>存在区别，因此按照结构逻辑进行介绍:</p><h3 id="起始行"><a href="#起始行" class="headerlink" title="起始行"></a>起始行</h3><ol><li>对于<code>请求报文</code>，起始行类似于：</li></ol><blockquote><p>① GET  /home  HTTP/1.1   </p></blockquote><p>也就是 <strong>方法</strong>+<strong>路径</strong>+<strong>HTTP版本</strong>。</p><ol start="2"><li>对于<code>响应报文</code>，起始行一般是：</li></ol><blockquote><p>② HTTP/1.1  200  OK</p></blockquote><p>响应的报文的起始行也叫做<code>状态行</code>：由<code>HTTP版本</code>、<code>状态码</code>、<code>原因</code>三部分组成。</p><p>观察 <code>①</code>、<code>②</code> ，每两个部分之间用<strong>空格</strong>隔开，最后一部分后面应该接一个<strong>换行</strong>，严格遵守<code>ABNF</code>语法规范。</p><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>如图所示，头部处于报文中部：</p><p>下面的图中的<strong>请求体</strong>，实际是<strong>请求头部</strong>，和响应头格式一样，请求体是<strong>实体</strong>部分：</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp5.itc.cn%2Fimages03%2F20200523%2F125b84668a3d41318d222163a7cf6092.jpeg&refer=http%3A%2F%2Fp5.itc.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1662725810&t=dabcf7548f4d944bb8c67531c5ba5ff5" alt="请求报文"></p><p><strong>响应报文</strong>，SP 是空格，CRLF 是空格。</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.136.la%2F20210424%2F2bd8ce0d741840f68105548d3cff7e67.jpg&refer=http%3A%2F%2Fimg.136.la&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1662725750&t=3b88ac87152cceff2da3df3b6199e18c" alt="响应报文"></p><p>由此，请求、响应报文字段都是相当多的，而且牵扯到<code>HTTP</code>很多特性，重点看看这些头部字段的格式：</p><ol><li>字段名<strong>不区分</strong>大小写</li><li>字段名不允许出现<strong>空格</strong>、<strong>下划线</strong>“_”</li><li>字段名后面必须紧跟”<strong>:</strong>“</li></ol><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>很重要，用来区分：<strong>头部</strong>和<strong>实体</strong></p><blockquote><p>问题：如果在头部的中间故意加上一个空行会怎么样？</p><p>答案：那么空行后的内容全部视为实体</p></blockquote><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>就是具体的数据了，也就是<code>body</code>部分，请求报文对应的<strong>请求体</strong>，响应报文对应的<strong>响应体</strong></p><h2 id="HTTP-有哪些请求方法？"><a href="#HTTP-有哪些请求方法？" class="headerlink" title="HTTP 有哪些请求方法？"></a>HTTP 有哪些请求方法？</h2><p><code>HTTP/1.1</code>规定了以下请求方法（注意：都是大写）</p><blockquote><p>GET：用来获取资源</p><p>HEAD： 获资源的元信息</p><p>POST：提交数据，即上传数据</p><p>PUT：修改数据</p><p>DELETE：删除资源（几乎用不上）</p><p>CONNECT：建立连接隧道，用于代理服务器</p><p>OPTIONS：列出可对资源实行的请求方法，用来跨域请求</p><p>TRACE：追踪 请求-响应 的传输路径</p></blockquote><h2 id="GET、POST-有什么区别-？"><a href="#GET、POST-有什么区别-？" class="headerlink" title="GET、POST 有什么区别 ？"></a>GET、POST 有什么区别 ？</h2><p>首先是语义上的区别：</p><blockquote><p>分别是获取资源和提交数据。</p></blockquote><p>其次是具体差别：</p><blockquote><p><strong>缓存</strong>：<code>GET</code> 请求会被浏览器注定缓存下来，留下历史记录，而 <code>POST</code> 默认不会</p><p><strong>编码</strong>：<code>GET</code>只进行<code>URL</code>编码，只接收<code>ASCII</code>字符，而<code>POST</code>没有限制</p><p><strong>参数</strong>：<code>GET</code>一般放在<code>URL</code>中，因此不安全，<code>POST</code>放在请求体中，更适合放敏感信息</p><p><strong>幂等性</strong>：幂等表示相同的操作，结果也是相同的，<code>GET</code>是幂等，而<code>POST</code>不是</p><p><code>TCP</code>：<code>GET</code>请求会把请求一次性发出去，<code>POST</code>会分为两次<code>TCP</code>数据包，首先发<code>header</code>部分，如果服务器响应<code>100</code>（continue），然后再发<code>body</code>部分。（火狐浏览器的<code>POST</code>请求只发一个<code>TCP</code>包）</p></blockquote><h2 id="URI-是什么-？"><a href="#URI-是什么-？" class="headerlink" title="URI 是什么 ？"></a>URI 是什么 ？</h2><p><img src="https://img.php.cn/upload/article/000/000/024/5c09e320694b4361.jpg" alt=""></p><p><code>URL</code>（Uniform Resouce Locator，统一资源定位符）</p><p><code>URN</code>（Uniform Resouce Name，统一资源名）</p><p><code>URI</code>（Uniform Resouce Identifier，统一资源标识符），作用：区分互联网上不同的资源，但是，他并不是我们常说的<strong>网址</strong>，网址指的是<code>URL</code>，<code>URI</code>由<code>URL</code>和<code>URN</code>组成，由于<code>URL</code>过于普及，就默认<code>URI</code>是为<code>URL</code>了。</p><ol><li>URI 的结构</li></ol><p><code>URI</code>真正完整的结构是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme：[&#x2F;&#x2F; [user：password @] host [：port]] [&#x2F;] path [?query] [#fragment]</span><br></pre></td></tr></table></figure><blockquote><p>scheme ：表示协议，比如<code>http</code>、<code>https</code>、<code>file</code>等等。后面跟 <code>://</code></p><p>user:password@：表示登陆主机时用户信息，不过很不安全，不常用</p><p>host：主机名</p><p>port：端口号</p><p>path：请求路径，标记资源所在位置</p><p>query：查询参数，以<code>key=val</code>这种形式，多个键值对之间用<code>&amp;</code>相隔</p><p>fragment：表示<code>URI</code>所定位的资源内的一个锚点，浏览器可以根据这个描点跳转到指定位置</p></blockquote><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=HTTP&amp;rsv_spt=1</span><br></pre></td></tr></table></figure><p>这个<code>URI</code>中，<code>https</code>协议，<code>www.baidu.com</code>表示域名、端口号（注意：<code>http</code> 和 <code>https</code> 的默认端口分别为<code>80</code>、<code>443</code>），<code>/s</code>表示<code>path</code>，<code>wd=HTTP&amp;rsv_spt=1</code>表示查询参数部分。</p><ol start="2"><li>URI 编码</li></ol><p><code>URI</code>只能使用<code>ASCII</code>，<code>ASCII</code>之外的字符是不支持显示的，而且还有一部分符号是界定符，如果不加以处理会导致解析错误。</p><p>因此，<code>URI</code>进入了编码机制，将所有<strong>非<code>ASCII</code>码字符</strong>和<strong>界定符</strong>转为<code>16</code>进制字节值，然后在前面加上<code>%</code>。</p><p>如：<strong>空格</strong>被转义为<code>%20</code>，<strong>三元</strong>转移成为<code>%E4%B8%89%E5%85%83</code>。</p><h2 id="如何理解-HTTP-状态码-？"><a href="#如何理解-HTTP-状态码-？" class="headerlink" title="如何理解 HTTP 状态码 ？"></a>如何理解 HTTP 状态码 ？</h2><p><code>RFC</code> 规定 <code>HTTP</code> 的状态码为<strong>三位数</strong>，被分为以下五类：</p><blockquote><p>1XX：表示目前是协议处理的中间状态，还需后续操作；</p><p>2XX：表示成功状态；</p><p>3XX：表示重定向状态，资源位置发生变动，需要<strong>重新</strong>请求；</p><p>4XX：表示请求报文错误；</p><p>5XX：表示服务器端发生错误</p></blockquote><p>具体的状态码如下：</p><ol><li>协议处理的中间状态，还需后续操作</li></ol><p><code>101</code>： <strong>Switching Protocols</strong> 。在<strong>HTTP</strong>升级为<strong>webSocket</strong>的时候，如果服务器同意变更，就会发送状态码101。</p><ol start="2"><li>成功状态</li></ol><p><code>200</code> ：<strong>OK</strong>是见得最多的成功状态码，通常在响应体中放有数据；</p><p><code>202</code>：<strong>No Content</strong>含义与<code>200</code>相同，但是响应头后没有<code>body</code>数据；</p><p><code>206</code>：<strong>partial Content</strong>，表示部分内容，它的使用场景为<code>HTTP</code>分块下载和断点续传，当然也会带上相应的响应头字段<code>Content-Range</code></p><ol start="3"><li>重定向状态</li></ol><p><code>301</code>：<strong>Permanently Moved</strong>，即永久重定向</p><p><code>302</code>： <strong>Temporarily Moved</strong>，即临时重定向。</p><p>比如你的网站从<code>HTTP</code>升级到<code>HTTPS</code>了，以前的站点再也不用了，应当返回<code>301</code>，这时候浏览器默认会做缓存优化，在第二次访问的时候自动访问重定向的那个地址。</p><p>而如果只是暂时不可用，那么直接返回<code>302</code>即可，和<code>301</code>不同的是，浏览器并不会做缓存优化。</p><p><code>304</code>：<strong>Not Modified</strong>：当协商缓存命中时会返回这个状态码。</p><blockquote><p>使用301跳转的场景：</p><p>1）域名到期不想续费（或者发现了更适合网站的域名），想换个域名。<br>2）在搜索引擎的搜索结果中出现了不带<code>www</code>的域名，而带<code>www</code>的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。<br>3）空间服务器不稳定，换空间的时候。</p><p>使用302跳转的场景：</p><ul><li>尽量使用301跳转！<a href="https://www.cnblogs.com/tongongV/p/10944414.html" target="_blank" rel="noopener">点击查看解释</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 手写点击高亮</title>
      <link href="/2022/05/07/%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E9%AB%98%E4%BA%AE/"/>
      <url>/2022/05/07/%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E9%AB%98%E4%BA%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"chooerr-list"</span>&gt;</span><br><span class="line">      &lt;li :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;active:nowIndex === item.id&#125;"</span> </span><br><span class="line">          v-<span class="keyword">for</span>=<span class="string">"(item) in timerDate"</span> </span><br><span class="line">          :key=<span class="string">"item.id"</span> </span><br><span class="line">          @click=<span class="string">"timerHandle(item.id)"</span></span><br><span class="line">       &gt; &#123;&#123;item.value&#125;&#125; </span><br><span class="line">       &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/1657892137824.png" alt="65789213782"></p><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">timerDate:[&#123;</span><br><span class="line">       id:<span class="number">0</span>,</span><br><span class="line">       value:<span class="string">'一个月'</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">       id:<span class="number">1</span>,</span><br><span class="line">       value:<span class="string">'三个月'</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">       id:<span class="number">2</span>,</span><br><span class="line">       value:<span class="string">'六个月'</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">       id:<span class="number">3</span>,</span><br><span class="line">       value:<span class="string">'九个月'</span></span><br><span class="line">     &#125;]</span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  timerHandle(data)&#123;</span><br><span class="line">    <span class="keyword">this</span>.nowIndex=data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>添加meta控制用户访问权限</title>
      <link href="/2022/05/07/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90/"/>
      <url>/2022/05/07/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="步骤梳理"><a href="#步骤梳理" class="headerlink" title="步骤梳理"></a>步骤梳理</h1><ol><li>在路由模块 router 添加 meta 对象，设置权限属性</li><li>路由守卫 beforeEach ( ) 设置路由跳转逻辑</li></ol><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p><code>以home首页为例做介绍</code></p><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p>思路：每个组件实例存在一个 $route 对象，是一个局部对象，存储组件路由信息： name、meta、path、hash、query、params、fullPath 等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      isLogin: <span class="literal">true</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;，</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    name: <span class="string">'Login'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/views/login.vue"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><p>思路：使用前置守卫<font color="green"> beforeEach </font>能在路由跳转<code>前</code>进行拦截的特性，对添加了 meta.isLogin==true 权限的路由进行判断，如果本地存储有 token 值，则next() 通行，否则拦截的路由将跳转到 login 页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.meta.isLogin) &#123;</span><br><span class="line">    <span class="keyword">let</span> token = store.state.login.user.token</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(&#123;</span><br><span class="line">        name: <span class="string">"Login"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>使用 jsonwebtoken（JWT）生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JWT = <span class="built_in">require</span>(<span class="string">"jsonwebtoken"</span>)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/login"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, pass &#125; = req.body;</span><br><span class="line">  <span class="comment">//sqlClient方法实现连接数据库并返回查询结果，并回调函数响应数据</span></span><br><span class="line">  sqlClient(<span class="string">"select * from user where username=? and password=?"</span>, [username, pass], result =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> token = JWT.sign(username, <span class="string">'^8^'</span>)</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        token,</span><br><span class="line">        status: <span class="number">200</span>,</span><br><span class="line">        username</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        ststus: <span class="number">401</span>,</span><br><span class="line">        mgs: <span class="string">'登陆失败'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求的状态码那些事</title>
      <link href="/2022/04/10/ajax_readyState/"/>
      <url>/2022/04/10/ajax_readyState/</url>
      
        <content type="html"><![CDATA[<h1 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0（未初始化）: 请求未初始化，还没有调用 send() 方法</span><br><span class="line">1（载入）: 服务器连接已建立，已调用 send() 方法，正在发送请求</span><br><span class="line">2（载入完成）: 请求已接收 接收到了响应头，send() 方法执行完成，已经接收到全部响应内容</span><br><span class="line">3（交互）: 请求处理中 正在下载响应体</span><br><span class="line">4（完成）: 请求已完成，且响应已就绪</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>那些需要牢记基础</title>
      <link href="/2022/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>[ 摘要 ]：包含 CSS、JavaScript、vue、计算机网络等知识，全文以问答的风格，书写内容基本涵盖大部分面试题。</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><h3 id="什么是-BFC"><a href="#什么是-BFC" class="headerlink" title="什么是 BFC ?"></a>什么是 BFC ?</h3><p>BFC （block formatting context）块级格式化上下文，属于三种文档流（普通流、浮动流、定位流）中的<code>普通流</code>，是页面渲染的独立容器，内部元素的渲染不会影响到外界</p><h3 id="形成-BFC-的条件？"><a href="#形成-BFC-的条件？" class="headerlink" title="形成 BFC 的条件？"></a>形成 BFC 的条件？</h3><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li>浮动元素（<code>float</code> 值不是 <code>none</code>）</li><li>定位元素（<code>position</code> 为 <code>absolute</code> / <code>flxed</code>）</li><li>块级元素（<code>display</code> 为 <code>inline-block</code>）</li><li>display 为：<code>table</code> 、<code>inline-table</code>、<code>table-cell</code> 、<code>table-caption</code> 、<code>flex</code>、<code>inline-flex</code>、<code>grid</code>、<code>inline-grid</code></li><li>overflow 值不为 visible （为<code>auto</code>、<code>scroll</code>、<code>hidden</code>）</li><li>……</li></ul><h3 id="BFC-的渲染规则-？"><a href="#BFC-的渲染规则-？" class="headerlink" title="BFC 的渲染规则 ？"></a>BFC 的渲染规则 ？</h3><ul><li>不同盒子在同一个 BFC 垂直方向边距重叠</li><li>BFC 区域不会与浮动盒子重叠</li><li>计算 BFC 高度的时候，浮动元素参与计算</li></ul><h3 id="BFC-应用场景-？"><a href="#BFC-应用场景-？" class="headerlink" title="BFC 应用场景 ？"></a>BFC 应用场景 ？</h3><ul><li>防止浮动导致的父盒子高度为 0</li><li>避免外边距重叠（使用不同 BFC 渲染）</li></ul><h2 id="绘制特殊图形"><a href="#绘制特殊图形" class="headerlink" title="绘制特殊图形"></a>绘制特殊图形</h2><h3 id="border-绘制三角形-？"><a href="#border-绘制三角形-？" class="headerlink" title="border 绘制三角形 ？"></a>border 绘制三角形 ？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.triangle</span>&#123;</span></span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border: 50px solid;</span><br><span class="line">    // 四个参数对应 ：上 右 下 左</span><br><span class="line"><span class="css"><span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#ccc</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：是一个三角形</p><h3 id="skew-绘制平行四边形-？"><a href="#skew-绘制平行四边形-？" class="headerlink" title="skew 绘制平行四边形 ？"></a>skew 绘制平行四边形 ？</h3><p>利用 skew 特性，参数一：x 轴倾斜角度，参数二：y 轴倾斜角度</p><ul><li>skew ( x-angle , y-angle ) 定义沿着 X 和 Y 轴的 2D 倾斜转换。</li><li>skewX ( angle ) 定义沿着 X 轴的 2D 倾斜转换。</li><li>skewY ( angle ) 定义沿着 Y 轴的 2D 倾斜转换。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.parallel</span> &#123;</span></span><br><span class="line">    margin-top: 50px;</span><br><span class="line">    margin-left: 50px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: red;</span><br><span class="line">    transform: skew(-20deg, 0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parallel"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用-DIV-绘制五角星-？"><a href="#用-DIV-绘制五角星-？" class="headerlink" title="用 DIV 绘制五角星 ？"></a>用 DIV 绘制五角星 ？</h3><p>思路：用 border 绘制 3 个三角形，其中 2 个三角形旋转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#star</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 200px auto;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red transparent;</span><br><span class="line">    border-width: 70px 100px;</span><br><span class="line">    transform: rotate(35deg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#star</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    content: '';</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    top: -128px;</span><br><span class="line">    left: -95px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red transparent;</span><br><span class="line">    border-width: 80px 30px;</span><br><span class="line">    transform: rotate(-35deg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#star</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    content: '';</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    top: -45px;</span><br><span class="line">    left: -140px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red transparent;</span><br><span class="line">    border-width: 70px 100px;</span><br><span class="line">    transform: rotate(-70deg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="数据类型与数值"><a href="#数据类型与数值" class="headerlink" title="数据类型与数值"></a>数据类型与数值</h2><h3 id="原始类型、引用类新型有哪些-？"><a href="#原始类型、引用类新型有哪些-？" class="headerlink" title="原始类型、引用类新型有哪些 ？"></a>原始类型、引用类新型有哪些 ？</h3><p>原始（基本）数据类型有 6 种(注意全是小写)：</p><ul><li><input disabled="" type="checkbox"> number</li><li><input disabled="" type="checkbox"> boolean</li><li><input disabled="" type="checkbox"> string</li><li><input disabled="" type="checkbox"> null</li><li><input disabled="" type="checkbox"> undefined</li><li><input disabled="" type="checkbox"> Symbol</li></ul><p>引用类型：</p><ul><li><input disabled="" type="checkbox"> 对象类型 Object ：普通对象 Object , Date、Array、Function 、Date 、RegExp 、Error… , <code>Number、String、Boolean（基本包装类型）</code> </li></ul><p>总结以上，一共有 7 种数据类型。</p><h3 id="说出以下代码运行结果和原因-？"><a href="#说出以下代码运行结果和原因-？" class="headerlink" title="说出以下代码运行结果和原因 ？"></a>说出以下代码运行结果和原因 ？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">person</span>)</span>&#123;</span><br><span class="line">       person.age = <span class="number">26</span></span><br><span class="line">       person = &#123;</span><br><span class="line">           name:<span class="string">'hh'</span></span><br><span class="line">           age:<span class="string">'18'</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> person</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> p1 = &#123;</span><br><span class="line">         name:<span class="string">'ff'</span></span><br><span class="line">         age:<span class="string">'20'</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> p2 = test(p1)</span><br><span class="line">   <span class="built_in">console</span>.log(p1) <span class="comment">// --&gt;</span></span><br><span class="line">   <span class="built_in">console</span>.log(p2) <span class="comment">// --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>结果:</strong></p><p>p1：{name: “ff”, age: 26}<br>p2：{name: “hh”, age: 18}</p><p><strong>原因：</strong><br>引用类型作为实参，在函数传参时传递的是内存地址值，p1 将地址传递给 person，person 更改了 p1 引用地址中的内容，又给其重新分配引用地址，并将地址值传递给 p2 </p><h3 id="null-是对象吗-？"><a href="#null-是对象吗-？" class="headerlink" title="null 是对象吗 ？"></a>null 是对象吗 ？</h3><p><strong>结论：</strong><br>null 不是对象</p><p><strong>原因：</strong><br>虽然 typeof 测试 null 的类型输出为 Object，但是这是 JS 的一个 bug ，因为 JS 初创时使用的是 32 位系统，考虑到性能，JS 采用低位存储变量的类型，对象类型的二进制是以 000 开头的，而 null 的二进制是全 0，则 typeof 输出 Object 的错误结果</p><h3 id="‘1’-toString-为什么能调用-？"><a href="#‘1’-toString-为什么能调用-？" class="headerlink" title="‘1’.toString( ) 为什么能调用 ？"></a>‘1’.toString( ) 为什么能调用 ？</h3><p>虽然 toString( ) 是对象方法，但是因为<strong>基本包装类型</strong>的特性，该语句执行其实做了几件事：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new String（'1'） 可用，ES6不建议使用new关键字创建基本类型的包装类</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Object</span>（<span class="string">'1'</span>） </span><br><span class="line">s.toString ()</span><br><span class="line">s = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>其中三种基本类型：Boolean，Number，String 又是基本包装类型。基本包装类型是将 <strong>简单数据类型</strong> 包装成 <strong>复杂数据类型</strong>。因此可以调用系统方法。<br>第一步：创建对象实例<br>第二步：调用对象方法<br>第三步：执行完对象方法立即销毁对象</p><h3 id="0-1-0-2-0-3-，为什么-？"><a href="#0-1-0-2-0-3-，为什么-？" class="headerlink" title="0.1+0.2 != 0.3 ，为什么 ？"></a>0.1+0.2 != 0.3 ，为什么 ？</h3><p>浮点数 0.1 和 0.2 转为二进制时，是无限循环的值，计算机因为资源有限将其表示为近似值，因此出现精度损失。最后将相加的结果再转为 10 进制输出，结果为 0.30000000000000004</p><h3 id="什么是-BigInt-？"><a href="#什么是-BigInt-？" class="headerlink" title="什么是 BigInt ？"></a>什么是 BigInt ？</h3><p>BigInt 是第二种数字数据类型，当整数超过 Number 支持的范围时使用，该数据类型允许我们安全的使用大整数执行算术操作，能表示高分辨率时间戳，使用大整数 ID 等等，而不用调用库</p><h3 id="为什么需要-BigInt-？"><a href="#为什么需要-BigInt-？" class="headerlink" title="为什么需要 BigInt ？"></a>为什么需要 BigInt ？</h3><p>因为 Number 无法精确表示非常大的整数，在 JS 中，所有数字都是双精度 64 位浮点数表示，确切的说，JS 中 Number 类型只能安全表示 -(2^53-1)~(2^53-1) 范围的数值，会将非常大的整数四舍五入，在任何超出此范围的整数都会失去精度：</p><blockquote><p>console.log(9999 9999 9999 999) -&gt; 1000 0000 0000 0000<br>console.log(9007199254740992 === 9007199254740993) -&gt;true</p></blockquote><p>Math.pow (2, 53) 竟然与 Math.pow(2, 53) + 1 相等，则安全范围是：-(2^53-1)~(2^53-1)</p><h3 id="如何创建并使用-BigInt-？"><a href="#如何创建并使用-BigInt-？" class="headerlink" title="如何创建并使用 BigInt ？"></a>如何创建并使用 BigInt ？</h3><p>两种方式：</p><ul><li><input disabled="" type="checkbox"> 在数字末尾添加 n 就可以<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740995n</span>) <span class="comment">//9007199254740995n</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740995</span>) <span class="comment">//9007199254740996</span></span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 使用 BigInt() 构造函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInt(<span class="string">"9007199254740995"</span>)   <span class="comment">//9007199254740995n</span></span><br></pre></td></tr></table></figure>简单使用：<blockquote><p>10n + 20n; &emsp; // 30n<br>10n - 20n;  &emsp; //-10n<br>+10n;      &emsp;&emsp; //TypeError<br>-10n;        &emsp;&emsp; //-10n<br>10n* 20n    &emsp;//200n<br>20n / 10n   &emsp;//2n<br>23n % 10n &emsp;//3n<br>10n ** 3n  &emsp;//1000n</p></blockquote></li></ul><blockquote><p>const x= 10n;<br>++x; &emsp;// 11n<br>–x;  &emsp; // 9n<br>console.log(x)  // bigint</p></blockquote><p><strong>注意：</strong></p><p>1) BigInt 不支持一元加号运算符，这可能是某些程序可能依赖于 + 始终生成 Number 类型，或者抛出异常，另外，更改 + 的行为也会破坏 asm.js 代码；<br>2) 不允许 BigInt 和 Number 之间进行混合操作，因为隐式类型转换可能会丢失信息；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> + <span class="number">10n</span>; <span class="comment">// → TypeError</span></span><br></pre></td></tr></table></figure><p>3) 不能将 BigInt 传递给 Web API 和 JS 内置方法，这些函数需要 Number 类型；<br>4) 当 Boolean 和 BigInt 相遇时，和 Number 类似，除了 0n 为 false，其他值为 true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">0n</span>)&#123;</span><br><span class="line"><span class="comment">//条件判断为false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3n</span>)&#123;</span><br><span class="line"><span class="comment">//条件为true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5) 元素都为 BigInt 的数组都可以进行 sort；<br>6) BigInt 可以进行位运算。</p><h3 id="typeof-是否能正确判断类型-？"><a href="#typeof-是否能正确判断类型-？" class="headerlink" title="typeof 是否能正确判断类型 ？"></a>typeof 是否能正确判断类型 ？</h3><p>对于<strong>原始类型</strong>来说，除了 null 都可以调用 typeof 显示正确的类型：</p><blockquote><p>typeof 1 // ‘number’<br>typeof ‘1’ // ‘string’<br>typeof undefined // ‘undefined’<br>typeof true // ‘boolean’<br>typeof Symbol() // ‘symbol’</p></blockquote><p>对于<strong>引用数据</strong>类型，除了 function 类型，其他都输出Object：</p><blockquote><p>typeof [] // ‘Object’<br>typeof {} //‘Object’<br>typeof console.log //‘function’</p></blockquote><p>因此采用 typeof 判断对象数据类型不合适，而采用 instanceof 会更好。因为 instanceof 运算符用来检测构造函数的 prototype 属性是否出现在某个实例的 _<em>proto_</em> 对象原型上。</p><h3 id="instanceof-能否判断基本数据类型-？"><a href="#instanceof-能否判断基本数据类型-？" class="headerlink" title="instanceof 能否判断基本数据类型 ？"></a>instanceof 能否判断基本数据类型 ？</h3><p>instanceof 能判断，但是不能直接使用，需要重定义 instanceof 将其转换为使用 typeof 判断，方法如下：</p><ul><li>语法：<code>object instanceof constructor</code><ul><li><code>object</code>：某个实例对象</li><li><code>constructor</code>：某个构造函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Symbol.hasInstance ：用于判断某对象是否为某构造器的实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimitiveNumber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance] (x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'number'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">111</span> <span class="keyword">instanceof</span> PrimitiveNumber )</span><br></pre></td></tr></table></figure><h3 id="能不能手动实现一下-instanceof-的功能-？"><a href="#能不能手动实现一下-instanceof-的功能-？" class="headerlink" title="能不能手动实现一下 instanceof 的功能 ？"></a>能不能手动实现一下 instanceof 的功能 ？</h3><p><strong>核心：</strong>原型链向上查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function myInstanceof (left,right)&#123;</span><br><span class="line">    &#x2F;&#x2F; 基本数据类型直接返回 false</span><br><span class="line">    if ( typeof left !&#x3D;&#x3D; &#39;object&#39; || left &#x3D;&#x3D;&#x3D; null )</span><br><span class="line">        return false;</span><br><span class="line">    &#x2F;&#x2F; getPrototypeof 是 object 对象自带的一个方法，能拿到参数的原型对象</span><br><span class="line">    let proto &#x3D; object.getPrototypeof (left);</span><br><span class="line">    while(true)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 查找到尽头，还没找到</span><br><span class="line">        if（proto &#x3D;&#x3D; null）return false;</span><br><span class="line">        &#x2F;&#x2F; 找到相同原型对象</span><br><span class="line">        if(proto &#x3D;&#x3D; right.prototype) return true;</span><br><span class="line">        proto &#x3D; object.getPrototypeof (proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myInstanceof(<span class="string">"11"</span>,<span class="built_in">String</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(myInstanceof(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"11"</span>),<span class="built_in">String</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-is-和-的区别-？"><a href="#Object-is-和-的区别-？" class="headerlink" title="Object.is 和 === 的区别 ？"></a>Object.is 和 === 的区别 ？</h3><p>== 是等于， === 是<code>严格等于</code>，Object 是<code>加强版严格等于</code></p><p>Object.js() 的判断规则：和 === 基本一致，有两处不同：</p><ul><li>+0 不等于 -0</li><li>NaN 等于 NaN</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>)  <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>,<span class="number">-0</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="number">-0</span> === +<span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x === y)&#123;</span><br><span class="line">    <span class="comment">//1/0 === 1/0 返回 true ，1/+0 === 1/-0 返回 false</span></span><br><span class="line">        <span class="keyword">return</span> x !== <span class="number">0</span> || y !== <span class="number">0</span> || <span class="number">1</span>/x === <span class="number">1</span>/y;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//x !== y, x !== x 且 y !== y 都为 true，则两边都是 NaN </span></span><br><span class="line">        <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果是什么，为什么-？"><a href="#结果是什么，为什么-？" class="headerlink" title="[] == ![] 结果是什么，为什么 ？"></a>[] == ![] 结果是什么，为什么 ？</h3><p>优先级，！(逻辑非) &gt; == ，因此 ！将操作值转换成一个布尔值，然后对其取反：[] 是 <code>true</code> 转换成 ![] 是<code>false</code>；</p><p>逻辑非转换后，现在比较的是：[] == false；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] instanceof Array &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>先看看相等操作符<code>==</code>的一些转换规则：</p><ul><li>如果有一个操作数是布尔值，则会先隐式调用<code>window</code>对象上的<code>Number</code>转型函数，将其转换为数值，<code>false</code>转为<code>0</code>，<code>true</code>转为<code>1</code>，再进行判断。</li><li>如果有一个操作数是字符串，另一个是数值，则隐式调用<code>Number</code>转型函数，将字符串转换为数值，再进行判断。</li><li>如果有一个操作数是对象，则调用对象的<code>valueOf</code>方法，如果返回的是<strong>复杂数据类型</strong>，则在返回值得基础上再调用<code>toString</code>方法，最后根据以上规则进行比较。</li></ul><p>分析<code>[] == ![]</code>得出以下思路：</p><ol><li>隐式调用<code>Boolean</code>转型函数，对空数组转换成<code>Boolean</code>值，再对结果取反。此时比较<code>[] == false</code>。</li><li>隐式调用<code>Number</code>转型函数，将<code>false</code>转换为数值<code>0</code>，此时比较<code>[] == 0</code>。</li><li>调用<code>valueOf</code>方法和<code>toString</code>方法，此时<code>[].toString()</code> 为空字符串，比较 <code>&#39;&#39; == 0</code>。</li><li>隐式调用<code>Number</code>转型函数，将空字符串转换为<code>0</code>，比较 <code>0 == 0</code>。</li><li>最后返回<code>true</code>。</li></ol><p>初步总结： == 转换<strong>最复杂</strong>的操作结果是转换为数值进行比较。对象类型转换为<code>[object Object]</code></p><h3 id="JS-中类型转换有几种-？"><a href="#JS-中类型转换有几种-？" class="headerlink" title="JS 中类型转换有几种 ？"></a>JS 中类型转换有几种 ？</h3><p>JS中，类型转换只有三种：</p><ul><li>转成 布尔值（调用 Boolean()方法）</li><li>转成 字符串（调用.toString()或 String()方法）</li><li>转成 数字（调用 Number(),parseInt(),parseFloat()方法）</li></ul><table>    <thead>        <td>原始值</td>             <td>转换目标</td>        <td>结果</td>      </thead>    <tbody>        <tr>            <td>number</td>                  <td rowspan="4">布尔值</td>                  <td>除了0、+-0、NaN 其他为 true</td>        </tr>        <tr>            <td>string</td>             <td>除了空串其他为 true</td>         </tr>        <tr>            <td>undefined、null</td>            <td>false</td>         </tr>        <tr>            <td>引用类型</td>            <td>true</td>         </tr>         <tr>            <td>number</td>            <td rowspan="4">字符串</td>             <td>0 => '0'</td>        </tr>        <tr>            <td>boolean、function、Symbol</td>            <td>'true'</td>        </tr>         <tr>            <td>数组</td>            <td>[1，2] => '1,2'</td>        </tr>        <tr>            <td>对象</td>            <td>’[object Object]‘</td>        </tr>        <tr>            <td>string</td>            <td rowspan="5">数字</td>            <td>'1' => 1;<br>'a' => NaN;<br>''=>0</td>        </tr>        <tr>            <td>数组</td>            <td>[] => 0;<br>有且仅有一个数字元素 => 数字;<br>其他 NaN</td>        </tr>         <tr>            <td>除了 Array 的其他引用类型</td>            <td>NaN</td>        </tr>        <tr>            <td>null</td>            <td>0</td>        </tr>         <tr>            <td>Symbol</td>            <td>抛错</td>        </tr>    </tbody></table><h3 id="和-的区别-？"><a href="#和-的区别-？" class="headerlink" title="== 和 === 的区别 ？"></a>== 和 === 的区别 ？</h3><p>== ：等于，两边值类型不同时，先进行类型转换，再比较；</p><p>===：严格等于，类型 + 值都相等时，才相等。<img src="https://img2018.cnblogs.com/i-beta/1888556/201912/1888556-20191215225956934-150507918.png" alt=""></p><h3 id="对象转原始（基本）类型是根据什么流程运行的-？"><a href="#对象转原始（基本）类型是根据什么流程运行的-？" class="headerlink" title="对象转原始（基本）类型是根据什么流程运行的 ？"></a>对象转原始（基本）类型是根据什么流程运行的 ？</h3><p>对象转原始类型，会调用内置的 ToPrimitive 函数，对于该函数而言，逻辑如下：</p><p><code>默认调用</code></p><p>如果有 Symbol.toPrimitive () 方法，优先调用再返回<br>其次调用 valueOf () ，如果转换为原始类型，则返回<br>其次调用 toString () ，如果转换为原始类型，则返回<br>如果都没有返回原始类型，会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">3</span>,</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'5'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj + <span class="number">1</span>); <span class="comment">// 输出7</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">3</span>,</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'5'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj + <span class="number">1</span>); <span class="comment">// 输出5</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj + <span class="number">1</span>);  <span class="comment">// 输出[object Object]1</span></span><br></pre></td></tr></table></figure><h3 id="如何让-if-a-1-amp-amp-a-2-条件成立？"><a href="#如何让-if-a-1-amp-amp-a-2-条件成立？" class="headerlink" title="如何让 if(a == 1 &amp;&amp; a == 2) 条件成立？"></a>如何让 if(a == 1 &amp;&amp; a == 2) 条件成立？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">value:<span class="number">0</span>,</span><br><span class="line">valueOf: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a==<span class="number">1</span> &amp;&amp; a==<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="什么是闭包-？"><a href="#什么是闭包-？" class="headerlink" title="什么是闭包 ？"></a>什么是闭包 ？</h3><p>闭包就是：有权访问另一个函数作用域中的变量的函数。<br>函数嵌套函数，内部的函数就是闭包！</p><h3 id="闭包产生-？"><a href="#闭包产生-？" class="headerlink" title="闭包产生 ？"></a>闭包产生 ？</h3><ul><li>函数嵌套函数</li><li>函数内部使用外部函数的变量</li><li>调用外部函数</li></ul><h3 id="闭包的表现形式-？"><a href="#闭包的表现形式-？" class="headerlink" title="闭包的表现形式 ？"></a>闭包的表现形式 ？</h3><ul><li>返回一个函数</li><li>作为函数参数传递</li><li>使用回调函数</li><li>立即执行函数使用全局变量</li></ul><h3 id="解决闭包带来的缺点-？"><a href="#解决闭包带来的缺点-？" class="headerlink" title="解决闭包带来的缺点 ？"></a>解决闭包带来的缺点 ？</h3><ul><li>减少使用闭包</li><li>及时释放</li></ul><h3 id="如何解决下面的循环输出问题-？"><a href="#如何解决下面的循环输出问题-？" class="headerlink" title="如何解决下面的循环输出问题 ？"></a>如何解决下面的循环输出问题 ？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i ++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么会全部输出 6 ？如何改进，让它输出 1，2，3，4，5 ？(方法越多越好)</p><p>因为 setTimeout 为宏任务，由于 js 单线程事件循环机制（EventLoop），在主线程同步任务执行完后才去执行宏任 务，因此循环结束后 setTimeout 中的回调才依次执行，但输出 i 的时候当前作用域没有，往上一级再找， 发现了 i ，此时循环已经结束，i 变成了 6 。因此会全部输出 6 。</p><p>解决方法：</p><p>1、利用 IIFE（立即执行函数表达式）当每次 for 循环时，把此时的 i 变量传递到定时器中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j)</span><br><span class="line">            &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、给定时器传入第三个参数, 作为 timer 函数的第一个函数参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j)</span><br><span class="line">    &#125;, <span class="number">0</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、使用 ES6 中的 let</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        注：let 使 JS 发生革命性的变化，让 JS 有函数作用域变为了块级作用域，用 let 后作用域链不复存在。代码的作用域以块级为单位，以上面代码为例：</p><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="原型对象和构造函数有何关系-？"><a href="#原型对象和构造函数有何关系-？" class="headerlink" title="原型对象和构造函数有何关系 ？"></a>原型对象和构造函数有何关系 ？</h3><p>在 JavaScript 中，每当定义一个函数数据类型（普通函数、类）时候，都会自带一个  prototype 属性， 这个属性指向函数的原型对象。当函数经过 new 调用时，这个函数就成为了构造函数，返回一个全新的实例对象，这个实例对象有一个 proto 属性，指向构造函数的原型对象。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/176e00c8add949ec88cc91baddb657eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""></p><p>注：实例与原型对象之间有直接的联系，但实例与构造函数之间没有。</p><h3 id="描述一下原型链-？"><a href="#描述一下原型链-？" class="headerlink" title="描述一下原型链 ？"></a>描述一下原型链 ？</h3><p>JavaScript 对象通过 <code>__proto__</code> 指向父类对象，直到指向 Object 对象为止，这样就形成了一个原型指向的链条, 即原型链。</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas 获取某列前 n 位字符串</title>
      <link href="/2021/11/12/pandas%20%E8%8E%B7%E5%8F%96%E6%9F%90%E5%88%97%E5%89%8D%20n%20%E4%BD%8D%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2021/11/12/pandas%20%E8%8E%B7%E5%8F%96%E6%9F%90%E5%88%97%E5%89%8D%20n%20%E4%BD%8D%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="只需三步"><a href="#只需三步" class="headerlink" title="只需三步"></a>只需三步</h1><ul><li>1、指定列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book_id=df.pop(<span class="string">'索书号'</span>)  //定义book_id获取索书号列</span><br></pre></td></tr></table></figure><ul><li>2、<code>book_id</code> 重新取值，取索书号列第一位字符（从索引<code>0</code>开始取，包括第<code>0</code>个）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book_id=book_id.str[:<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>3、在第二列新增<code>book_id</code>列，并填充</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*用book_id填充*&#x2F;</span><br><span class="line">df.insert(1,&#39;book_id&#39;,book_id)</span><br></pre></td></tr></table></figure><ul><li>完整代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">//导入数据</span><br><span class="line">fpath=<span class="string">'xx.xlsx'</span></span><br><span class="line">df=pd.read_excel(fpath)</span><br><span class="line">df.set_index(<span class="string">"序号"</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定列插入某列前n位字符串</span></span><br><span class="line">book_id=df.pop(<span class="string">'索书号'</span>)  //book_id获取索书号列</span><br><span class="line">//  book_id重新取值，取索书号列第一位字符</span><br><span class="line">book_id=book_id.str[:<span class="number">1</span>]</span><br><span class="line">//在第二列新增book_id列并用book_id（第一位字符）填充</span><br><span class="line">df.insert(<span class="number">1</span>,<span class="string">'book_id'</span>,book_id)</span><br><span class="line">//按照book_id列对新增的”类别“列填充类别，我自定义的函数get_classify没写出（按照book_id的值，返回对应“类别”名）</span><br><span class="line">df.loc[:,<span class="string">"类别"</span>]=df.loc[:,<span class="string">'book_id'</span>].apply(get_classify)</span><br><span class="line">//输出</span><br><span class="line">df.to_excel(<span class="string">"111.xlsx"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>同更新于<code>csdn</code> 博客地址：<a href="https://blog.csdn.net/puhuihui/article/details/116668168" target="_blank" rel="noopener">piaoHuiEr</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据处理</title>
      <link href="/2021/09/30/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/09/30/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p> 1、行列基本操作</p><ul><li><p>取指定行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_GD = df1[df1[<span class="string">'city'</span>] == <span class="string">"广东"</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除某列为指定值的所有行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df=df[~df[<span class="string">'Year'</span>].isin([<span class="string">'2111'</span>,<span class="string">'9'</span>,<span class="string">'2105'</span>,<span class="string">'板塔结合'</span>,<span class="string">'NaN'</span>,<span class="string">'板楼'</span>,<span class="string">'暂无数据'</span>])]</span><br></pre></td></tr></table></figure></li><li><p>删除某列为<code>NAN</code>（空值）的行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df[df[<span class="string">'Year'</span>].notnull()]</span><br></pre></td></tr></table></figure></li><li><p>将非连续性数据分箱（分组）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'Year'</span>] = pd.qcut(df[<span class="string">'Year'</span>],<span class="number">8</span>).astype(object)</span><br></pre></td></tr></table></figure></li><li><p>改变某列数值类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'Year'</span>] = df[<span class="string">'Year'</span>].astype(<span class="string">'int'</span>)</span><br></pre></td></tr></table></figure><p>注意：存在空值或者字符串需要删除才能转为 <code>int/float</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array 封装栈、队列</title>
      <link href="/2021/08/07/%E6%A0%88/"/>
      <url>/2021/08/07/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>摘要：<code>栈和队列都可以基于数组、链表封装，本文只基于数组封装</code></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="封装栈"><a href="#封装栈" class="headerlink" title="封装栈"></a>封装栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//push()添加一个新元素到栈顶位置</span></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//pop()删除栈顶元素</span></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//peek()查看栈顶元素，不移除</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//isEmpty()栈内是否有元素 真为true 返回false</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//size()返回栈元素个数</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Bin2</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> number = num</span><br><span class="line">  <span class="comment">//1.创建栈结构</span></span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="comment">//2.循环取余</span></span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = num % <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 想下取整 相当于整除</span></span><br><span class="line">    num = <span class="built_in">Math</span>.floor(num / <span class="number">2</span>)</span><br><span class="line">    stack.push(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.拼接字符串</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    str += stack.pop()</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(number, <span class="string">'转化为二进制是'</span>, str)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">import</span> &#123; Stack, Bin2 &#125; <span class="keyword">from</span> <span class="string">'./stack'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------stack----------------'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stack.push(<span class="string">'aaa'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(stack.push(<span class="number">222</span>))</span><br><span class="line"><span class="built_in">console</span>.log(stack.push(<span class="string">'ccc'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'长度:'</span>, stack.size()) <span class="comment">// 长度: 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'栈:'</span>, stack.items) <span class="comment">//栈: (3) ['aaa', 222, 'ccc']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'栈顶'</span>, stack.peek()) <span class="comment">//栈顶 ccc</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除栈顶'</span>, stack.pop()) <span class="comment">//删除栈顶 ccc</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.items) <span class="comment">//(2) ['aaa', 222]</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty()) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Bin2(<span class="number">100</span>) <span class="comment">//100 '转化为二进制是' '1100100'</span></span><br></pre></td></tr></table></figure><p><code>知识来源于哔哩哔哩up主：coderwhy</code></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装队列  :打印机</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue() 像队列尾部添加一个或多个新的(项)</span></span><br><span class="line">  enqueue(element) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// dequeue() 移除队首元素,并返回被移除元素</span></span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// front()返回队首元素</span></span><br><span class="line">  front() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//isEmpty() 是否为空</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//size()队列包含的元素个数</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用封装的队列"><a href="#调用封装的队列" class="headerlink" title="调用封装的队列"></a>调用封装的队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Queue &#125; <span class="keyword">from</span> <span class="string">'./queue'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------queue--------------'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'222'</span>)</span><br><span class="line">queue.enqueue(<span class="number">2</span>)</span><br><span class="line">queue.enqueue(<span class="number">3</span>)</span><br><span class="line">queue.enqueue(<span class="string">'111'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.items)</span><br><span class="line"><span class="built_in">console</span>.log(queue.front())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言中的不同数据类型运算问题</title>
      <link href="/2020/09/14/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%BF%90%E7%AE%97/"/>
      <url>/2020/09/14/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>不同类型的数据进行运算，如果一个运算符两侧的数据类型不同，需要先自动进行类型转换，使两者具有同一类型，然后进行运算，现将规律总结如下：</p><blockquote><p>系统有默认的转化规则，就是从精度底的转化为精度高的，避免计算时精度的丢失 具体转换规则如下 char  –&gt; short  –&gt; int —&gt; unsigned  –&gt; long –&gt; unsigned long –&gt; float –&gt; double</p></blockquote><ol><li><p>+、-、 *、 /运算的两个数中有一个数为float或double型，结果是double型，因为系统将所有float型数据都先转换为double型，然后进行运算；</p></li><li><p>若int型与float或double型数据进行运算，先将int型和float型转换为double型，然后进行运算，结果为double型；</p></li><li><p>Char型与int型数据进行运算，就是把字符的ASCII码与整型数据进行运算;</p><pre><code>如：20+&apos;B&apos;=20+66=86</code></pre></li><li><p>两个int型相除，不管是否有余数，结果都为整型；如：5/10 输出是整数部分：0</p></li><li><p>强制类型转换的一般形式为：（类型名）（表达式），将表达式整体的输出结果转换，若写成(int)x+y，则是将x先转换为整型，再与y想加，</p></li></ol><blockquote><p>如上试中： 5/10的输出结果为：0</p><pre><code>  5.0/10的输出结果为：0.5  (fioat)(5/10)的输出结果为：0.00（float）5/10的输出结果为：0.5</code></pre><p>原文<a href="https://zhidao.baidu.com/question/1836994548785755700.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/1836994548785755700.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C 语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo安装、部署</title>
      <link href="/2020/09/14/hexo%E5%AE%89%E8%A3%85/"/>
      <url>/2020/09/14/hexo%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="主要流程如下："><a href="#主要流程如下：" class="headerlink" title="主要流程如下："></a>主要流程如下：</h2><ul><li>Node环境搭建</li><li>Hexo安装</li><li>Git环境搭建</li><li>将项目部署到github</li></ul><h2 id="Node-js安装及环境搭建"><a href="#Node-js安装及环境搭建" class="headerlink" title="Node.js安装及环境搭建"></a>Node.js安装及环境搭建</h2><ol><li><p>点击此处<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node下载界面</a>选择适合自己电脑的版本</p></li><li><p>然后一直点下一步直到安装完毕，安装完毕后输入Win+R打开命令框</p></li><li><p>按照下面命令在命令窗口（cmd）执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">#显示版本号说明Node.js安装成功</span><br><span class="line">npm -v</span><br><span class="line">#显示版本号说明npm安装成功</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org </span><br><span class="line"># 由于服务器原因可以配置淘宝镜像来快速下载和安装需要的插件</span><br><span class="line">npm config get registry</span><br><span class="line"># 检查镜像是否配置成功</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>在配置好Node环境之后就可以开始安装博客系统了</p><p>1.按照下面命令在命令窗口（cmd）执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g </span><br><span class="line"><span class="comment"># 下载安装hexo</span></span><br><span class="line">hexo -v </span><br><span class="line"><span class="comment"># 检查版本号来检验是否安装成功</span></span><br></pre></td></tr></table></figure><p>2.选择你想要放博客文件的盘</p><p><img src="/img/T1.png" alt="创建blog文件"></p><p>3.执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">#创建blog文件夹来作为你的博客资源目录</span><br><span class="line">cd blog</span><br><span class="line">#进入你的博客资源目录</span><br><span class="line">npm install</span><br><span class="line">#安装hexo需要的依赖</span><br></pre></td></tr></table></figure><p>4.介绍hexo博客的文件（不操作）</p><blockquote><p>node_modules：依赖包</p><p>public：存放生成的页面    //到此步骤暂时没有public文件</p><p>theme：存放博客主题</p><p>source：文件夹下的_posts用来存放文章</p><p>_config.yml：博客的配置文件</p></blockquote><p>5.在本地服务器浏览Hexo博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">#删除静态资源文件public</span><br><span class="line">$ hexo generate</span><br><span class="line">#生成静态文件public</span><br><span class="line">$ hexo server</span><br><span class="line">#用于启动本地服务器</span><br></pre></td></tr></table></figure><p>完成后，启动浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以看到你的博客了</p><p><img src="/img/T2.png" alt="Hexo默认主题"></p><h2 id="安装Git-Bash及创建Github仓库"><a href="#安装Git-Bash及创建Github仓库" class="headerlink" title="安装Git Bash及创建Github仓库"></a>安装Git Bash及创建Github仓库</h2><p>使用Git可以将本地文件部署到github</p><p>1.点击此处<a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载Git Bash</a>,并检查安装情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line"><span class="comment">#检查Git是否安装成功</span></span><br></pre></td></tr></table></figure><p>2.我们可以将我们的博客部署到本地服务器、购买的阿里云服务器、github或者码云上，这里我们选择github</p><ul><li>先注册<a href="https://github.com/" target="_blank" rel="noopener">Github账户</a>，再创建一个和你用户名相同的仓库，<a href="http://后面加.github.io/" target="_blank" rel="noopener">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://也就是xxxx.github.io/" target="_blank" rel="noopener">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。</li></ul><p><img src="/img/T3.png" alt="生成SSH添加到Github"></p><ul><li>生成SSH密钥添加到Github</li></ul><p>在博客文件根目录比如：f:\blog下使用git bash here执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">#youremail注册GitHub的的邮箱</span><br></pre></td></tr></table></figure><p>然后一直回车知道结束，类似：</p><blockquote><p>$ ssh-keygen -t rsa -C “<a href="mailto:760461549@qq.com">760461549@qq.com</a>“</p><p>Generating public/private rsa key pair.</p><p>Enter file in which to save the key (/c/Users/hp/.ssh/id_rsa):</p><p>Enter passphrase (empty for no passphrase):</p><p>Enter same passphrase again:</p><p>Your identification has been saved in /c/Users/hp/.ssh/id_rsa.</p><p>Your public key has been saved in /c/Users/hp/.ssh/id_rsa.pub.</p><p>The key fingerprint is:</p><p>SHA256:QzOyG/Q+O6Xr8zRdr5pc7SZKyrCpkAe0O1lDXpCnIgU <a href="mailto:760461549@qq.com">760461549@qq.com</a></p><p>The key’s randomart image is:</p><p>。。。。。。</p></blockquote><p>将会在C:\Users\XXX.ssh下生成id_rsa（私钥）和id_rsa.pub(公钥)文件，打开公钥文件全选复制内容，去自己的github账户点击右上角头像选择<strong>settings</strong>，然后选择<strong>SSH Keys</strong>点<code>Add SSH Key</code>,填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容，这样我们就能看到已经添加的Key。</p><ul><li><p>测试本地仓库是否连接到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>当你输入以上命令，会有一段警告代码，是正常的，输入yes即可。如：</p><blockquote><p>The authenticity of host ‘github.com (13.229.188.59)’ can’t be established.</p><p>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</p><p>Are you sure you want to continue connecting (yes/no)? yes</p><p>Warning: Permanently added ‘github.com,13.229.188.59’ (RSA) to the list of known hosts.</p></blockquote><p>如果没有提示成功，把C盘下.ssh删了重来一遍。</p></li></ul><h2 id="将项目部署到github"><a href="#将项目部署到github" class="headerlink" title="将项目部署到github"></a>将项目部署到github</h2><p>1.这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">#YourgithubName就是你的GitHub账户</span><br></pre></td></tr></table></figure><p>2.安装deploy-git才可以部署到Github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.在博客根目录使用git bash here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">#清除静态资源文件夹（public文件）</span><br><span class="line">hexo generate</span><br><span class="line">#生成新的静态文件（public文件），生成这个文件是根据&#x2F;source文件中的内容生成</span><br><span class="line">hexo server</span><br><span class="line">#启动本地服务器，在网址栏输入localhost:4000,查看本地更新情况</span><br><span class="line">hexo deploy</span><br><span class="line">#部署到github仓库</span><br></pre></td></tr></table></figure><p>当<code>hexo d</code>成功后，你可以在网址上输入<code>https://xxx.github.io/</code>来访问你的博客主页。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>域名</title>
      <link href="/2020/09/14/DNS/"/>
      <url>/2020/09/14/DNS/</url>
      
        <content type="html"><![CDATA[<h2 id="注册和配置域名："><a href="#注册和配置域名：" class="headerlink" title="注册和配置域名："></a>注册和配置域名：</h2><ol><li><p>第一步：点击这里领券，暂时有活动，<a href="https://shimo.im/docs/TGyCppPdCdyHTKQq/" target="_blank" rel="noopener">白嫖腾讯云俩top域名各一年!</a>。</p><p>第二步：<a href="https://shimo.im/docs/TGyCppPdCdyHTKQq/" target="_blank" rel="noopener">注册域名</a></p></li><li><p>更改域名解析网址，进入万网<strong>域名控制台–&gt;域名解析–&gt;添加解析</strong></p><p>如下图：</p><p><img src="/img/T4.jpg" alt=""></p></li></ol><blockquote><p>如果出现DNS状态报错：DNS服务器错误，那就需要将域名DNS改为DNSPod,状态为正常解析才可以顺利访问网站</p><p>如下图：</p><p><img src="/img/T5.png" alt=""></p></blockquote><h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><ol><li>去博客文件夹\source下新建文本文件,命名为CNAME,不需要后缀</li><li>用文本编辑器打开并添加购买域名,如下图:</li></ol><p>​       <img src="/img/T6.png" alt=""></p><h2 id="设置项目的GitHub-Pages"><a href="#设置项目的GitHub-Pages" class="headerlink" title="设置项目的GitHub Pages"></a>设置项目的GitHub Pages</h2><ol><li><p>在 github 上面，打开 <strong>username.github.io</strong> 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。比如：</p><p><img src="/img/T7.png" alt=""></p></li></ol><h2 id="重新部署GitHub"><a href="#重新部署GitHub" class="headerlink" title="重新部署GitHub"></a>重新部署GitHub</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">#删除public</span><br><span class="line">hexo g</span><br><span class="line">#生成新的静态文件（public文件），生成这个文件是根据&#x2F;source文件中的内容生成</span><br><span class="line">hexo d</span><br><span class="line">#部署</span><br></pre></td></tr></table></figure><p>耐心等待,一开始可能会出现电脑端可以访问但手机不能访问,需要大概十多分钟,就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 部署</title>
      <link href="/2020/09/14/coding/"/>
      <url>/2020/09/14/coding/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>[^摘要]: GitHub 的分发加速网络的域名遭到 DNS 污染。由于 GitHub 的加速分发 CDN 域名 assets-cdn.github.com 遭到 DNS 污染，导致无法连接使用 GitHub 的加速分发服务器，才使得中国大陆访问速度很慢。那么现在hexo部署到coding+github上，实现境内访问coding，境外访问github</p><hr><h2 id="创建coding项目"><a href="#创建coding项目" class="headerlink" title="创建coding项目"></a>创建coding项目</h2><p>1、进入 <a href="https://coding.net/" target="_blank" rel="noopener">Coding 官网</a>点击个人版登陆，注册一个并登录，并点击创建项目</p><p>【图片】</p><p>项目名称建议和用户名一致，项目描述可以不用写</p><h2 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h2><p>[^CODING 支持使用 SSH 协议来访问 Git 仓库，提供账户 SSH 公钥和项目 SSH 公钥设置。]: </p><p>1、配置SSH公钥的方法和GitHub Pages的方式差不多，直接使用Github一样的密钥即可：</p><p>[点击头像]-&gt;[个人设置]-&gt;[SSH公钥]-&gt;[新增公钥]</p><p>【图片】</p><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><p>1、进入coding项目,在右下角选择连接方式，选择SSH方式（推荐），一键赋值。</p><p>【图片】</p><p>2、找到blog根目录的_config.yml，使用快捷键ctrl+end定位到最后，将部署信息改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">    github: git@github.com:XXXXXX.github.io.git&#x2F;&#x2F;GitHub的SSH地址</span><br><span class="line">    coding: git@e.coding.net:XXXXXXX.git&#x2F;&#x2F;coding的SSH地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="开启静态网站"><a href="#开启静态网站" class="headerlink" title="开启静态网站"></a>开启静态网站</h2><p>[^此步需要用到持续部署下的静态网站功能，所以需要开启该功能]: </p><p>1、进入coding项目，在左下角选择[项目设置]-&gt;[项目与成员]-&gt;[功能开关]-&gt;[持续部署]</p><p>【图片】</p><p>2、点击【立即部署】你会看到你的访问地址</p><p>到这里博客部署已经结束了，现在可以使用该地址访问自己的博客了。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>[^到这一步，必须去买域名或者看上一个博客白嫖域名]: </p><p>1、首先去 <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNS官网</a>添加域名解析地址，将GitHub的解析路线改为境外，这样在境外就会访问GitHub，境内改为coding的访问地址。</p><p>【图片】</p><p>2、去coding项目，点击静态网站，点击右上角的【设置】，申请绑定新域名来代替网站的访问地址。注意：SSL/TLS安全证书这里有个坑,就是如果你之前已经创建绑定过github的代码仓库,那么直接生成这个证书是生成不了的,他会显示失败的状态，没有申请到 SSL 证书，当你访问你的网站时，浏览器就会提示不是安全连接。解决办法是：把GitHub的解析暂停，然后申请，最后开启GitHub的解析。最后开启强制HTTPS访问。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
