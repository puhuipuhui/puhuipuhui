<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Untitled</title>
      <link href="/2022/08/01/Untitled/"/>
      <url>/2022/08/01/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2022/08/01/css/"/>
      <url>/2022/08/01/css/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟 DOM 和 diff 算法</title>
      <link href="/2022/07/27/virtualDOM/"/>
      <url>/2022/07/27/virtualDOM/</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要： 介绍snabbdom、虚拟DOM、diff算法</p></blockquote><p>本文重点是什么？</p><ol><li>虚拟 DOM 是什么？</li><li>虚拟 DOM 如何产生？—— h 函数</li><li>diff 算法原理？—— diff 函数</li><li>虚拟 DOM 如何通过 diff 变为真正的 DOM 的？ —— diff 函数</li></ol><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><ul><li>介绍：是一个 JavaScript 对象，用来描述真实的DOM结构。</li><li>如下图，有三个属性:<br> （1）sel：标签名；（2）data：属性信息；（3）children：子元素对象。</li></ul><p>真实 DOM</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>可乐<span class="tag">&lt;/ <span class="attr">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虚拟 DOM</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"seL"</span>: <span class="string">"div"</span>，</span><br><span class="line">    <span class="string">"data"</span>: &#123; <span class="string">"class"</span>: &#123; <span class="string">"box"</span>: <span class="literal">true</span> &#125; &#125;,</span><br><span class="line">    <span class="string">"children"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"seL"</span>: <span class="string">"h3"</span>，</span><br><span class="line">            <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"text"</span>: <span class="string">"我是一个标题"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"seL"</span>: <span class="string">"ul"</span>,</span><br><span class="line">            <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"children"</span>: [</span><br><span class="line">               &#123; </span><br><span class="line">                    <span class="string">"sel"</span>: <span class="string">"li"</span></span><br><span class="line">                    <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">"text"</span>: &#123; <span class="string">"牛奶"</span> &#125;</span><br><span class="line">                &#125;，</span><br><span class="line">                &#123; </span><br><span class="line">                    <span class="string">"sel "</span>: <span class="string">"li"</span></span><br><span class="line">                    <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">"text"</span>: &#123; <span class="string">"咖啡"</span> &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">               &#123; </span><br><span class="line">                <span class="string">"seL"</span>: <span class="string">"li"</span></span><br><span class="line">                <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"text"</span> : &#123;<span class="string">"可乐”&#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">   ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p><code>区别于真实DOM</code></p><ul><li>无需手动操作 DOM，提高开发效率；</li><li>复杂场景下，防止频繁触发重绘，可以提高性能；</li><li>虚拟 DOM 实际是 JavaScript 对象，可以进行跨平台操作。</li></ul><p><code>问题</code>：数据发生改变，试图怎么更新 ?<br>当数据改变时，会触发setter，并且通过Dep.notify去通知所有订阅者Watcher(组件)，订阅者们就会调用patch方法，给真实DOM打补丁，更新相应的视图。</p><h2 id="diff-函数"><a href="#diff-函数" class="headerlink" title="diff 函数"></a>diff 函数</h2><h3 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h3><p>计算最小更新 DOM 的方式。</p><ul><li>将 DOM 抽象为虚拟 DOM ；</li><li>然后通过新旧虚拟 DOM 这两个对象的差异( Diff 算法)；</li><li>最终只把变化的部分重新渲染,提高渲染效率的过程。</li></ul><p>流程图：<br>其中包含 <code>patch</code> 函数、<code>pachVnode</code> 函数、<code>UpdateVnode</code> 函数（未详细介绍）<br><img src="https://img-blog.csdnimg.cn/3711cc3f05ca40bb97799a116ff04596.jpeg" alt="请添加图片描述"></p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>使用 snabbdom 虚拟 DOM 库 ：<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** src/index.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">'snabbdom/init'</span></span><br><span class="line"><span class="keyword">import</span> &#123; classModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/class'</span></span><br><span class="line"><span class="keyword">import</span> &#123; propsModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/props'</span></span><br><span class="line"><span class="keyword">import</span> &#123; styleModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/style'</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventListenersModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/eventlisteners'</span></span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">'snabbdom/h'</span> <span class="comment">// helper function for creating vnodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建出 patch 函数</span></span><br><span class="line"><span class="keyword">const</span> patch = init([</span><br><span class="line">  classModule,</span><br><span class="line">  propsModule,</span><br><span class="line">  styleModule,</span><br><span class="line">  eventListenersModule</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 2、使用 h 函数创建虚拟节点</span></span><br><span class="line"><span class="keyword">const</span> vnode1 = h(<span class="string">'ul'</span>, &#123;&#125;, [</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'A'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'B'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'C'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'D'</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 3.创建空的容器</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"><span class="comment">// 4.将 DOM 塞入container</span></span><br><span class="line">patch(container, vnode1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vnode2 = h(<span class="string">'ul'</span>, &#123;&#125;, [</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'A'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'B'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'C'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'D'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'E'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮时，将vnode1变为vnode2</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用最小改变 来达到 新的vnode 覆盖 旧的 vnode2</span></span><br><span class="line">  patch(vnode1, vnode2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="patch-函数"><a href="#patch-函数" class="headerlink" title="patch 函数"></a>patch 函数</h3><p>接收参数存在： element（真实 DOM ） 和 vnode（虚拟 DOM ） 两种类型<br><code>首次插入</code>：判断 key 和 sel 是相同（2种情况）</p><table><thead><tr><th></th><th>1、vnode.key 和 vnode.sel 都相同</th><th>2、vnode.key 或 vnode.sel 不同</th></tr></thead><tbody><tr><td>是否同一个Vnode</td><td>是</td><td>否</td></tr><tr><td>结果</td><td>更新(调用 <code>pachVnode</code> )</td><td>创建新的DOM，删除老的DOM</td></tr></tbody></table><h3 id="pachVnode-函数"><a href="#pachVnode-函数" class="headerlink" title="pachVnode 函数"></a>pachVnode 函数</h3><p><strong>虚拟节点 text 和 children 最多只能有一个</strong></p><ol><li>保存（旧的相关联）的 DOM 元素 eml 给新的 Vnode（eml 记录新的 Vnode 插入位置）</li><li>比较新、旧 vnode 的 children 情况（3种情况）</li></ol><table><thead><tr><th align="left"></th><th align="left">1、新 vnode === 旧 vnode（全等）</th><th align="left">2、新 Vnode 无 text</th><th align="left">3、新 Vnode 有 text</th></tr></thead><tbody><tr><td align="left">结果</td><td align="left">不需更新，return</td><td align="left">1.新、老 Vnode 都有 children，即调用（<code>updateChildren</code>）；<br>2.老 Vnode 无 children，即添加 children ；<br>3.新的无 children ，即删除 children</td><td align="left">删除 children ，更新新的 text</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍snabbdom、虚拟DOM、diff算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解Promise、Resolve、Reject、Async、Await</title>
      <link href="/2022/07/20/Promise,%20Async,%20Await/"/>
      <url>/2022/07/20/Promise,%20Async,%20Await/</url>
      
        <content type="html"><![CDATA[<p><code>摘要</code>：将异步改写为同步</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>易错题集</title>
      <link href="/2022/07/16/%E7%AC%94%E8%AF%95%E9%94%99%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/07/16/%E7%AC%94%E8%AF%95%E9%94%99%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h1><h2 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h2><h3 id="js概念与类型检测"><a href="#js概念与类型检测" class="headerlink" title="js概念与类型检测"></a>js概念与类型检测</h3><ol><li><p>以下不属于 typeof 运算符返回值的是？</p><p>A. “string”<br>B. “function”<br>C. “object”<br>D. “null”</p><blockquote><p>typeof 引用类型只能识别 function</p></blockquote></li><li><p>​</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue手写点击高亮</title>
      <link href="/2022/05/07/%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E9%AB%98%E4%BA%AE/"/>
      <url>/2022/05/07/%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E9%AB%98%E4%BA%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"chooerr-list"</span>&gt;</span><br><span class="line">      &lt;li :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;active:nowIndex === item.id&#125;"</span> </span><br><span class="line">          v-<span class="keyword">for</span>=<span class="string">"(item) in timerDate"</span> </span><br><span class="line">          :key=<span class="string">"item.id"</span> </span><br><span class="line">          @click=<span class="string">"timerHandle(item.id)"</span></span><br><span class="line">       &gt;&#123;&#123;item.value&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/1657892137824.png" alt="65789213782"></p><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">timerDate:[&#123;</span><br><span class="line">       id:<span class="number">0</span>,</span><br><span class="line">       value:<span class="string">'一个月'</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">       id:<span class="number">1</span>,</span><br><span class="line">       value:<span class="string">'三个月'</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">       id:<span class="number">2</span>,</span><br><span class="line">       value:<span class="string">'六个月'</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">       id:<span class="number">3</span>,</span><br><span class="line">       value:<span class="string">'九个月'</span></span><br><span class="line">     &#125;]</span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  timerHandle(data)&#123;</span><br><span class="line">    <span class="keyword">this</span>.nowIndex=data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>添加meta控制用户访问权限</title>
      <link href="/2022/05/07/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90/"/>
      <url>/2022/05/07/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="步骤梳理"><a href="#步骤梳理" class="headerlink" title="步骤梳理"></a>步骤梳理</h1><ol><li>在路由模块 router 添加 meta 对象，设置权限属性</li><li>路由守卫 beforeEach ( ) 设置路由跳转逻辑</li></ol><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p><code>以home首页为例做介绍</code></p><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p>思路：每个组件实例存在一个 $route 对象，是一个局部对象，存储组件路由信息： name、meta、path、hash、query、params、fullPath 等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      isLogin: <span class="literal">true</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;，</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    name: <span class="string">'Login'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/views/login.vue"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><p>思路：使用前置守卫<font color="green"> beforeEach </font>能在路由跳转<code>前</code>进行拦截的特性，对添加了 meta.isLogin==true 权限的路由进行判断，如果本地存储有 token 值，则next() 通行，否则拦截的路由将跳转到 login 页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.meta.isLogin) &#123;</span><br><span class="line">    <span class="keyword">let</span> token = store.state.login.user.token</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(&#123;</span><br><span class="line">        name: <span class="string">"Login"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>使用 jsonwebtoken（JWT）生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JWT = <span class="built_in">require</span>(<span class="string">"jsonwebtoken"</span>)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/login"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, pass &#125; = req.body;</span><br><span class="line">  <span class="comment">//sqlClient方法实现连接数据库并返回查询结果，并回调函数响应数据</span></span><br><span class="line">  sqlClient(<span class="string">"select * from user where username=? and password=?"</span>, [username, pass], result =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> token = JWT.sign(username, <span class="string">'^8^'</span>)</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        token,</span><br><span class="line">        status: <span class="number">200</span>,</span><br><span class="line">        username</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        ststus: <span class="number">401</span>,</span><br><span class="line">        mgs: <span class="string">'登陆失败'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>请求的状态码那些事</title>
      <link href="/2022/04/10/ajax_readyState/"/>
      <url>/2022/04/10/ajax_readyState/</url>
      
        <content type="html"><![CDATA[<h1 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0（未初始化）: 请求未初始化，还没有调用send()方法</span><br><span class="line">1（载入）: 服务器连接已建立，已调用send()方法，正在发送请求</span><br><span class="line">2（载入完成）: 请求已接收 接收到了响应头，send()方法执行完成，已经接收到全部响应内容</span><br><span class="line">3（交互）: 请求处理中 正在下载响应体</span><br><span class="line">4（完成）: 请求已完成，且响应已就绪</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 面试</title>
      <link href="/2022/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><h4 id="什么是-BFC"><a href="#什么是-BFC" class="headerlink" title="什么是 BFC ?"></a>什么是 BFC ?</h4><p>BFC （block formatting context）块级格式化上下文，属于三种文档流（普通流、浮动流、定位流）中的<code>普通流</code>，是页面渲染的独立容器，内部元素的渲染不会影响到外界</p><h4 id="形成-BFC-的条件？"><a href="#形成-BFC-的条件？" class="headerlink" title="形成 BFC 的条件？"></a>形成 BFC 的条件？</h4><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li>浮动元素（<code>float</code> 值不是 <code>none</code>）</li><li>定位元素（<code>position</code> 为 <code>absolute</code> / <code>flxed</code>）</li><li>块级元素（<code>display</code> 为 <code>inline-block</code>）</li><li>display 为：<code>table</code> 、<code>inline-table</code>、<code>table-cell</code> 、<code>table-caption</code> 、<code>flex</code>、<code>inline-flex</code>、<code>grid</code>、<code>inline-grid</code></li><li>overflow 值不为 visible （为<code>auto</code>、<code>scroll</code>、<code>hidden</code>）</li><li>……</li></ul><h4 id="BFC-的渲染规则"><a href="#BFC-的渲染规则" class="headerlink" title="BFC 的渲染规则"></a>BFC 的渲染规则</h4><ul><li>不同盒子在同一个 BFC 垂直方向边距重叠</li><li>BFC 区域不会与浮动盒子重叠</li><li>计算 BFC 高度的时候，浮动元素参与计算</li></ul><h4 id="BFC-应用场景"><a href="#BFC-应用场景" class="headerlink" title="BFC 应用场景"></a>BFC 应用场景</h4><ul><li>防止浮动导致的父盒子高度为 0</li><li>避免外边距重叠（使用不同 BFC 渲染）</li></ul><h3 id="绘制特殊图形"><a href="#绘制特殊图形" class="headerlink" title="绘制特殊图形"></a>绘制特殊图形</h3><h4 id="border-绘制三角形"><a href="#border-绘制三角形" class="headerlink" title="border 绘制三角形"></a>border 绘制三角形</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .triangle&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border: 50px solid;</span><br><span class="line">    &#x2F;&#x2F; 四个参数对应 ：上 右 下 左</span><br><span class="line">border-color: transparent transparent #ccc transparent;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;triangle&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>注：是一个三角形</p><h4 id="skew-绘制平行四边形"><a href="#skew-绘制平行四边形" class="headerlink" title="skew 绘制平行四边形"></a>skew 绘制平行四边形</h4><p>利用 skew 特性，参数一：x 轴倾斜角度，参数二：y 轴倾斜角度</p><ul><li>skew ( x-angle , y-angle ) 定义沿着 X 和 Y 轴的 2D 倾斜转换。</li><li>skewX ( angle ) 定义沿着 X 轴的 2D 倾斜转换。</li><li>skewY ( angle ) 定义沿着 Y 轴的 2D 倾斜转换。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .parallel &#123;</span><br><span class="line">    margin-top: 50px;</span><br><span class="line">    margin-left: 50px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: red;</span><br><span class="line">    transform: skew(-20deg, 0);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;parallel&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="用-DIV-绘制五角星"><a href="#用-DIV-绘制五角星" class="headerlink" title="用 DIV 绘制五角星"></a>用 DIV 绘制五角星</h4><p>思路：用 border 绘制 3 个三角形，其中 2 个三角形旋转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #star &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 200px auto;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red transparent;</span><br><span class="line">    border-width: 70px 100px;</span><br><span class="line">    transform: rotate(35deg);</span><br><span class="line">    &#125;</span><br><span class="line">    #star::before &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    content: &#39;&#39;;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    top: -128px;</span><br><span class="line">    left: -95px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red transparent;</span><br><span class="line">    border-width: 80px 30px;</span><br><span class="line">    transform: rotate(-35deg);</span><br><span class="line">    &#125;</span><br><span class="line">    #star::after &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    content: &#39;&#39;;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    top: -45px;</span><br><span class="line">    left: -140px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red transparent;</span><br><span class="line">    border-width: 70px 100px;</span><br><span class="line">    transform: rotate(-70deg);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;star&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="原始类型、引用类新型有哪些？"><a href="#原始类型、引用类新型有哪些？" class="headerlink" title="原始类型、引用类新型有哪些？"></a>原始类型、引用类新型有哪些？</h4><p>原始（基本）数据类型有 7 种：</p><ul><li><input disabled="" type="checkbox"> Number</li><li><input disabled="" type="checkbox"> Boolean</li><li><input disabled="" type="checkbox"> String</li><li><input disabled="" type="checkbox"> null</li><li><input disabled="" type="checkbox"> undefined</li><li><input disabled="" type="checkbox"> Symbol</li><li><input disabled="" type="checkbox"> BigInt</li></ul><p>引用类型3种：</p><ul><li><input disabled="" type="checkbox"> 对象类型 Object ：普通对象 Object 、日期对象 Data</li><li><input disabled="" type="checkbox"> 数组类型 Array</li><li><input disabled="" type="checkbox"> 函数类型 Function ：数学函数 Math、其他函数对象 Function</li></ul><h4 id="说出以下代码运行结果和原因"><a href="#说出以下代码运行结果和原因" class="headerlink" title="说出以下代码运行结果和原因"></a>说出以下代码运行结果和原因</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">person</span>)</span>&#123;</span><br><span class="line">       person.age = <span class="number">26</span></span><br><span class="line">       person = &#123;</span><br><span class="line">           name:<span class="string">'hh'</span></span><br><span class="line">           age:<span class="string">'18'</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> person</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> p1 = &#123;</span><br><span class="line">         name:<span class="string">'ff'</span></span><br><span class="line">         age:<span class="string">'20'</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> p2 = test(p1)</span><br><span class="line">   <span class="built_in">console</span>.log(p1) <span class="comment">// --&gt;</span></span><br><span class="line">   <span class="built_in">console</span>.log(p2) <span class="comment">// --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>结果:</strong></p><p>p1：{name: “ff”, age: 26}<br>p2：{name: “hh”, age: 18}</p><p><strong>原因：</strong><br>引用类型作为实参，在函数传参时传递的是内存地址值，p1 将地址传递给 person，person 更改了 p1 引用地址中的内容，又给其重新分配引用地址，并将地址值传递给 p2 。</p><h4 id="null-是对象吗，为什么？"><a href="#null-是对象吗，为什么？" class="headerlink" title="null 是对象吗，为什么？"></a>null 是对象吗，为什么？</h4><p><strong>结论：</strong><br>null 不是对象</p><p><strong>原因：</strong><br>虽然 typeof 测试 null 的类型输出为 Object，但是这是 JS 的一个 bug ，因为 JS 初创时使用的是 32 位系统，考虑到性能，JS 采用低位存储变量的类型，对象类型的二进制是以 000 开头的，而 null 的二进制是全 0，则 typeof 输出 Object 的错误结果</p><h4 id="‘1’-toString-为什么能调用？"><a href="#‘1’-toString-为什么能调用？" class="headerlink" title="‘1’.toString()为什么能调用？"></a>‘1’.toString()为什么能调用？</h4><p>虽然toString()是对象方法，但是因为<strong>基本包装类型</strong>的特性，该语句执行其实做了几件事：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new String（'1'） 可用，ES6不建议使用new关键字创建基本类型的包装类</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Object</span>（<span class="string">'1'</span>） </span><br><span class="line">s.toString ()</span><br><span class="line">s = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>其中三种基本类型：Boolean，Number，String又是基本包装类型。基本包装类型是将简单数据类型 包装成 复杂数据类型。因此可以调用系统方法。<br>第一步：创建对象实例<br>第二步：调用对象方法<br>第三步：执行完对象方法立即销毁对象</p><h4 id="0-1-0-2-0-3-，为什么？"><a href="#0-1-0-2-0-3-，为什么？" class="headerlink" title="0.1+0.2 != 0.3 ，为什么？"></a>0.1+0.2 != 0.3 ，为什么？</h4><p>浮点数 0.1 和 0.2 转为二进制时，是无限循环的值，计算机因为资源有限将其表示为近似值，因此出现精度损失。最后将相加的结果再转为10进制输出，结果为 0.30000000000000004</p><h4 id="什么是-BigInt"><a href="#什么是-BigInt" class="headerlink" title="什么是 BigInt"></a>什么是 BigInt</h4><p>BigInt 是第二种数字数据类型，当整数超过Number支持的范围时使用，该数据类型允许我们安全的使用大整数执行算术操作，能表示高分辨率时间戳，使用大整数 ID 等等，而不用调用库</p><h4 id="为什么需要-BigInt"><a href="#为什么需要-BigInt" class="headerlink" title="为什么需要 BigInt"></a>为什么需要 BigInt</h4><p>因为 Number 无法精确表示非常大的整数，在JS中，所有数字都是双精度64位浮点数表示，确切的说，JS中Number类型只能安全表示-(2^53-1)~(2^53-1)范围的数值，会将非常大的整数四舍五入，在任何超出此范围的整数都会失去精度：</p><blockquote><p>console.log(9999 9999 9999 999) -&gt; 1000 0000 0000 0000<br>console.log(9007199254740992 === 9007199254740993) -&gt;true</p></blockquote><p>Math.pow (2, 53) 竟然与 Math.pow(2, 53) + 1 相等，则安全范围是-(2^53-1)~(2^53-1)</p><h4 id="如何创建并使用-BigInt"><a href="#如何创建并使用-BigInt" class="headerlink" title="如何创建并使用 BigInt?"></a>如何创建并使用 BigInt?</h4><p>两种方式：</p><ul><li><input disabled="" type="checkbox"> 在数字末尾添加n就可以<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740995n</span>) <span class="comment">//9007199254740995n</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740995</span>) <span class="comment">//9007199254740996</span></span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 使用BigInt()构造函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInt(<span class="string">"9007199254740995"</span>)   <span class="comment">//9007199254740995n</span></span><br></pre></td></tr></table></figure>简单使用：<blockquote><p>10n + 20n; &emsp; // 30n<br>10n - 20n;  &emsp; //-10n<br>+10n;      &emsp;&emsp; //TypeError<br>-10n;        &emsp;&emsp; //-10n<br>10n* 20n    &emsp;//200n<br>20n / 10n   &emsp;//2n<br>23n % 10n &emsp;//3n<br>10n ** 3n  &emsp;//1000n</p></blockquote></li></ul><blockquote><p>const x= 10n;<br>++x; &emsp;// 11n<br>–x;  &emsp; // 9n<br>console.log(x)  // bigint</p></blockquote><p><strong>注意：</strong></p><p>1) BigInt不支持一元加号运算符，这可能是某些程序可能依赖于+始终生成Number类型，或者抛出异常，另外，更改+的行为也会破坏asm.js代码。<br>2) 不允许BigInt和Number之间进行混合操作，因为隐式类型转换可能会丢失信息，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> + <span class="number">10n</span>; <span class="comment">// → TypeError</span></span><br></pre></td></tr></table></figure><p>3) 不能将BigInt传递给Web API和JS内置方法，这些函数需要Number类型。<br>4) 当Boolean和BigInt相遇时，和Number类似，除了0n为false，其他值为true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">0n</span>)&#123;</span><br><span class="line"><span class="comment">//条件判断为false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3n</span>)&#123;</span><br><span class="line"><span class="comment">//条件为true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5) 元素都为BigInt的数组都可以进行sort<br>6) BigInt可以进行位运算</p><h4 id="typeof-是否能正确判断类型？"><a href="#typeof-是否能正确判断类型？" class="headerlink" title="typeof 是否能正确判断类型？"></a>typeof 是否能正确判断类型？</h4><p>对于<strong>原始类型</strong>来说，除了null都可以调用typeof显示正确的类型。</p><blockquote><p>typeof 1 // ‘number’<br>typeof ‘1’ // ‘string’<br>typeof undefined // ‘undefined’<br>typeof true // ‘boolean’<br>typeof Symbol() // ‘symbol’</p></blockquote><p>对于<strong>引用数据</strong>类型，除了function类型，其他都输出Object</p><blockquote><p>typeof [] // ‘Object’<br>typeof {} //‘Object<br>typeof console.log //‘function’</p></blockquote><p>因此采用typeof判断对象数据类型不合适，而采用instanceof会更好。因为instanceof运算符用来检测构造函数的prototype是否出现在某个实例的<strong>proto</strong>对象原型上。</p><h4 id="instanceof-能否判断基本数据类型？"><a href="#instanceof-能否判断基本数据类型？" class="headerlink" title="instanceof 能否判断基本数据类型？"></a>instanceof 能否判断基本数据类型？</h4><p>instanceof能判断，但是不能直接使用，需要自定义instanceof将其转换为使用typeof判断</p><p>方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Symbol.hasInstance ：用于判断某对象是否为某构造器的实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimitiveNumber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance] (x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'number'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">111</span> <span class="keyword">instanceof</span> PrimitiveNumber )</span><br></pre></td></tr></table></figure><h4 id="能不能手动实现一下-instanceof-的功能？"><a href="#能不能手动实现一下-instanceof-的功能？" class="headerlink" title="能不能手动实现一下 instanceof 的功能？"></a>能不能手动实现一下 instanceof 的功能？</h4><p><strong>核心：</strong>原型链向上查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function myInstanceof (left,right)&#123;</span><br><span class="line">    &#x2F;&#x2F;基本数据类型直接返回false</span><br><span class="line">    if ( typeof left !&#x3D;&#x3D; &#39;object&#39; || left &#x3D;&#x3D;&#x3D;null )</span><br><span class="line">        return false;</span><br><span class="line">    &#x2F;&#x2F; getPrototypeof是object对象自带的一个方法，能拿到参数的原型对象</span><br><span class="line">    left proto &#x3D; object.getPrototypeof (false);</span><br><span class="line">    while (true)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;查找到尽头，还没找到</span><br><span class="line">        if（proto &#x3D;&#x3D; null）return false;</span><br><span class="line">        &#x2F;&#x2F;找到相同原型对象</span><br><span class="line">        if(proto &#x3D;&#x3D; right.prototype) return true;</span><br><span class="line">        proto &#x3D; object.getPrototypeof (proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础知识题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python数据处理</title>
      <link href="/2021/09/30/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/09/30/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p> 1、行列基本操作</p><ul><li><p>取指定行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_GD = df1[df1[<span class="string">'city'</span>] == <span class="string">"广东"</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除某列为指定值的所有行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df=df[~df[<span class="string">'Year'</span>].isin([<span class="string">'2111'</span>,<span class="string">'9'</span>,<span class="string">'2105'</span>,<span class="string">'板塔结合'</span>,<span class="string">'NaN'</span>,<span class="string">'板楼'</span>,<span class="string">'暂无数据'</span>])]</span><br></pre></td></tr></table></figure></li><li><p>删除某列 为NAN（空值）的行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df[df[<span class="string">'Year'</span>].notnull()]</span><br></pre></td></tr></table></figure></li><li><p>将非连续性数据分箱(分组)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'Year'</span>] = pd.qcut(df[<span class="string">'Year'</span>],<span class="number">8</span>).astype(object)</span><br></pre></td></tr></table></figure></li><li><p>改变某列数值类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'Year'</span>] = df[<span class="string">'Year'</span>].astype(<span class="string">'int'</span>)</span><br></pre></td></tr></table></figure><p> 注意：存在空值或者字符串需要删除才能转为int/float</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Arry封装栈、队列</title>
      <link href="/2021/08/07/%E6%A0%88/"/>
      <url>/2021/08/07/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p><code>栈和队列都可以基于数组、链表封装，本文只基于数组封装</code></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="封装栈"><a href="#封装栈" class="headerlink" title="封装栈"></a>封装栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//push()添加一个新元素到栈顶位置</span></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//pop()删除栈顶元素</span></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//peek()查看栈顶元素，不移除</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//isEmpty()栈内是否有元素 真为true 返回false</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//size()返回栈元素个数</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Bin2</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> number = num</span><br><span class="line">  <span class="comment">//1.创建栈结构</span></span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="comment">//2.循环取余</span></span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = num % <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 想下取整 相当于整除</span></span><br><span class="line">    num = <span class="built_in">Math</span>.floor(num / <span class="number">2</span>)</span><br><span class="line">    stack.push(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.拼接字符串</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    str += stack.pop()</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(number, <span class="string">'转化为二进制是'</span>, str)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">import</span> &#123; Stack, Bin2 &#125; <span class="keyword">from</span> <span class="string">'./stack'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------stack----------------'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stack.push(<span class="string">'aaa'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(stack.push(<span class="number">222</span>))</span><br><span class="line"><span class="built_in">console</span>.log(stack.push(<span class="string">'ccc'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'长度:'</span>, stack.size()) <span class="comment">// 长度: 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'栈:'</span>, stack.items) <span class="comment">//栈: (3) ['aaa', 222, 'ccc']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'栈顶'</span>, stack.peek()) <span class="comment">//栈顶 ccc</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除栈顶'</span>, stack.pop()) <span class="comment">//删除栈顶 ccc</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.items) <span class="comment">//(2) ['aaa', 222]</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty()) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Bin2(<span class="number">100</span>) <span class="comment">//100 '转化为二进制是' '1100100'</span></span><br></pre></td></tr></table></figure><p><code>知识来源于哔哩哔哩up主：coderwhy</code></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装队列  :打印机</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue() 像队列尾部添加一个或多个新的(项)</span></span><br><span class="line">  enqueue(element) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// dequeue() 移除队首元素,并返回被移除元素</span></span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// front()返回队首元素</span></span><br><span class="line">  front() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//isEmpty() 是否为空</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//size()队列包含的元素个数</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用封装的队列"><a href="#调用封装的队列" class="headerlink" title="调用封装的队列"></a>调用封装的队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Queue &#125; <span class="keyword">from</span> <span class="string">'./queue'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------queue--------------'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'222'</span>)</span><br><span class="line">queue.enqueue(<span class="number">2</span>)</span><br><span class="line">queue.enqueue(<span class="number">3</span>)</span><br><span class="line">queue.enqueue(<span class="string">'111'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.items)</span><br><span class="line"><span class="built_in">console</span>.log(queue.front())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C 语言中的不同数据类型运算问题</title>
      <link href="/2020/09/14/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%BF%90%E7%AE%97/"/>
      <url>/2020/09/14/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>不同类型的数据进行运算，如果一个运算符两侧的数据类型不同，需要先自动进行类型转换，使两者具有同一类型，然后进行运算，现将规律总结如下：</p><blockquote><p>系统有默认的转化规则，就是从精度底的转化为精度高的，避免计算时精度的丢失 具体转换规则如下 char  –&gt; short  –&gt; int —&gt; unsigned  –&gt; long –&gt; unsigned long –&gt; float –&gt; double</p></blockquote><ol><li><p>+、-、 *、 /运算的两个数中有一个数为float或double型，结果是double型，因为系统将所有float型数据都先转换为double型，然后进行运算；</p></li><li><p>若int型与float或double型数据进行运算，先将int型和float型转换为double型，然后进行运算，结果为double型；</p></li><li><p>Char型与int型数据进行运算，就是把字符的ASCII码与整型数据进行运算;</p><pre><code>如：20+&apos;B&apos;=20+66=86</code></pre></li><li><p>两个int型相除，不管是否有余数，结果都为整型；如：5/10 输出是整数部分：0</p></li><li><p>强制类型转换的一般形式为：（类型名）（表达式），将表达式整体的输出结果转换，若写成(int)x+y，则是将x先转换为整型，再与y想加，</p></li></ol><blockquote><p>如上试中： 5/10的输出结果为：0</p><pre><code>  5.0/10的输出结果为：0.5  (fioat)(5/10)的输出结果为：0.00（float）5/10的输出结果为：0.5</code></pre><p>原文<a href="https://zhidao.baidu.com/question/1836994548785755700.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/1836994548785755700.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C 语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo安装、部署</title>
      <link href="/2020/09/14/hello-world/"/>
      <url>/2020/09/14/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="主要流程如下："><a href="#主要流程如下：" class="headerlink" title="主要流程如下："></a>主要流程如下：</h2><ul><li>Node环境搭建</li><li>Hexo安装</li><li>Git环境搭建</li><li>将项目部署到github</li></ul><h2 id="Node-js安装及环境搭建"><a href="#Node-js安装及环境搭建" class="headerlink" title="Node.js安装及环境搭建"></a>Node.js安装及环境搭建</h2><ol><li><p>点击此处<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node下载界面</a>选择适合自己电脑的版本</p></li><li><p>然后一直点下一步直到安装完毕，安装完毕后输入Win+R打开命令框</p></li><li><p>按照下面命令在命令窗口（cmd）执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">#显示版本号说明Node.js安装成功</span><br><span class="line">npm -v</span><br><span class="line">#显示版本号说明npm安装成功</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org </span><br><span class="line"># 由于服务器原因可以配置淘宝镜像来快速下载和安装需要的插件</span><br><span class="line">npm config get registry</span><br><span class="line"># 检查镜像是否配置成功</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>在配置好Node环境之后就可以开始安装博客系统了</p><p>1.按照下面命令在命令窗口（cmd）执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g </span><br><span class="line"><span class="comment"># 下载安装hexo</span></span><br><span class="line">hexo -v </span><br><span class="line"><span class="comment"># 检查版本号来检验是否安装成功</span></span><br></pre></td></tr></table></figure><p>2.选择你想要放博客文件的盘</p><p><img src="/img/T1.png" alt="创建blog文件"></p><p>3.执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">#创建blog文件夹来作为你的博客资源目录</span><br><span class="line">cd blog</span><br><span class="line">#进入你的博客资源目录</span><br><span class="line">npm install</span><br><span class="line">#安装hexo需要的依赖</span><br></pre></td></tr></table></figure><p>4.介绍hexo博客的文件（不操作）</p><blockquote><p>node_modules：依赖包</p><p>public：存放生成的页面    //到此步骤暂时没有public文件</p><p>theme：存放博客主题</p><p>source：文件夹下的_posts用来存放文章</p><p>_config.yml：博客的配置文件</p></blockquote><p>5.在本地服务器浏览Hexo博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">#删除静态资源文件public</span><br><span class="line">$ hexo generate</span><br><span class="line">#生成静态文件public</span><br><span class="line">$ hexo server</span><br><span class="line">#用于启动本地服务器</span><br></pre></td></tr></table></figure><p>完成后，启动浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以看到你的博客了</p><p><img src="/img/T2.png" alt="Hexo默认主题"></p><h2 id="安装Git-Bash及创建Github仓库"><a href="#安装Git-Bash及创建Github仓库" class="headerlink" title="安装Git Bash及创建Github仓库"></a>安装Git Bash及创建Github仓库</h2><p>使用Git可以将本地文件部署到github</p><p>1.点击此处<a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载Git Bash</a>,并检查安装情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line"><span class="comment">#检查Git是否安装成功</span></span><br></pre></td></tr></table></figure><p>2.我们可以将我们的博客部署到本地服务器、购买的阿里云服务器、github或者码云上，这里我们选择github</p><ul><li>先注册<a href="https://github.com/" target="_blank" rel="noopener">Github账户</a>，再创建一个和你用户名相同的仓库，<a href="http://后面加.github.io/" target="_blank" rel="noopener">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://也就是xxxx.github.io/" target="_blank" rel="noopener">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。</li></ul><p><img src="/img/T3.png" alt="生成SSH添加到Github"></p><ul><li>生成SSH密钥添加到Github</li></ul><p>在博客文件根目录比如：f:\blog下使用git bash here执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">#youremail注册GitHub的的邮箱</span><br></pre></td></tr></table></figure><p>然后一直回车知道结束，类似：</p><blockquote><p>$ ssh-keygen -t rsa -C “<a href="mailto:760461549@qq.com">760461549@qq.com</a>“</p><p>Generating public/private rsa key pair.</p><p>Enter file in which to save the key (/c/Users/hp/.ssh/id_rsa):</p><p>Enter passphrase (empty for no passphrase):</p><p>Enter same passphrase again:</p><p>Your identification has been saved in /c/Users/hp/.ssh/id_rsa.</p><p>Your public key has been saved in /c/Users/hp/.ssh/id_rsa.pub.</p><p>The key fingerprint is:</p><p>SHA256:QzOyG/Q+O6Xr8zRdr5pc7SZKyrCpkAe0O1lDXpCnIgU <a href="mailto:760461549@qq.com">760461549@qq.com</a></p><p>The key’s randomart image is:</p><p>。。。。。。</p></blockquote><p>将会在C:\Users\XXX.ssh下生成id_rsa（私钥）和id_rsa.pub(公钥)文件，打开公钥文件全选复制内容，去自己的github账户点击右上角头像选择<strong>settings</strong>，然后选择<strong>SSH Keys</strong>点<code>Add SSH Key</code>,填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容，这样我们就能看到已经添加的Key。</p><ul><li><p>测试本地仓库是否连接到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>当你输入以上命令，会有一段警告代码，是正常的，输入yes即可。如：</p><blockquote><p>The authenticity of host ‘github.com (13.229.188.59)’ can’t be established.</p><p>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</p><p>Are you sure you want to continue connecting (yes/no)? yes</p><p>Warning: Permanently added ‘github.com,13.229.188.59’ (RSA) to the list of known hosts.</p></blockquote><p>如果没有提示成功，把C盘下.ssh删了重来一遍。</p></li></ul><h2 id="将项目部署到github"><a href="#将项目部署到github" class="headerlink" title="将项目部署到github"></a>将项目部署到github</h2><p>1.这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">#YourgithubName就是你的GitHub账户</span><br></pre></td></tr></table></figure><p>2.安装deploy-git才可以部署到Github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.在博客根目录使用git bash here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">#清除静态资源文件夹（public文件）</span><br><span class="line">hexo generate</span><br><span class="line">#生成新的静态文件（public文件），生成这个文件是根据&#x2F;source文件中的内容生成</span><br><span class="line">hexo server</span><br><span class="line">#启动本地服务器，在网址栏输入localhost:4000,查看本地更新情况</span><br><span class="line">hexo deploy</span><br><span class="line">#部署到github仓库</span><br></pre></td></tr></table></figure><p>当<code>hexo d</code>成功后，你可以在网址上输入<code>https://xxx.github.io/</code>来访问你的博客主页。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>域名</title>
      <link href="/2020/09/14/DNS/"/>
      <url>/2020/09/14/DNS/</url>
      
        <content type="html"><![CDATA[<h2 id="注册和配置域名："><a href="#注册和配置域名：" class="headerlink" title="注册和配置域名："></a>注册和配置域名：</h2><ol><li><p>第一步：点击这里领券，暂时有活动，<a href="https://shimo.im/docs/TGyCppPdCdyHTKQq/" target="_blank" rel="noopener">白嫖腾讯云俩top域名各一年!</a>。</p><p>第二步：<a href="https://shimo.im/docs/TGyCppPdCdyHTKQq/" target="_blank" rel="noopener">注册域名</a></p></li><li><p>更改域名解析网址，进入万网<strong>域名控制台–&gt;域名解析–&gt;添加解析</strong></p><p>如下图：</p><p><img src="/img/T4.jpg" alt=""></p><p>​</p><blockquote><p>如果出现DNS状态报错：DNS服务器错误，那就需要将域名DNS改为DNSPod,状态为正常解析才可以顺利访问网站</p><p>如下图：</p><p><img src="/img/T5.png" alt=""></p></blockquote></li></ol><h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><ol><li>去博客文件夹\source下新建文本文件,命名为CNAME,不需要后缀</li><li>用文本编辑器打开并添加购买域名,如下图:</li></ol><p>​       <img src="/img/T6.png" alt=""></p><h2 id="设置项目的GitHub-Pages"><a href="#设置项目的GitHub-Pages" class="headerlink" title="设置项目的GitHub Pages"></a>设置项目的GitHub Pages</h2><ol><li><p>在 github 上面，打开 <strong>username.github.io</strong> 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。比如：</p><p><img src="/img/T7.png" alt=""></p></li></ol><h2 id="重新部署GitHub"><a href="#重新部署GitHub" class="headerlink" title="重新部署GitHub"></a>重新部署GitHub</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">#删除public</span><br><span class="line">hexo g</span><br><span class="line">#生成新的静态文件（public文件），生成这个文件是根据&#x2F;source文件中的内容生成</span><br><span class="line">hexo d</span><br><span class="line">#部署</span><br></pre></td></tr></table></figure><p>耐心等待,一开始可能会出现电脑端可以访问但手机不能访问,需要大概十多分钟,就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署</title>
      <link href="/2020/09/14/coding/"/>
      <url>/2020/09/14/coding/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>[^GitHub 的分发加速网络的域名遭到 DNS 污染。由于 GitHub 的加速分发 CDN 域名 assets-cdn.github.com 遭到 DNS 污染，导致无法连接使用 GitHub 的加速分发服务器，才使得中国大陆访问速度很慢。那么现在hexo部署到coding+github上，实现境内访问coding，境外访问github]: </p><hr><h2 id="创建coding项目"><a href="#创建coding项目" class="headerlink" title="创建coding项目"></a>创建coding项目</h2><p>1、进入 <a href="https://coding.net/" target="_blank" rel="noopener">Coding 官网</a>点击个人版登陆，注册一个并登录，并点击创建项目</p><p>【图片】</p><p>项目名称建议和用户名一致，项目描述可以不用写</p><h2 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h2><p>[^CODING 支持使用 SSH 协议来访问 Git 仓库，提供账户 SSH 公钥和项目 SSH 公钥设置。]: </p><p>1、配置SSH公钥的方法和GitHub Pages的方式差不多，直接使用Github一样的密钥即可：</p><p>[点击头像]-&gt;[个人设置]-&gt;[SSH公钥]-&gt;[新增公钥]</p><p>【图片】</p><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><p>1、进入coding项目,在右下角选择连接方式，选择SSH方式（推荐），一键赋值。</p><p>【图片】</p><p>2、找到blog根目录的_config.yml，使用快捷键ctrl+end定位到最后，将部署信息改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">    github: git@github.com:XXXXXX.github.io.git&#x2F;&#x2F;GitHub的SSH地址</span><br><span class="line">    coding: git@e.coding.net:XXXXXXX.git&#x2F;&#x2F;coding的SSH地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="开启静态网站"><a href="#开启静态网站" class="headerlink" title="开启静态网站"></a>开启静态网站</h2><p>[^此步需要用到持续部署下的静态网站功能，所以需要开启该功能]: </p><p>1、进入coding项目，在左下角选择[项目设置]-&gt;[项目与成员]-&gt;[功能开关]-&gt;[持续部署]</p><p>【图片】</p><p>2、点击【立即部署】你会看到你的访问地址</p><p>到这里博客部署已经结束了，现在可以使用该地址访问自己的博客了。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>[^到这一步，必须去买域名或者看上一个博客白嫖域名]: </p><p>1、首先去 <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNS官网</a>添加域名解析地址，将GitHub的解析路线改为境外，这样在境外就会访问GitHub，境内改为coding的访问地址。</p><p>【图片】</p><p>2、去coding项目，点击静态网站，点击右上角的【设置】，申请绑定新域名来代替网站的访问地址。注意：SSL/TLS安全证书这里有个坑,就是如果你之前已经创建绑定过github的代码仓库,那么直接生成这个证书是生成不了的,他会显示失败的状态，没有申请到 SSL 证书，当你访问你的网站时，浏览器就会提示不是安全连接。解决办法是：把GitHub的解析暂停，然后申请，最后开启GitHub的解析。最后开启强制HTTPS访问。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
