<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>this 指向和相关函数介绍</title>
      <link href="/2022/08/05/this%20%E6%8C%87%E5%90%91%E5%92%8C%E8%83%BD%E6%94%B9%E5%8F%98%E6%8C%87%E5%90%91%E7%9A%84%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/08/05/this%20%E6%8C%87%E5%90%91%E5%92%8C%E8%83%BD%E6%94%B9%E5%8F%98%E6%8C%87%E5%90%91%E7%9A%84%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>摘要 ：与其他语言相比，函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别。<code>以下都是在非严格模式下</code></p><hr><h1 id="this-指向分为以下几种："><a href="#this-指向分为以下几种：" class="headerlink" title="this 指向分为以下几种："></a>this 指向分为以下几种：</h1><h2 id="A-全局环境"><a href="#A-全局环境" class="headerlink" title="A. 全局环境"></a><code>A.</code> 全局环境</h2><p>   <code>this</code> 都指向全局对象 <code>window</code>。</p><p>   <strong>变量</strong>    <img src="https://img-blog.csdnimg.cn/70308cc7977c4ac58f613061f0bef174.png" alt="在这里插入图片描述">   <strong>函数内部</strong>   <img src="https://img-blog.csdnimg.cn/dccd7229c38e4a99a45aa346bc1cfda1.png" alt=""></p><h2 id="B-构造函数"><a href="#B-构造函数" class="headerlink" title="B.  构造函数"></a><code>B.</code>  构造函数</h2><p>构造函数中的 <code>this</code>，指的是<code>实例对象</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Obj = <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.p = p;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Obj(<span class="string">'Hello World!'</span>);</span><br><span class="line">o.p  <span class="comment">//'Hello World!'</span></span><br></pre></td></tr></table></figure><h2 id="C-对象的方法"><a href="#C-对象的方法" class="headerlink" title="C. 对象的方法"></a><code>C.</code> 对象的方法</h2><p>  如果对象的方法里面包含<code>this</code>，<code>this</code>的指向就是方法运行时所在的对象。该方法赋值给另一个对象，就会改变<code>this</code>的指向。<br>  <strong>简单对象方法</strong><img src="https://img-blog.csdnimg.cn/d78ea66bcf72478295e064f22ec55088.png" alt="在这里插入图片描述"><br>   <strong>事件</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 指向 btn 这个对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>赋值</strong><br><img src="https://img-blog.csdnimg.cn/66d6976941d74e0b85683c99f8615f87.png" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  b: &#123;</span><br><span class="line">    m: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.p);</span><br><span class="line">    &#125;,</span><br><span class="line">    p: <span class="string">'Hello'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = a.b.m;</span><br><span class="line">hello() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>m</code> 是多层对象内部的一个方法。为求简便，将其赋值给<code>hello</code>变量，结果调用时，this指向了顶层对象。为了避免这个问题，可以只将m所在的对象赋值给<code>hello</code>，这样调用时，this 的指向就不会变。<br>改成这个就行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = a.b;</span><br><span class="line">hello.m() <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><p><strong>立即执行函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">(<span class="number">1</span>, obj.foo)() <span class="comment">// window</span></span><br></pre></td></tr></table></figure><h1 id="绑定-this-的方法"><a href="#绑定-this-的方法" class="headerlink" title="绑定 this 的方法"></a>绑定 this 的方法</h1><p>JavaScript 提供了<code>call</code>、<code>apply</code>、<code>bind</code>这三个方法，来切换/固定<code>this</code>的指向。</p><h2 id="Function-prototype-call"><a href="#Function-prototype-call" class="headerlink" title="Function.prototype.call()"></a>Function.prototype.call()</h2><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">call</span>(<span class="params">thisArg, arg1, arg2, ...</span>)</span></span><br></pre></td></tr></table></figure><p><code>call</code>方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">f() === <span class="built_in">window</span> <span class="comment">// true</span></span><br><span class="line">f.call(obj) === obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>call</code> 将 f 函数的 this 指向对象 <code>obj</code>，然后在对象 <code>obj</code> 的作用域中运行函数 <code>f</code>。<br><code>call</code> 方法的参数，应该是一个对象。如果参数为<code>空</code>、<code>null</code> 和<code>undefined</code>，则<strong>默认</strong>传入<strong>全局对象</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ar n = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">n</span>: <span class="number">456</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.call() <span class="comment">// 123</span></span><br><span class="line">a.call(<span class="literal">null</span>) <span class="comment">// 123</span></span><br><span class="line">a.call(<span class="literal">undefined</span>) <span class="comment">// 123</span></span><br><span class="line">a.call(<span class="built_in">window</span>) <span class="comment">// 123</span></span><br><span class="line">a.call(obj) <span class="comment">// 456</span></span><br></pre></td></tr></table></figure><p>call方法还可以接受多个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func.apply(thisArg)</span><br><span class="line">func.apply(thisArg, argsArray)</span><br><span class="line"><span class="comment">// call的第一个参数就是 this 所要指向的那个对象，后面的参数则是函数 func 调用时所需的参数。</span></span><br></pre></td></tr></table></figure><h2 id="Function-prototype-apply"><a href="#Function-prototype-apply" class="headerlink" title="Function.prototype.apply()"></a>Function.prototype.apply()</h2><p>语法：<br><code>apply</code> 方法的作用与 call 方法类似，也是改变 <code>this</code> 指向，然后再调用该函数。唯一的区别就是：它接收一个数组作为函数执行时的参数，使用格式如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.apply(thisValue, [arg1, arg2, ...])</span><br></pre></td></tr></table></figure><p><code>apply</code> 方法的第一个参数也是this所要指向的那个对象，如果设为 <code>null</code> 或<code>undefined</code>，则等同于指定<code>window</code>。第二个参数则是一个数组，该数组的所有成员依次作为参数，传入原函数。原函数的参数，在 call 方法中必须一个个添加，但是在 <code>apply</code> 方法中，必须以数组形式添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f.call(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 2</span></span><br><span class="line">f.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">1</span>]) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>（1）找出数组最大元素<br>JavaScript 不提供找出<strong>数组最大元素</strong>的函数。结合使用 <code>apply</code> 方法 Math.max方法，就可以返回数组的最大元素。<br>（2）将数组的空元素变为 undefined<br>通过 <code>apply</code> 方法，利用<code>Array</code>构造函数将数组的空元素变成<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, [<span class="string">'a'</span>, ,<span class="string">'b'</span>])</span><br><span class="line"><span class="comment">// [ 'a', undefined, 'b' ]</span></span><br></pre></td></tr></table></figure><p>空元素与<code>undefined</code>的差别在于，数组的<code>forEach</code>方法会跳过空元素，继续遍历下一个元素，但是不会跳过<code>undefined</code>。因此，遍历内部元素的时候，会得到不同的结果。<br>（3）转换类似数组的对象<br>利用数组对象的<code>slice</code>方法，可以将一个类似数组的对象（比如arguments对象）转为真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="attr">length</span>: <span class="number">1</span>&#125;) <span class="comment">// [1]</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(&#123;<span class="number">0</span>: <span class="number">1</span>&#125;) <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;) <span class="comment">// [1, undefined]</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(&#123;<span class="attr">length</span>: <span class="number">1</span>&#125;) <span class="comment">// [undefined]</span></span><br></pre></td></tr></table></figure><h2 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind()"></a>Function.prototype.bind()</h2><p>语法：<br><code>bind</code>方法用于将函数体内的 <code>this</code> 绑定到某个对象，返回一个原函数的拷贝，并拥有指定的 this 值和初始参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">bind</span>(<span class="params">thisArg[, arg1[, arg2[, ...]]]</span>)</span></span><br></pre></td></tr></table></figure><p>将实例<code>d</code>的方法赋值给另一个变量<code>print</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.getTime() <span class="comment">// 1481869925657</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> print = d.getTime;</span><br><span class="line">print() <span class="comment">// Uncaught TypeError: this is not a Date object.</span></span><br></pre></td></tr></table></figure><p>因为<code>getTime</code>方法内部的<code>this</code>，绑定<code>Date</code>对象的实例，赋给变量<code>print</code>以后，内部的<code>this</code>已经不指向<code>Date</code>对象的实例了。<br><code>bind</code>方法可以解决这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = d.getTime.bind(d);</span><br><span class="line">print() <span class="comment">// 148186992565</span></span><br></pre></td></tr></table></figure><p>this 绑定其他对象，并调用原方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  count: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func = counter.inc.bind(obj);</span><br><span class="line">func();</span><br><span class="line">obj.count <span class="comment">// 101</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>bind</code>方法将<code>inc</code>方法内部的<code>this</code>，绑定到<code>obj</code>对象。并且赋值、调用<code>func</code>函数以后，递增的就是<code>obj</code>内部的<code>count</code>属性。<br><code>bind</code>还可以接受更多的参数，将这些参数绑定原函数的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="keyword">this</span>.m + y * <span class="keyword">this</span>.n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  m: <span class="number">2</span>,</span><br><span class="line">  n: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newAdd = add.bind(obj, <span class="number">5</span>);</span><br><span class="line">newAdd(<span class="number">5</span>) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>bind</code>方法除了绑定<code>this</code>对象，还将<code>add</code>函数的第一个参数<code>x</code>绑定成<code>5</code>，然后返回一个新函数<code>newAdd</code>，这个函数只要再接受一个参数<code>y</code>就能运行了。<br>如果<code>bind</code>方法的第一个参数是<code>null</code>或<code>undefined</code>，等于将<code>this</code>绑定到全局对象，函数运行时<code>this</code>指向顶层对象（浏览器为<code>window</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plus5 = add.bind(<span class="literal">null</span>, <span class="number">5</span>);</span><br><span class="line">plus5(<span class="number">10</span>) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><p>（1）每一次返回一个新函数<br><code>bind</code>方法每运行一次，就返回一个新函数，这会产生一些问题。比如，监听事件的时候，不能写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">'click'</span>, o.m.bind(o));</span><br></pre></td></tr></table></figure><p>上面代码中，<code>click</code>事件绑定<code>bind</code>方法生成的一个匿名函数。通过同样的操作重新<code>bind</code>不再是以前的函数，这样会导致无法取消绑定，所以，下面的代码是无效的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.removeEventListener(<span class="string">'click'</span>, o.m.bind(o)); <span class="comment">// 移除监听点击事件失败</span></span><br></pre></td></tr></table></figure><p>正确写法是下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listener = o.m.bind(o);</span><br><span class="line">element.addEventListener(<span class="string">'click'</span>, listener);</span><br><span class="line"><span class="comment">//  ...</span></span><br><span class="line">element.removeEventListener(<span class="string">'click'</span>, listener);</span><br></pre></td></tr></table></figure><p>（2）结合回调函数使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  times: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  print: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.times.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.print()  <span class="comment">// 无输出 全局对象没name属性</span></span><br></pre></td></tr></table></figure><p><code>obj.print</code>内部<code>this.times</code>的this是指向obj的，这个没有问题。但是，<code>forEach</code>方法的回调函数内部的<code>this.name</code>却是指向全局对象，导致没有办法取到值。<br>如下改动可以解释以上现象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.times.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.print()</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过<code>bind</code>方法绑定<code>this</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.times.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.print()</span><br><span class="line"><span class="comment">// 张三</span></span><br><span class="line"><span class="comment">// 张三</span></span><br><span class="line"><span class="comment">// 张三</span></span><br></pre></td></tr></table></figure><p>（3）结合 call 方法使用<br>** <code>call</code>、 <code>apply</code>、 <code>bind</code> 不一样的是：若调用<code>call</code> 、<code>apply</code>的原方法没有返回值，则返回 undefined，<code>bind</code> 默认返回新的函数。<br>利用<code>bind</code>方法，可以改写一些 JavaScript 原生方法的使用形式，以数组的<code>slice</code>方法为例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].slice(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>将其改写为<code>call、bind</code>结合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice = <span class="built_in">Function</span>.prototype.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line">slice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> slice = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.slice);</span><br><span class="line">slice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"> <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>上面代码的含义就是，将<code>Array.prototype.slice</code>变成<code>Function.prototype.call</code>方法所在的对象，调用时就变成了<code>Array.prototype.slice.call</code>。类似的写法还可以用于其他数组方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> push = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.push);</span><br><span class="line"><span class="keyword">var</span> pop = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Array</span>.prototype.pop);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>];</span><br><span class="line">push(a, <span class="number">4</span>)</span><br><span class="line">a <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">pop(a)</span><br><span class="line">a <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>如果再进一步，将<code>Function.prototype.call</code>方法绑定到<code>Function.prototype.bind</code>对象，就意味着<code>bind</code>的调用形式也可以被改写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">v</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</span><br><span class="line">bind(f, o)() <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>上面代码的含义就是，将<code>Function.prototype.bind</code>方法绑定在<code>Function.prototype.call</code>上面，所以bind方法就可以直接使用，不需要在函数实例上使用。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise 是如何将异步请求改为同步的 ？</title>
      <link href="/2022/08/01/Promise,%20Async,%20Await/"/>
      <url>/2022/08/01/Promise,%20Async,%20Await/</url>
      
        <content type="html"><![CDATA[<p><code>摘要</code>：同步任务需要等待上一步完成，才能执行下一步，而异步不需要被等待，这样可能会使得在同步任务执行时，异步请求未完成，导致同步未能拿到请求结果而出现错误信息的问题，<code>Promise</code>可以解决此问题，只需要将<code>异步</code>改写为<code>同步</code>，实现等待。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">one</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"1"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">two</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="string">"2"</span></span></span><br><span class="line">                &#125;,0)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">three</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"3"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(one())</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(two())</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(three())</span></span><br><span class="line">            &#125;</span><br><span class="line">            run()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打印结果：</p><blockquote><p>1<br>undefined<br>3</p></blockquote><p>出现以上结果的意思是，<code>two</code>方法有请求，但是当执行到<code>console.log(two())</code>的时候，<code>two</code>方法是内部请求是异步的，还没有结果。同步没有等待异步，就输出了<code>undefined</code>。</p><p>按照实际开发中的思路：等待请求完成后才往后执行，换句话是，将异步换成同步执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">"2"</span>) <span class="comment">//请求成功 返回结果</span></span><br><span class="line">      &#125;,<span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成以上代码后，打印结果如下：</p><blockquote><p>1<br>Promise {<pending>}[[Prototype]]: Promise[[PromiseState]]: “pending”[[PromiseResult]]: undefined<br>3</p></blockquote><p>虽然我们将返回结果改为<code>Promise</code>对象，但是同步也没有等待异步请求，状态为：<a href="https://blog.puhuier.xyz/2022/08/01/promise理解/" target="_blank" rel="noopener">pending</a>，请求结果：<code>PromiseResult</code></p><p>下面使用关键字：<code>Async</code>、<code>Await</code>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">one</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"1"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">two</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    resolve(<span class="string">"2"</span>)</span></span><br><span class="line">                  &#125;,0)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">three</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"3"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(one())</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">await</span> two())</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(three())</span></span><br><span class="line">            &#125;</span><br><span class="line">            run()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码的结果：</p><blockquote><p>1<br>2<br>3</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> promise </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于 promise 的状态</title>
      <link href="/2022/08/01/promise%E7%90%86%E8%A7%A3/"/>
      <url>/2022/08/01/promise%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1>]]></content>
      
      
      <categories>
          
          <category> Axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟 DOM 和 diff 算法</title>
      <link href="/2022/07/27/virtualDOM/"/>
      <url>/2022/07/27/virtualDOM/</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要： 介绍snabbdom、虚拟DOM、diff算法</p></blockquote><p>本文重点是什么？</p><ol><li>虚拟 DOM 是什么？</li><li>虚拟 DOM 如何产生？—— h 函数</li><li>diff 算法原理？—— diff 函数</li><li>虚拟 DOM 如何通过 diff 变为真正的 DOM 的？ —— diff 函数</li></ol><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><ul><li>介绍：是一个 JavaScript 对象，用来描述真实的DOM结构。</li><li>如下图，有三个属性:<br> （1）sel：标签名；（2）data：属性信息；（3）children：子元素对象。</li></ul><p>真实 DOM</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>可乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虚拟 DOM</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"seL"</span>: <span class="string">"div"</span>，</span><br><span class="line">    <span class="string">"data"</span>: &#123; <span class="string">"class"</span>: &#123; <span class="string">"box"</span>: <span class="literal">true</span> &#125; &#125;,</span><br><span class="line">    <span class="string">"children"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"seL"</span>: <span class="string">"h3"</span>，</span><br><span class="line">            <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"text"</span>: <span class="string">"我是一个标题"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"seL"</span>: <span class="string">"ul"</span>,</span><br><span class="line">            <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"children"</span>: [</span><br><span class="line">               &#123; </span><br><span class="line">                    <span class="string">"sel"</span>: <span class="string">"li"</span></span><br><span class="line">                    <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">"text"</span>: &#123; <span class="string">"牛奶"</span> &#125;</span><br><span class="line">                &#125;，</span><br><span class="line">                &#123; </span><br><span class="line">                    <span class="string">"sel "</span>: <span class="string">"li"</span></span><br><span class="line">                    <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">                    <span class="string">"text"</span>: &#123; <span class="string">"咖啡"</span> &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">               &#123; </span><br><span class="line">                <span class="string">"seL"</span>: <span class="string">"li"</span></span><br><span class="line">                <span class="string">"data"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"text"</span> : &#123;<span class="string">"可乐"</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p><code>区别于真实DOM</code></p><ul><li>无需手动操作 DOM，提高开发效率；</li><li>复杂场景下，防止频繁触发重绘，可以提高性能；</li><li>虚拟 DOM 实际是 JavaScript 对象，可以进行跨平台操作。</li></ul><p><code>问题</code>：数据发生改变，试图怎么更新 ?<br>当数据改变时，会触发setter，并且通过Dep.notify去通知所有订阅者Watcher(组件)，订阅者们就会调用patch方法，给真实DOM打补丁，更新相应的视图。</p><h2 id="diff-函数"><a href="#diff-函数" class="headerlink" title="diff 函数"></a>diff 函数</h2><h3 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h3><p>计算最小更新 DOM 的方式。</p><ul><li>将 DOM 抽象为虚拟 DOM ；</li><li>然后通过新旧虚拟 DOM 这两个对象的差异( Diff 算法)；</li><li>最终只把变化的部分重新渲染,提高渲染效率的过程。</li></ul><p>流程图：<br>其中包含 <code>patch</code> 函数、<code>pachVnode</code> 函数、<code>UpdateVnode</code> 函数（未详细介绍）<br><img src="https://img-blog.csdnimg.cn/3711cc3f05ca40bb97799a116ff04596.jpeg" alt="请添加图片描述"></p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>使用 snabbdom 虚拟 DOM 库 ：<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** src/index.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">'snabbdom/init'</span></span><br><span class="line"><span class="keyword">import</span> &#123; classModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/class'</span></span><br><span class="line"><span class="keyword">import</span> &#123; propsModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/props'</span></span><br><span class="line"><span class="keyword">import</span> &#123; styleModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/style'</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventListenersModule &#125; <span class="keyword">from</span> <span class="string">'snabbdom/modules/eventlisteners'</span></span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">'snabbdom/h'</span> <span class="comment">// helper function for creating vnodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建出 patch 函数</span></span><br><span class="line"><span class="keyword">const</span> patch = init([</span><br><span class="line">  classModule,</span><br><span class="line">  propsModule,</span><br><span class="line">  styleModule,</span><br><span class="line">  eventListenersModule</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 2、使用 h 函数创建虚拟节点</span></span><br><span class="line"><span class="keyword">const</span> vnode1 = h(<span class="string">'ul'</span>, &#123;&#125;, [</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'A'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'B'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'C'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'D'</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 3.创建空的容器</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"><span class="comment">// 4.将 DOM 塞入container</span></span><br><span class="line">patch(container, vnode1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vnode2 = h(<span class="string">'ul'</span>, &#123;&#125;, [</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'A'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'B'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'C'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'D'</span>),</span><br><span class="line">  h(<span class="string">'li'</span>, &#123;&#125;, <span class="string">'E'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮时，将vnode1变为vnode2</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用最小改变 来达到 新的vnode 覆盖 旧的 vnode2</span></span><br><span class="line">  patch(vnode1, vnode2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="patch-函数"><a href="#patch-函数" class="headerlink" title="patch 函数"></a>patch 函数</h3><p>接收参数存在： element（真实 DOM ） 和 vnode（虚拟 DOM ） 两种类型<br><code>首次插入</code>：判断 key 和 sel 是相同（2种情况）</p><table><thead><tr><th></th><th>1、vnode.key 和 vnode.sel 都相同</th><th>2、vnode.key 或 vnode.sel 不同</th></tr></thead><tbody><tr><td>是否同一个Vnode</td><td>是</td><td>否</td></tr><tr><td>结果</td><td>更新(调用 <code>pachVnode</code> )</td><td>创建新的DOM，删除老的DOM</td></tr></tbody></table><h3 id="pachVnode-函数"><a href="#pachVnode-函数" class="headerlink" title="pachVnode 函数"></a>pachVnode 函数</h3><p><strong>虚拟节点 text 和 children 最多只能有一个</strong></p><ol><li>保存（旧的相关联）的 DOM 元素 eml 给新的 Vnode（eml 记录新的 Vnode 插入位置）</li><li>比较新、旧 vnode 的 children 情况（3种情况）</li></ol><table><thead><tr><th align="left"></th><th align="left">1、新 vnode === 旧 vnode（全等）</th><th align="left">2、新 Vnode 无 text</th><th align="left">3、新 Vnode 有 text</th></tr></thead><tbody><tr><td align="left">结果</td><td align="left">不需更新，return</td><td align="left">1.新、老 Vnode 都有 children，即调用（<code>updateChildren</code>）；<br>2.老 Vnode 无 children，即添加 children ；<br>3.新的无 children ，即删除 children</td><td align="left">删除 children ，更新新的 text</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>易错题集</title>
      <link href="/2022/07/16/%E7%AC%94%E8%AF%95%E9%94%99%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/07/16/%E7%AC%94%E8%AF%95%E9%94%99%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h1><h2 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h2><h3 id="js概念与类型检测"><a href="#js概念与类型检测" class="headerlink" title="js概念与类型检测"></a>js概念与类型检测</h3><ol><li><p>以下不属于 typeof 运算符返回值的是？</p><p>A. “string”<br>B. “function”<br>C. “object”<br>D. “null”</p><blockquote><p>typeof 引用类型只能识别 function</p></blockquote></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git远程仓库已有提交文件，如何提交本地仓库覆盖远程仓库</title>
      <link href="/2022/07/12/git%20%E4%BB%93%E5%BA%93%E5%86%B2%E7%AA%81/"/>
      <url>/2022/07/12/git%20%E4%BB%93%E5%BA%93%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<h1 id="首次提交到远程仓库的正常流程："><a href="#首次提交到远程仓库的正常流程：" class="headerlink" title="首次提交到远程仓库的正常流程："></a>首次提交到远程仓库的正常流程：</h1><ol><li><p><code>新建（初始化本地仓库）</code></p><blockquote><p>命令：git init</p><p>结果：根目录出现 .git 文件（即本 地仓库）</p></blockquote></li></ol><ol start="2"><li><p><code>跟踪文件</code></p><blockquote><p>命令：git add . </p><p>是跟踪根目录下所有文件</p></blockquote></li><li><p><code>提交到本地仓库</code></p><blockquote><p>命令：git commit -m  “这里可以写备注以便代码管理”</p></blockquote></li><li><p><code>连接远程仓库</code></p><blockquote><p>命令：git remote add origin httpXXXXX.git </p><p> origin 的意思是指“远程仓库”，就是远程仓库链接的别名，是在 clone 一个托管在 Github 上代码库时，git 默认创建的指向这个远程代码库的标签，origin 指向的就是本地的代码库托管在 Github 上的版本。</p></blockquote></li><li><p><code>提交到本地仓库</code></p><blockquote><p>命令：git push -u origin master</p><p>提交到远程仓库的 master 分支</p></blockquote></li></ol><h1 id="报错出现仓库提交失败信息如下："><a href="#报错出现仓库提交失败信息如下：" class="headerlink" title="报错出现仓库提交失败信息如下："></a>报错出现<font color="green">仓库提交失败信息如下：</font></h1><blockquote><p>To <a href="https://gitee.com/XXXXXX.git" target="_blank" rel="noopener">https://gitee.com/XXXXXX.git</a><br> ! [rejected]        master -&gt; master (fetch first)<br>error: failed to push some refs to ‘<a href="https://gitee.com/XXXXXX.git&#39;" target="_blank" rel="noopener">https://gitee.com/XXXXXX.git&#39;</a><br>hint: Updates were rejected because the remote contains work that you do<br>hint: not have locally. This is usually caused by another repository pushing<br>hint: to the same ref. You may want to first integrate the remote changes<br>hint: (e.g., ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p></blockquote><h2 id="解决"><a href="#解决" class="headerlink" title="解决:"></a><font color="green">解决:</font></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f 远程仓库名  远程仓库分支</span><br></pre></td></tr></table></figure><blockquote><p>使用本地仓库文件覆盖远程仓库,即强制推送。</p></blockquote><p>以上代码中的<code>远程仓库名</code>和<code>分支</code>，获取方式如下：</p><ul><li><p>远程仓库名，查看：git remote show</p></li><li><p>远程仓库分支，查看：git branch（带有星号的分支，代表当前分支）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 手写点击高亮</title>
      <link href="/2022/05/07/%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E9%AB%98%E4%BA%AE/"/>
      <url>/2022/05/07/%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E9%AB%98%E4%BA%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"chooerr-list"</span>&gt;</span><br><span class="line">      &lt;li :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;active:nowIndex === item.id&#125;"</span> </span><br><span class="line">          v-<span class="keyword">for</span>=<span class="string">"(item) in timerDate"</span> </span><br><span class="line">          :key=<span class="string">"item.id"</span> </span><br><span class="line">          @click=<span class="string">"timerHandle(item.id)"</span></span><br><span class="line">       &gt; &#123;&#123;item.value&#125;&#125; </span><br><span class="line">       &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/1657892137824.png" alt="65789213782"></p><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">timerDate:[&#123;</span><br><span class="line">       id:<span class="number">0</span>,</span><br><span class="line">       value:<span class="string">'一个月'</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">       id:<span class="number">1</span>,</span><br><span class="line">       value:<span class="string">'三个月'</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">       id:<span class="number">2</span>,</span><br><span class="line">       value:<span class="string">'六个月'</span></span><br><span class="line">     &#125;,&#123;</span><br><span class="line">       id:<span class="number">3</span>,</span><br><span class="line">       value:<span class="string">'九个月'</span></span><br><span class="line">     &#125;]</span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  timerHandle(data)&#123;</span><br><span class="line">    <span class="keyword">this</span>.nowIndex=data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>添加meta控制用户访问权限</title>
      <link href="/2022/05/07/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90/"/>
      <url>/2022/05/07/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="步骤梳理"><a href="#步骤梳理" class="headerlink" title="步骤梳理"></a>步骤梳理</h1><ol><li>在路由模块 router 添加 meta 对象，设置权限属性</li><li>路由守卫 beforeEach ( ) 设置路由跳转逻辑</li></ol><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p><code>以home首页为例做介绍</code></p><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p>思路：每个组件实例存在一个 $route 对象，是一个局部对象，存储组件路由信息： name、meta、path、hash、query、params、fullPath 等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      isLogin: <span class="literal">true</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;，</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    name: <span class="string">'Login'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/views/login.vue"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><p>思路：使用前置守卫<font color="green"> beforeEach </font>能在路由跳转<code>前</code>进行拦截的特性，对添加了 meta.isLogin==true 权限的路由进行判断，如果本地存储有 token 值，则next() 通行，否则拦截的路由将跳转到 login 页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.meta.isLogin) &#123;</span><br><span class="line">    <span class="keyword">let</span> token = store.state.login.user.token</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(&#123;</span><br><span class="line">        name: <span class="string">"Login"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>使用 jsonwebtoken（JWT）生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JWT = <span class="built_in">require</span>(<span class="string">"jsonwebtoken"</span>)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/login"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, pass &#125; = req.body;</span><br><span class="line">  <span class="comment">//sqlClient方法实现连接数据库并返回查询结果，并回调函数响应数据</span></span><br><span class="line">  sqlClient(<span class="string">"select * from user where username=? and password=?"</span>, [username, pass], result =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> token = JWT.sign(username, <span class="string">'^8^'</span>)</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        token,</span><br><span class="line">        status: <span class="number">200</span>,</span><br><span class="line">        username</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(&#123;</span><br><span class="line">        ststus: <span class="number">401</span>,</span><br><span class="line">        mgs: <span class="string">'登陆失败'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求的状态码那些事</title>
      <link href="/2022/04/10/ajax_readyState/"/>
      <url>/2022/04/10/ajax_readyState/</url>
      
        <content type="html"><![CDATA[<h1 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0（未初始化）: 请求未初始化，还没有调用send()方法</span><br><span class="line">1（载入）: 服务器连接已建立，已调用send()方法，正在发送请求</span><br><span class="line">2（载入完成）: 请求已接收 接收到了响应头，send()方法执行完成，已经接收到全部响应内容</span><br><span class="line">3（交互）: 请求处理中 正在下载响应体</span><br><span class="line">4（完成）: 请求已完成，且响应已就绪</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>那些需要牢记基础</title>
      <link href="/2022/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>[ 摘要 ]：包含 CSS、JavaScript、vue、计算机网络等知识，全文以问答的风格，书写内容基本涵盖大部分面试题。</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><h3 id="什么是-BFC"><a href="#什么是-BFC" class="headerlink" title="什么是 BFC ?"></a>什么是 BFC ?</h3><p>BFC （block formatting context）块级格式化上下文，属于三种文档流（普通流、浮动流、定位流）中的<code>普通流</code>，是页面渲染的独立容器，内部元素的渲染不会影响到外界</p><h3 id="形成-BFC-的条件？"><a href="#形成-BFC-的条件？" class="headerlink" title="形成 BFC 的条件？"></a>形成 BFC 的条件？</h3><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li>浮动元素（<code>float</code> 值不是 <code>none</code>）</li><li>定位元素（<code>position</code> 为 <code>absolute</code> / <code>flxed</code>）</li><li>块级元素（<code>display</code> 为 <code>inline-block</code>）</li><li>display 为：<code>table</code> 、<code>inline-table</code>、<code>table-cell</code> 、<code>table-caption</code> 、<code>flex</code>、<code>inline-flex</code>、<code>grid</code>、<code>inline-grid</code></li><li>overflow 值不为 visible （为<code>auto</code>、<code>scroll</code>、<code>hidden</code>）</li><li>……</li></ul><h3 id="BFC-的渲染规则-？"><a href="#BFC-的渲染规则-？" class="headerlink" title="BFC 的渲染规则 ？"></a>BFC 的渲染规则 ？</h3><ul><li>不同盒子在同一个 BFC 垂直方向边距重叠</li><li>BFC 区域不会与浮动盒子重叠</li><li>计算 BFC 高度的时候，浮动元素参与计算</li></ul><h3 id="BFC-应用场景-？"><a href="#BFC-应用场景-？" class="headerlink" title="BFC 应用场景 ？"></a>BFC 应用场景 ？</h3><ul><li>防止浮动导致的父盒子高度为 0</li><li>避免外边距重叠（使用不同 BFC 渲染）</li></ul><h2 id="绘制特殊图形"><a href="#绘制特殊图形" class="headerlink" title="绘制特殊图形"></a>绘制特殊图形</h2><h3 id="border-绘制三角形-？"><a href="#border-绘制三角形-？" class="headerlink" title="border 绘制三角形 ？"></a>border 绘制三角形 ？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.triangle</span>&#123;</span></span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border: 50px solid;</span><br><span class="line">    // 四个参数对应 ：上 右 下 左</span><br><span class="line"><span class="css"><span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#ccc</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：是一个三角形</p><h3 id="skew-绘制平行四边形-？"><a href="#skew-绘制平行四边形-？" class="headerlink" title="skew 绘制平行四边形 ？"></a>skew 绘制平行四边形 ？</h3><p>利用 skew 特性，参数一：x 轴倾斜角度，参数二：y 轴倾斜角度</p><ul><li>skew ( x-angle , y-angle ) 定义沿着 X 和 Y 轴的 2D 倾斜转换。</li><li>skewX ( angle ) 定义沿着 X 轴的 2D 倾斜转换。</li><li>skewY ( angle ) 定义沿着 Y 轴的 2D 倾斜转换。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.parallel</span> &#123;</span></span><br><span class="line">    margin-top: 50px;</span><br><span class="line">    margin-left: 50px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: red;</span><br><span class="line">    transform: skew(-20deg, 0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parallel"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用-DIV-绘制五角星-？"><a href="#用-DIV-绘制五角星-？" class="headerlink" title="用 DIV 绘制五角星 ？"></a>用 DIV 绘制五角星 ？</h3><p>思路：用 border 绘制 3 个三角形，其中 2 个三角形旋转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#star</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 200px auto;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red transparent;</span><br><span class="line">    border-width: 70px 100px;</span><br><span class="line">    transform: rotate(35deg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#star</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    content: '';</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    top: -128px;</span><br><span class="line">    left: -95px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red transparent;</span><br><span class="line">    border-width: 80px 30px;</span><br><span class="line">    transform: rotate(-35deg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#star</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    content: '';</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    top: -45px;</span><br><span class="line">    left: -140px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: transparent transparent red transparent;</span><br><span class="line">    border-width: 70px 100px;</span><br><span class="line">    transform: rotate(-70deg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="数据类型与数值"><a href="#数据类型与数值" class="headerlink" title="数据类型与数值"></a>数据类型与数值</h2><h3 id="原始类型、引用类新型有哪些-？"><a href="#原始类型、引用类新型有哪些-？" class="headerlink" title="原始类型、引用类新型有哪些 ？"></a>原始类型、引用类新型有哪些 ？</h3><p>原始（基本）数据类型有 7 种(注意全是小写)：</p><ul><li><input disabled="" type="checkbox"> number</li><li><input disabled="" type="checkbox"> boolean</li><li><input disabled="" type="checkbox"> string</li><li><input disabled="" type="checkbox"> null</li><li><input disabled="" type="checkbox"> undefined</li><li><input disabled="" type="checkbox"> Symbol</li><li><input disabled="" type="checkbox"> bigint</li></ul><p>引用类型：</p><ul><li><input disabled="" type="checkbox"> 对象类型 Object ：普通对象 Object , Date、Array、Function 、Date 、RegExp 、Error… , <code>Number、String、Boolean（基本包装类型）</code></li></ul><h3 id="说出以下代码运行结果和原因-？"><a href="#说出以下代码运行结果和原因-？" class="headerlink" title="说出以下代码运行结果和原因 ？"></a>说出以下代码运行结果和原因 ？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">person</span>)</span>&#123;</span><br><span class="line">       person.age = <span class="number">26</span></span><br><span class="line">       person = &#123;</span><br><span class="line">           name:<span class="string">'hh'</span></span><br><span class="line">           age:<span class="string">'18'</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> person</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> p1 = &#123;</span><br><span class="line">         name:<span class="string">'ff'</span></span><br><span class="line">         age:<span class="string">'20'</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> p2 = test(p1)</span><br><span class="line">   <span class="built_in">console</span>.log(p1) <span class="comment">// --&gt;</span></span><br><span class="line">   <span class="built_in">console</span>.log(p2) <span class="comment">// --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>结果:</strong></p><p>p1：{name: “ff”, age: 26}<br>p2：{name: “hh”, age: 18}</p><p><strong>原因：</strong><br>引用类型作为实参，在函数传参时传递的是内存地址值，p1 将地址传递给 person，person 更改了 p1 引用地址中的内容，又给其重新分配引用地址，并将地址值传递给 p2 </p><h3 id="null-是对象吗-？"><a href="#null-是对象吗-？" class="headerlink" title="null 是对象吗 ？"></a>null 是对象吗 ？</h3><p><strong>结论：</strong><br>null 不是对象</p><p><strong>原因：</strong><br>虽然 typeof 测试 null 的类型输出为 Object，但是这是 JS 的一个 bug ，因为 JS 初创时使用的是 32 位系统，考虑到性能，JS 采用低位存储变量的类型，对象类型的二进制是以 000 开头的，而 null 的二进制是全 0，则 typeof 输出 Object 的错误结果</p><h3 id="‘1’-toString-为什么能调用-？"><a href="#‘1’-toString-为什么能调用-？" class="headerlink" title="‘1’.toString( ) 为什么能调用 ？"></a>‘1’.toString( ) 为什么能调用 ？</h3><p>虽然 toString( ) 是对象方法，但是因为<strong>基本包装类型</strong>的特性，该语句执行其实做了几件事：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new String（'1'） 可用，ES6不建议使用new关键字创建基本类型的包装类</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Object</span>（<span class="string">'1'</span>） </span><br><span class="line">s.toString ()</span><br><span class="line">s = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>其中三种基本类型：Boolean，Number，String 又是基本包装类型。基本包装类型是将 <strong>简单数据类型</strong> 包装成 <strong>复杂数据类型</strong>。因此可以调用系统方法。<br>第一步：创建对象实例<br>第二步：调用对象方法<br>第三步：执行完对象方法立即销毁对象</p><h3 id="0-1-0-2-0-3-，为什么-？"><a href="#0-1-0-2-0-3-，为什么-？" class="headerlink" title="0.1+0.2 != 0.3 ，为什么 ？"></a>0.1+0.2 != 0.3 ，为什么 ？</h3><p>浮点数 0.1 和 0.2 转为二进制时，是无限循环的值，计算机因为资源有限将其表示为近似值，因此出现精度损失。最后将相加的结果再转为 10 进制输出，结果为 0.30000000000000004</p><h3 id="什么是-BigInt-？"><a href="#什么是-BigInt-？" class="headerlink" title="什么是 BigInt ？"></a>什么是 BigInt ？</h3><p>BigInt 是第二种数字数据类型，当整数超过 Number 支持的范围时使用，该数据类型允许我们安全的使用大整数执行算术操作，能表示高分辨率时间戳，使用大整数 ID 等等，而不用调用库</p><h3 id="为什么需要-BigInt-？"><a href="#为什么需要-BigInt-？" class="headerlink" title="为什么需要 BigInt ？"></a>为什么需要 BigInt ？</h3><p>因为 Number 无法精确表示非常大的整数，在 JS 中，所有数字都是双精度 64 位浮点数表示，确切的说，JS 中 Number 类型只能安全表示 -(2^53-1)~(2^53-1) 范围的数值，会将非常大的整数四舍五入，在任何超出此范围的整数都会失去精度：</p><blockquote><p>console.log(9999 9999 9999 999) -&gt; 1000 0000 0000 0000<br>console.log(9007199254740992 === 9007199254740993) -&gt;true</p></blockquote><p>Math.pow (2, 53) 竟然与 Math.pow(2, 53) + 1 相等，则安全范围是：-(2^53-1)~(2^53-1)</p><h3 id="如何创建并使用-BigInt-？"><a href="#如何创建并使用-BigInt-？" class="headerlink" title="如何创建并使用 BigInt ？"></a>如何创建并使用 BigInt ？</h3><p>两种方式：</p><ul><li><input disabled="" type="checkbox"> 在数字末尾添加 n 就可以<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740995n</span>) <span class="comment">//9007199254740995n</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740995</span>) <span class="comment">//9007199254740996</span></span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> 使用 BigInt() 构造函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInt(<span class="string">"9007199254740995"</span>)   <span class="comment">//9007199254740995n</span></span><br></pre></td></tr></table></figure>简单使用：<blockquote><p>10n + 20n; &emsp; // 30n<br>10n - 20n;  &emsp; //-10n<br>+10n;      &emsp;&emsp; //TypeError<br>-10n;        &emsp;&emsp; //-10n<br>10n* 20n    &emsp;//200n<br>20n / 10n   &emsp;//2n<br>23n % 10n &emsp;//3n<br>10n ** 3n  &emsp;//1000n</p></blockquote></li></ul><blockquote><p>const x= 10n;<br>++x; &emsp;// 11n<br>–x;  &emsp; // 9n<br>console.log(x)  // bigint</p></blockquote><p><strong>注意：</strong></p><p>1) BigInt 不支持一元加号运算符，这可能是某些程序可能依赖于 + 始终生成 Number 类型，或者抛出异常，另外，更改 + 的行为也会破坏 asm.js 代码；<br>2) 不允许 BigInt 和 Number 之间进行混合操作，因为隐式类型转换可能会丢失信息；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> + <span class="number">10n</span>; <span class="comment">// → TypeError</span></span><br></pre></td></tr></table></figure><p>3) 不能将 BigInt 传递给 Web API 和 JS 内置方法，这些函数需要 Number 类型；<br>4) 当 Boolean 和 BigInt 相遇时，和 Number 类似，除了 0n 为 false，其他值为 true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">0n</span>)&#123;</span><br><span class="line"><span class="comment">//条件判断为false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3n</span>)&#123;</span><br><span class="line"><span class="comment">//条件为true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5) 元素都为 BigInt 的数组都可以进行 sort；<br>6) BigInt 可以进行位运算。</p><h3 id="typeof-是否能正确判断类型-？"><a href="#typeof-是否能正确判断类型-？" class="headerlink" title="typeof 是否能正确判断类型 ？"></a>typeof 是否能正确判断类型 ？</h3><p>对于<strong>原始类型</strong>来说，除了 null 都可以调用 typeof 显示正确的类型：</p><blockquote><p>typeof 1 // ‘number’<br>typeof ‘1’ // ‘string’<br>typeof undefined // ‘undefined’<br>typeof true // ‘boolean’<br>typeof Symbol() // ‘symbol’</p></blockquote><p>对于<strong>引用数据</strong>类型，除了 function 类型，其他都输出Object：</p><blockquote><p>typeof [] // ‘Object’<br>typeof {} //‘Object’<br>typeof console.log //‘function’</p></blockquote><p>因此采用 typeof 判断对象数据类型不合适，而采用 instanceof 会更好。因为 instanceof 运算符用来检测构造函数的 prototype 属性是否出现在某个实例的 _<em>proto_</em> 对象原型上。</p><h3 id="instanceof-能否判断基本数据类型-？"><a href="#instanceof-能否判断基本数据类型-？" class="headerlink" title="instanceof 能否判断基本数据类型 ？"></a>instanceof 能否判断基本数据类型 ？</h3><p>instanceof 能判断，但是不能直接使用，需要重定义 instanceof 将其转换为使用 typeof 判断，方法如下：</p><ul><li>语法：<code>object instanceof constructor</code><ul><li><code>object</code>：某个实例对象</li><li><code>constructor</code>：某个构造函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Symbol.hasInstance ：用于判断某对象是否为某构造器的实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimitiveNumber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance] (x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'number'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">111</span> <span class="keyword">instanceof</span> PrimitiveNumber )</span><br></pre></td></tr></table></figure><h3 id="能不能手动实现一下-instanceof-的功能-？"><a href="#能不能手动实现一下-instanceof-的功能-？" class="headerlink" title="能不能手动实现一下 instanceof 的功能 ？"></a>能不能手动实现一下 instanceof 的功能 ？</h3><p><strong>核心：</strong>原型链向上查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function myInstanceof (left,right)&#123;</span><br><span class="line">    &#x2F;&#x2F; 基本数据类型直接返回 false</span><br><span class="line">    if ( typeof left !&#x3D;&#x3D; &#39;object&#39; || left &#x3D;&#x3D;&#x3D; null )</span><br><span class="line">        return false;</span><br><span class="line">    &#x2F;&#x2F; getPrototypeof 是 object 对象自带的一个方法，能拿到参数的原型对象</span><br><span class="line">    let proto &#x3D; object.getPrototypeof (left);</span><br><span class="line">    while(true)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 查找到尽头，还没找到</span><br><span class="line">        if（proto &#x3D;&#x3D; null）return false;</span><br><span class="line">        &#x2F;&#x2F; 找到相同原型对象</span><br><span class="line">        if(proto &#x3D;&#x3D; right.prototype) return true;</span><br><span class="line">        proto &#x3D; object.getPrototypeof (proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myInstanceof(<span class="string">"11"</span>,<span class="built_in">String</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(myInstanceof(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"11"</span>),<span class="built_in">String</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-is-和-的区别-？"><a href="#Object-is-和-的区别-？" class="headerlink" title="Object.is 和 === 的区别 ？"></a>Object.is 和 === 的区别 ？</h3><p>== 是等于， === 是<code>严格等于</code>，Object 是<code>加强版严格等于</code></p><p>Object.js() 的判断规则：和 === 基本一致，有两处不同：</p><ul><li>+0 不等于 -0</li><li>NaN 等于 NaN</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>)  <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>,<span class="number">-0</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="number">-0</span> === +<span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x === y)&#123;</span><br><span class="line">    <span class="comment">//1/0 === 1/0 返回 true ，1/+0 === 1/-0 返回 false</span></span><br><span class="line">        <span class="keyword">return</span> x !== <span class="number">0</span> || y !== <span class="number">0</span> || <span class="number">1</span>/x === <span class="number">1</span>/y;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//x !== y, x !== x 且 y !== y 都为 true，则两边都是 NaN </span></span><br><span class="line">        <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果是什么，为什么-？"><a href="#结果是什么，为什么-？" class="headerlink" title="[] == ![] 结果是什么，为什么 ？"></a>[] == ![] 结果是什么，为什么 ？</h3><p>优先级，！(逻辑非) &gt; == ，因此 ！将操作值转换成一个布尔值，然后对其取反：[] 是 <code>true</code> 转换成 ![] 是<code>false</code>；</p><p>逻辑非转换后，现在比较的是：[] == false；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] instanceof Array &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>先看看相等操作符<code>==</code>的一些转换规则：</p><ul><li>如果有一个操作数是布尔值，则会先隐式调用<code>window</code>对象上的<code>Number</code>转型函数，将其转换为数值，<code>false</code>转为<code>0</code>，<code>true</code>转为<code>1</code>，再进行判断。</li><li>如果有一个操作数是字符串，另一个是数值，则隐式调用<code>Number</code>转型函数，将字符串转换为数值，再进行判断。</li><li>如果有一个操作数是对象，则调用对象的<code>valueOf</code>方法，如果返回的是<strong>复杂数据类型</strong>，则在返回值得基础上再调用<code>toString</code>方法，最后根据以上规则进行比较。</li></ul><p>分析<code>[] == ![]</code>得出以下思路：</p><ol><li>隐式调用<code>Boolean</code>转型函数，对空数组转换成<code>Boolean</code>值，再对结果取反。此时比较<code>[] == false</code>。</li><li>隐式调用<code>Number</code>转型函数，将<code>false</code>转换为数值<code>0</code>，此时比较<code>[] == 0</code>。</li><li>调用<code>valueOf</code>方法和<code>toString</code>方法，此时<code>[].toString()</code> 为空字符串，比较 <code>&#39;&#39; == 0</code>。</li><li>隐式调用<code>Number</code>转型函数，将空字符串转换为<code>0</code>，比较 <code>0 == 0</code>。</li><li>最后返回<code>true</code>。</li></ol><p>初步总结： == 转换<strong>最复杂</strong>的操作结果是转换为数值进行比较。对象类型转换为<code>[object Object]</code></p><h3 id="JS-中类型转换有几种-？"><a href="#JS-中类型转换有几种-？" class="headerlink" title="JS 中类型转换有几种 ？"></a>JS 中类型转换有几种 ？</h3><p>JS中，类型转换只有三种：</p><ul><li>转成 布尔值（调用 Boolean()方法）</li><li>转成 字符串（调用.toString()或 String()方法）</li><li>转成 数字（调用 Number(),parseInt(),parseFloat()方法）</li></ul><table>    <thead>        <td>原始值</td>             <td>转换目标</td>        <td>结果</td>      </thead>    <tbody>        <tr>            <td>number</td>                  <td rowspan="4">布尔值</td>                  <td>除了0、+-0、NaN 其他为 true</td>        </tr>        <tr>            <td>string</td>             <td>除了空串其他为 true</td>         </tr>        <tr>            <td>undefined、null</td>            <td>false</td>         </tr>        <tr>            <td>引用类型</td>            <td>true</td>         </tr>         <tr>            <td>number</td>            <td rowspan="4">字符串</td>             <td>0 => '0'</td>        </tr>        <tr>            <td>boolean、function、Symbol</td>            <td>'true'</td>        </tr>         <tr>            <td>数组</td>            <td>[1，2] => '1,2'</td>        </tr>        <tr>            <td>对象</td>            <td>’[object Object]‘</td>        </tr>        <tr>            <td>string</td>            <td rowspan="5">数字</td>            <td>'1' => 1;<br>'a' => NaN;<br>''=>0</td>        </tr>        <tr>            <td>数组</td>            <td>[] => 0;<br>有且仅有一个数字元素 => 数字;<br>其他 NaN</td>        </tr>         <tr>            <td>除了 Array 的其他引用类型</td>            <td>NaN</td>        </tr>        <tr>            <td>null</td>            <td>0</td>        </tr>         <tr>            <td>Symbol</td>            <td>抛错</td>        </tr>    </tbody></table><h3 id="和-的区别-？"><a href="#和-的区别-？" class="headerlink" title="== 和 === 的区别 ？"></a>== 和 === 的区别 ？</h3><p>== ：等于，两边值类型不同时，先进行类型转换，再比较；</p><p>===：严格等于，类型 + 值都相等时，才相等。<img src="https://img2018.cnblogs.com/i-beta/1888556/201912/1888556-20191215225956934-150507918.png" alt=""></p><h3 id="对象转原始（基本）类型是根据什么流程运行的-？"><a href="#对象转原始（基本）类型是根据什么流程运行的-？" class="headerlink" title="对象转原始（基本）类型是根据什么流程运行的 ？"></a>对象转原始（基本）类型是根据什么流程运行的 ？</h3><p>对象转原始类型，会调用内置的 ToPrimitive 函数，对于该函数而言，逻辑如下：</p><p><code>默认调用</code></p><p>如果有 Symbol.toPrimitive () 方法，优先调用再返回<br>其次调用 valueOf () ，如果转换为原始类型，则返回<br>其次调用 toString () ，如果转换为原始类型，则返回<br>如果都没有返回原始类型，会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">3</span>,</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'5'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj + <span class="number">1</span>); <span class="comment">// 输出7</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">3</span>,</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'5'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj + <span class="number">1</span>); <span class="comment">// 输出5</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj + <span class="number">1</span>);  <span class="comment">// 输出[object Object]1</span></span><br></pre></td></tr></table></figure><h3 id="如何让-if-a-1-amp-amp-a-2-条件成立？"><a href="#如何让-if-a-1-amp-amp-a-2-条件成立？" class="headerlink" title="如何让 if(a == 1 &amp;&amp; a == 2) 条件成立？"></a>如何让 if(a == 1 &amp;&amp; a == 2) 条件成立？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">value:<span class="number">0</span>,</span><br><span class="line">valueOf: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a==<span class="number">1</span> &amp;&amp; a==<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="什么是闭包-？"><a href="#什么是闭包-？" class="headerlink" title="什么是闭包 ？"></a>什么是闭包 ？</h3><p>闭包就是：有权访问另一个函数作用域中的变量的函数。<br>函数嵌套函数，内部的函数就是闭包！</p><h3 id="闭包产生-？"><a href="#闭包产生-？" class="headerlink" title="闭包产生 ？"></a>闭包产生 ？</h3><ul><li>函数嵌套函数</li><li>函数内部使用外部函数的变量</li><li>调用外部函数</li></ul><h3 id="闭包的表现形式-？"><a href="#闭包的表现形式-？" class="headerlink" title="闭包的表现形式 ？"></a>闭包的表现形式 ？</h3><ul><li>返回一个函数</li><li>作为函数参数传递</li><li>使用回调函数</li><li>立即执行函数使用全局变量</li></ul><h3 id="解决闭包带来的缺点-？"><a href="#解决闭包带来的缺点-？" class="headerlink" title="解决闭包带来的缺点 ？"></a>解决闭包带来的缺点 ？</h3><ul><li>减少使用闭包</li><li>及时释放</li></ul><h3 id="如何解决下面的循环输出问题-？"><a href="#如何解决下面的循环输出问题-？" class="headerlink" title="如何解决下面的循环输出问题 ？"></a>如何解决下面的循环输出问题 ？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i ++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么会全部输出 6 ？如何改进，让它输出 1，2，3，4，5 ？(方法越多越好)</p><p>因为 setTimeout 为宏任务，由于 js 单线程事件循环机制（EventLoop），在主线程同步任务执行完后才去执行宏任 务，因此循环结束后 setTimeout 中的回调才依次执行，但输出 i 的时候当前作用域没有，往上一级再找， 发现了 i ，此时循环已经结束，i 变成了 6 。因此会全部输出 6 。</p><p>解决方法：</p><p>1、利用 IIFE（立即执行函数表达式）当每次 for 循环时，把此时的 i 变量传递到定时器中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j)</span><br><span class="line">            &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、给定时器传入第三个参数, 作为 timer 函数的第一个函数参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(j)</span><br><span class="line">    &#125;, <span class="number">0</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、使用 ES6 中的 let</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        注：let 使 JS 发生革命性的变化，让 JS 有函数作用域变为了块级作用域，用 let 后作用域链不复存在。代码的作用域以块级为单位，以上面代码为例：</p><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="原型对象和构造函数有何关系-？"><a href="#原型对象和构造函数有何关系-？" class="headerlink" title="原型对象和构造函数有何关系 ？"></a>原型对象和构造函数有何关系 ？</h3><p>在 JavaScript 中，每当定义一个函数数据类型（普通函数、类）时候，都会自带一个  prototype 属性， 这个属性指向函数的原型对象。当函数经过 new 调用时，这个函数就成为了构造函数，返回一个全新的实例对象，这个实例对象有一个 proto 属性，指向构造函数的原型对象。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/176e00c8add949ec88cc91baddb657eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""></p><p>注：实例与原型对象之间有直接的联系，但实例与构造函数之间没有。</p><h3 id="描述一下原型链-？"><a href="#描述一下原型链-？" class="headerlink" title="描述一下原型链 ？"></a>描述一下原型链 ？</h3><p>JavaScript对象通过 proto 指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条, 即原型链。</p><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="HTTP-报文结构是怎么样-？"><a href="#HTTP-报文结构是怎么样-？" class="headerlink" title="HTTP 报文结构是怎么样 ？"></a>HTTP 报文结构是怎么样 ？</h3><p>对于 <code>TCP</code> 而言，在传输的时候分为两部分：<code>TCP 头</code>+<code>数据部分</code></p><p>而 <code>HTTP</code>而言，也是 <code>header +body</code> 结构，具体：</p><blockquote><p>起始行 + 头部 +  空行 + 实体</p></blockquote><p>由于 <code>HTTP</code> 请求报文、响应报文存在区别，因此按照结构分别介绍:</p><h4 id="起始行"><a href="#起始行" class="headerlink" title="起始行"></a>起始行</h4><p>对于<code>请求报文</code>，起始行类似于：</p><blockquote><p>GET  /home  HTTP/1.1</p></blockquote><p>也就是 <strong>方法</strong>+<strong>路径</strong>+<strong>HTTP版本</strong>。</p><p>对于<code>响应报文</code>，起始行一般是：</p><blockquote><p>HTTP/1.1  200  OK</p></blockquote><p>响应报文的起始行也叫做<strong>状态行</strong>, 由于 HTTP 版本</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据处理</title>
      <link href="/2021/09/30/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/09/30/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p> 1、行列基本操作</p><ul><li><p>取指定行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_GD = df1[df1[<span class="string">'city'</span>] == <span class="string">"广东"</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除某列为指定值的所有行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df=df[~df[<span class="string">'Year'</span>].isin([<span class="string">'2111'</span>,<span class="string">'9'</span>,<span class="string">'2105'</span>,<span class="string">'板塔结合'</span>,<span class="string">'NaN'</span>,<span class="string">'板楼'</span>,<span class="string">'暂无数据'</span>])]</span><br></pre></td></tr></table></figure></li><li><p>删除某列 为NAN（空值）的行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df[df[<span class="string">'Year'</span>].notnull()]</span><br></pre></td></tr></table></figure></li><li><p>将非连续性数据分箱(分组)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'Year'</span>] = pd.qcut(df[<span class="string">'Year'</span>],<span class="number">8</span>).astype(object)</span><br></pre></td></tr></table></figure></li><li><p>改变某列数值类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'Year'</span>] = df[<span class="string">'Year'</span>].astype(<span class="string">'int'</span>)</span><br></pre></td></tr></table></figure><p> 注意：存在空值或者字符串需要删除才能转为int/float</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array 封装栈、队列</title>
      <link href="/2021/08/07/%E6%A0%88/"/>
      <url>/2021/08/07/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>摘要：<code>栈和队列都可以基于数组、链表封装，本文只基于数组封装</code></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="封装栈"><a href="#封装栈" class="headerlink" title="封装栈"></a>封装栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//push()添加一个新元素到栈顶位置</span></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//pop()删除栈顶元素</span></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//peek()查看栈顶元素，不移除</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//isEmpty()栈内是否有元素 真为true 返回false</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//size()返回栈元素个数</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Bin2</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> number = num</span><br><span class="line">  <span class="comment">//1.创建栈结构</span></span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="comment">//2.循环取余</span></span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = num % <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 想下取整 相当于整除</span></span><br><span class="line">    num = <span class="built_in">Math</span>.floor(num / <span class="number">2</span>)</span><br><span class="line">    stack.push(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.拼接字符串</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    str += stack.pop()</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(number, <span class="string">'转化为二进制是'</span>, str)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">import</span> &#123; Stack, Bin2 &#125; <span class="keyword">from</span> <span class="string">'./stack'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------stack----------------'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stack.push(<span class="string">'aaa'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(stack.push(<span class="number">222</span>))</span><br><span class="line"><span class="built_in">console</span>.log(stack.push(<span class="string">'ccc'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'长度:'</span>, stack.size()) <span class="comment">// 长度: 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'栈:'</span>, stack.items) <span class="comment">//栈: (3) ['aaa', 222, 'ccc']</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'栈顶'</span>, stack.peek()) <span class="comment">//栈顶 ccc</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除栈顶'</span>, stack.pop()) <span class="comment">//删除栈顶 ccc</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.items) <span class="comment">//(2) ['aaa', 222]</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty()) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Bin2(<span class="number">100</span>) <span class="comment">//100 '转化为二进制是' '1100100'</span></span><br></pre></td></tr></table></figure><p><code>知识来源于哔哩哔哩up主：coderwhy</code></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装队列  :打印机</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue() 像队列尾部添加一个或多个新的(项)</span></span><br><span class="line">  enqueue(element) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// dequeue() 移除队首元素,并返回被移除元素</span></span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// front()返回队首元素</span></span><br><span class="line">  front() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//isEmpty() 是否为空</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//size()队列包含的元素个数</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用封装的队列"><a href="#调用封装的队列" class="headerlink" title="调用封装的队列"></a>调用封装的队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Queue &#125; <span class="keyword">from</span> <span class="string">'./queue'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------queue--------------'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'222'</span>)</span><br><span class="line">queue.enqueue(<span class="number">2</span>)</span><br><span class="line">queue.enqueue(<span class="number">3</span>)</span><br><span class="line">queue.enqueue(<span class="string">'111'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.items)</span><br><span class="line"><span class="built_in">console</span>.log(queue.front())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言中的不同数据类型运算问题</title>
      <link href="/2020/09/14/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%BF%90%E7%AE%97/"/>
      <url>/2020/09/14/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>不同类型的数据进行运算，如果一个运算符两侧的数据类型不同，需要先自动进行类型转换，使两者具有同一类型，然后进行运算，现将规律总结如下：</p><blockquote><p>系统有默认的转化规则，就是从精度底的转化为精度高的，避免计算时精度的丢失 具体转换规则如下 char  –&gt; short  –&gt; int —&gt; unsigned  –&gt; long –&gt; unsigned long –&gt; float –&gt; double</p></blockquote><ol><li><p>+、-、 *、 /运算的两个数中有一个数为float或double型，结果是double型，因为系统将所有float型数据都先转换为double型，然后进行运算；</p></li><li><p>若int型与float或double型数据进行运算，先将int型和float型转换为double型，然后进行运算，结果为double型；</p></li><li><p>Char型与int型数据进行运算，就是把字符的ASCII码与整型数据进行运算;</p><pre><code>如：20+&apos;B&apos;=20+66=86</code></pre></li><li><p>两个int型相除，不管是否有余数，结果都为整型；如：5/10 输出是整数部分：0</p></li><li><p>强制类型转换的一般形式为：（类型名）（表达式），将表达式整体的输出结果转换，若写成(int)x+y，则是将x先转换为整型，再与y想加，</p></li></ol><blockquote><p>如上试中： 5/10的输出结果为：0</p><pre><code>  5.0/10的输出结果为：0.5  (fioat)(5/10)的输出结果为：0.00（float）5/10的输出结果为：0.5</code></pre><p>原文<a href="https://zhidao.baidu.com/question/1836994548785755700.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/1836994548785755700.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C 语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo安装、部署</title>
      <link href="/2020/09/14/hexo%E5%AE%89%E8%A3%85/"/>
      <url>/2020/09/14/hexo%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="主要流程如下："><a href="#主要流程如下：" class="headerlink" title="主要流程如下："></a>主要流程如下：</h2><ul><li>Node环境搭建</li><li>Hexo安装</li><li>Git环境搭建</li><li>将项目部署到github</li></ul><h2 id="Node-js安装及环境搭建"><a href="#Node-js安装及环境搭建" class="headerlink" title="Node.js安装及环境搭建"></a>Node.js安装及环境搭建</h2><ol><li><p>点击此处<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node下载界面</a>选择适合自己电脑的版本</p></li><li><p>然后一直点下一步直到安装完毕，安装完毕后输入Win+R打开命令框</p></li><li><p>按照下面命令在命令窗口（cmd）执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">#显示版本号说明Node.js安装成功</span><br><span class="line">npm -v</span><br><span class="line">#显示版本号说明npm安装成功</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org </span><br><span class="line"># 由于服务器原因可以配置淘宝镜像来快速下载和安装需要的插件</span><br><span class="line">npm config get registry</span><br><span class="line"># 检查镜像是否配置成功</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>在配置好Node环境之后就可以开始安装博客系统了</p><p>1.按照下面命令在命令窗口（cmd）执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g </span><br><span class="line"><span class="comment"># 下载安装hexo</span></span><br><span class="line">hexo -v </span><br><span class="line"><span class="comment"># 检查版本号来检验是否安装成功</span></span><br></pre></td></tr></table></figure><p>2.选择你想要放博客文件的盘</p><p><img src="/img/T1.png" alt="创建blog文件"></p><p>3.执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">#创建blog文件夹来作为你的博客资源目录</span><br><span class="line">cd blog</span><br><span class="line">#进入你的博客资源目录</span><br><span class="line">npm install</span><br><span class="line">#安装hexo需要的依赖</span><br></pre></td></tr></table></figure><p>4.介绍hexo博客的文件（不操作）</p><blockquote><p>node_modules：依赖包</p><p>public：存放生成的页面    //到此步骤暂时没有public文件</p><p>theme：存放博客主题</p><p>source：文件夹下的_posts用来存放文章</p><p>_config.yml：博客的配置文件</p></blockquote><p>5.在本地服务器浏览Hexo博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">#删除静态资源文件public</span><br><span class="line">$ hexo generate</span><br><span class="line">#生成静态文件public</span><br><span class="line">$ hexo server</span><br><span class="line">#用于启动本地服务器</span><br></pre></td></tr></table></figure><p>完成后，启动浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以看到你的博客了</p><p><img src="/img/T2.png" alt="Hexo默认主题"></p><h2 id="安装Git-Bash及创建Github仓库"><a href="#安装Git-Bash及创建Github仓库" class="headerlink" title="安装Git Bash及创建Github仓库"></a>安装Git Bash及创建Github仓库</h2><p>使用Git可以将本地文件部署到github</p><p>1.点击此处<a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载Git Bash</a>,并检查安装情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line"><span class="comment">#检查Git是否安装成功</span></span><br></pre></td></tr></table></figure><p>2.我们可以将我们的博客部署到本地服务器、购买的阿里云服务器、github或者码云上，这里我们选择github</p><ul><li>先注册<a href="https://github.com/" target="_blank" rel="noopener">Github账户</a>，再创建一个和你用户名相同的仓库，<a href="http://后面加.github.io/" target="_blank" rel="noopener">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://也就是xxxx.github.io/" target="_blank" rel="noopener">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。</li></ul><p><img src="/img/T3.png" alt="生成SSH添加到Github"></p><ul><li>生成SSH密钥添加到Github</li></ul><p>在博客文件根目录比如：f:\blog下使用git bash here执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">#youremail注册GitHub的的邮箱</span><br></pre></td></tr></table></figure><p>然后一直回车知道结束，类似：</p><blockquote><p>$ ssh-keygen -t rsa -C “<a href="mailto:760461549@qq.com">760461549@qq.com</a>“</p><p>Generating public/private rsa key pair.</p><p>Enter file in which to save the key (/c/Users/hp/.ssh/id_rsa):</p><p>Enter passphrase (empty for no passphrase):</p><p>Enter same passphrase again:</p><p>Your identification has been saved in /c/Users/hp/.ssh/id_rsa.</p><p>Your public key has been saved in /c/Users/hp/.ssh/id_rsa.pub.</p><p>The key fingerprint is:</p><p>SHA256:QzOyG/Q+O6Xr8zRdr5pc7SZKyrCpkAe0O1lDXpCnIgU <a href="mailto:760461549@qq.com">760461549@qq.com</a></p><p>The key’s randomart image is:</p><p>。。。。。。</p></blockquote><p>将会在C:\Users\XXX.ssh下生成id_rsa（私钥）和id_rsa.pub(公钥)文件，打开公钥文件全选复制内容，去自己的github账户点击右上角头像选择<strong>settings</strong>，然后选择<strong>SSH Keys</strong>点<code>Add SSH Key</code>,填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容，这样我们就能看到已经添加的Key。</p><ul><li><p>测试本地仓库是否连接到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>当你输入以上命令，会有一段警告代码，是正常的，输入yes即可。如：</p><blockquote><p>The authenticity of host ‘github.com (13.229.188.59)’ can’t be established.</p><p>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</p><p>Are you sure you want to continue connecting (yes/no)? yes</p><p>Warning: Permanently added ‘github.com,13.229.188.59’ (RSA) to the list of known hosts.</p></blockquote><p>如果没有提示成功，把C盘下.ssh删了重来一遍。</p></li></ul><h2 id="将项目部署到github"><a href="#将项目部署到github" class="headerlink" title="将项目部署到github"></a>将项目部署到github</h2><p>1.这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">#YourgithubName就是你的GitHub账户</span><br></pre></td></tr></table></figure><p>2.安装deploy-git才可以部署到Github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.在博客根目录使用git bash here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">#清除静态资源文件夹（public文件）</span><br><span class="line">hexo generate</span><br><span class="line">#生成新的静态文件（public文件），生成这个文件是根据&#x2F;source文件中的内容生成</span><br><span class="line">hexo server</span><br><span class="line">#启动本地服务器，在网址栏输入localhost:4000,查看本地更新情况</span><br><span class="line">hexo deploy</span><br><span class="line">#部署到github仓库</span><br></pre></td></tr></table></figure><p>当<code>hexo d</code>成功后，你可以在网址上输入<code>https://xxx.github.io/</code>来访问你的博客主页。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>域名</title>
      <link href="/2020/09/14/DNS/"/>
      <url>/2020/09/14/DNS/</url>
      
        <content type="html"><![CDATA[<h2 id="注册和配置域名："><a href="#注册和配置域名：" class="headerlink" title="注册和配置域名："></a>注册和配置域名：</h2><ol><li><p>第一步：点击这里领券，暂时有活动，<a href="https://shimo.im/docs/TGyCppPdCdyHTKQq/" target="_blank" rel="noopener">白嫖腾讯云俩top域名各一年!</a>。</p><p>第二步：<a href="https://shimo.im/docs/TGyCppPdCdyHTKQq/" target="_blank" rel="noopener">注册域名</a></p></li><li><p>更改域名解析网址，进入万网<strong>域名控制台–&gt;域名解析–&gt;添加解析</strong></p><p>如下图：</p><p><img src="/img/T4.jpg" alt=""></p></li></ol><blockquote><p>如果出现DNS状态报错：DNS服务器错误，那就需要将域名DNS改为DNSPod,状态为正常解析才可以顺利访问网站</p><p>如下图：</p><p><img src="/img/T5.png" alt=""></p></blockquote><h2 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h2><ol><li>去博客文件夹\source下新建文本文件,命名为CNAME,不需要后缀</li><li>用文本编辑器打开并添加购买域名,如下图:</li></ol><p>​       <img src="/img/T6.png" alt=""></p><h2 id="设置项目的GitHub-Pages"><a href="#设置项目的GitHub-Pages" class="headerlink" title="设置项目的GitHub Pages"></a>设置项目的GitHub Pages</h2><ol><li><p>在 github 上面，打开 <strong>username.github.io</strong> 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。比如：</p><p><img src="/img/T7.png" alt=""></p></li></ol><h2 id="重新部署GitHub"><a href="#重新部署GitHub" class="headerlink" title="重新部署GitHub"></a>重新部署GitHub</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">#删除public</span><br><span class="line">hexo g</span><br><span class="line">#生成新的静态文件（public文件），生成这个文件是根据&#x2F;source文件中的内容生成</span><br><span class="line">hexo d</span><br><span class="line">#部署</span><br></pre></td></tr></table></figure><p>耐心等待,一开始可能会出现电脑端可以访问但手机不能访问,需要大概十多分钟,就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 部署</title>
      <link href="/2020/09/14/coding/"/>
      <url>/2020/09/14/coding/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>[^摘要]: GitHub 的分发加速网络的域名遭到 DNS 污染。由于 GitHub 的加速分发 CDN 域名 assets-cdn.github.com 遭到 DNS 污染，导致无法连接使用 GitHub 的加速分发服务器，才使得中国大陆访问速度很慢。那么现在hexo部署到coding+github上，实现境内访问coding，境外访问github</p><hr><h2 id="创建coding项目"><a href="#创建coding项目" class="headerlink" title="创建coding项目"></a>创建coding项目</h2><p>1、进入 <a href="https://coding.net/" target="_blank" rel="noopener">Coding 官网</a>点击个人版登陆，注册一个并登录，并点击创建项目</p><p>【图片】</p><p>项目名称建议和用户名一致，项目描述可以不用写</p><h2 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h2><p>[^CODING 支持使用 SSH 协议来访问 Git 仓库，提供账户 SSH 公钥和项目 SSH 公钥设置。]: </p><p>1、配置SSH公钥的方法和GitHub Pages的方式差不多，直接使用Github一样的密钥即可：</p><p>[点击头像]-&gt;[个人设置]-&gt;[SSH公钥]-&gt;[新增公钥]</p><p>【图片】</p><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><p>1、进入coding项目,在右下角选择连接方式，选择SSH方式（推荐），一键赋值。</p><p>【图片】</p><p>2、找到blog根目录的_config.yml，使用快捷键ctrl+end定位到最后，将部署信息改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">    github: git@github.com:XXXXXX.github.io.git&#x2F;&#x2F;GitHub的SSH地址</span><br><span class="line">    coding: git@e.coding.net:XXXXXXX.git&#x2F;&#x2F;coding的SSH地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="开启静态网站"><a href="#开启静态网站" class="headerlink" title="开启静态网站"></a>开启静态网站</h2><p>[^此步需要用到持续部署下的静态网站功能，所以需要开启该功能]: </p><p>1、进入coding项目，在左下角选择[项目设置]-&gt;[项目与成员]-&gt;[功能开关]-&gt;[持续部署]</p><p>【图片】</p><p>2、点击【立即部署】你会看到你的访问地址</p><p>到这里博客部署已经结束了，现在可以使用该地址访问自己的博客了。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>[^到这一步，必须去买域名或者看上一个博客白嫖域名]: </p><p>1、首先去 <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNS官网</a>添加域名解析地址，将GitHub的解析路线改为境外，这样在境外就会访问GitHub，境内改为coding的访问地址。</p><p>【图片】</p><p>2、去coding项目，点击静态网站，点击右上角的【设置】，申请绑定新域名来代替网站的访问地址。注意：SSL/TLS安全证书这里有个坑,就是如果你之前已经创建绑定过github的代码仓库,那么直接生成这个证书是生成不了的,他会显示失败的状态，没有申请到 SSL 证书，当你访问你的网站时，浏览器就会提示不是安全连接。解决办法是：把GitHub的解析暂停，然后申请，最后开启GitHub的解析。最后开启强制HTTPS访问。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
